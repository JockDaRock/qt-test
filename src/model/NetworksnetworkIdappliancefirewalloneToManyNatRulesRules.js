/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 August, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworksnetworkIdappliancefirewalloneToManyNatRulesPortRules from './NetworksnetworkIdappliancefirewalloneToManyNatRulesPortRules';

/**
* The NetworksnetworkIdappliancefirewalloneToManyNatRulesRules model module.
* @module model/NetworksnetworkIdappliancefirewalloneToManyNatRulesRules
* @version 1.0.0
*/
export default class NetworksnetworkIdappliancefirewalloneToManyNatRulesRules {
    /**
    * Constructs a new <code>NetworksnetworkIdappliancefirewalloneToManyNatRulesRules</code>.
    * @alias module:model/NetworksnetworkIdappliancefirewalloneToManyNatRulesRules
    * @class
    * @param publicIp {String} The IP address that will be used to access the internal resource from the WAN
    * @param uplink {module:model/NetworksnetworkIdappliancefirewalloneToManyNatRulesRules.UplinkEnum} The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')
    * @param portRules {Array.<module:model/NetworksnetworkIdappliancefirewalloneToManyNatRulesPortRules>} An array of associated forwarding rules
    */

    constructor(publicIp, uplink, portRules) {
        
        
        this['publicIp'] = publicIp;
        this['uplink'] = uplink;
        this['portRules'] = portRules;
        
    }

    /**
    * Constructs a <code>NetworksnetworkIdappliancefirewalloneToManyNatRulesRules</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/NetworksnetworkIdappliancefirewalloneToManyNatRulesRules} obj Optional instance to populate.
    * @return {module:model/NetworksnetworkIdappliancefirewalloneToManyNatRulesRules} The populated <code>NetworksnetworkIdappliancefirewalloneToManyNatRulesRules</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworksnetworkIdappliancefirewalloneToManyNatRulesRules();
                        
            
            if (data.hasOwnProperty('publicIp')) {
                obj['publicIp'] = ApiClient.convertToType(data['publicIp'], 'String');
            }
            if (data.hasOwnProperty('uplink')) {
                obj['uplink'] = ApiClient.convertToType(data['uplink'], 'String');
            }
            if (data.hasOwnProperty('portRules')) {
                obj['portRules'] = ApiClient.convertToType(data['portRules'], [NetworksnetworkIdappliancefirewalloneToManyNatRulesPortRules]);
            }
        }
        return obj;
    }

    /**
    * The IP address that will be used to access the internal resource from the WAN
    * @member {String} publicIp
    */
    'publicIp' = undefined;
    /**
    * The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')
    * @member {module:model/NetworksnetworkIdappliancefirewalloneToManyNatRulesRules.UplinkEnum} uplink
    */
    'uplink' = undefined;
    /**
    * An array of associated forwarding rules
    * @member {Array.<module:model/NetworksnetworkIdappliancefirewalloneToManyNatRulesPortRules>} portRules
    */
    'portRules' = undefined;



    /**
    * Allowed values for the <code>uplink</code> property.
    * @enum {String}
    * @readonly
    */
    static UplinkEnum = {
        /**
         * value: "internet1"
         * @const
         */
        "internet1": "internet1",
        /**
         * value: "internet2"
         * @const
         */
        "internet2": "internet2"    };

}
