/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.SwitchApi();
  });

  describe('(package)', function() {
    describe('SwitchApi', function() {
      describe('addNetworkSwitchStack', function() {
        it('should call addNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for addNetworkSwitchStack call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var addNetworkSwitchStack = new MerakiDashboardApi.AddNetworkSwitchStack();
          addNetworkSwitchStack.serial = "";

          instance.addNetworkSwitchStack(networkId, switchStackId, addNetworkSwitchStack, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDeviceSwitchRoutingInterface', function() {
        it('should call createDeviceSwitchRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for createDeviceSwitchRoutingInterface call and complete the assertions
          /*
          var serial = "serial_example";
          var createDeviceSwitchRoutingInterface = new MerakiDashboardApi.CreateDeviceSwitchRoutingInterface();
          createDeviceSwitchRoutingInterface.name = "";
          createDeviceSwitchRoutingInterface.subnet = "";
          createDeviceSwitchRoutingInterface.interfaceIp = "";
          createDeviceSwitchRoutingInterface.multicastRouting = "disabled";
          createDeviceSwitchRoutingInterface.vlanId = 0;
          createDeviceSwitchRoutingInterface.defaultGateway = "";
          createDeviceSwitchRoutingInterface.ospfSettings = new MerakiDashboardApi.DevicesserialswitchroutinginterfacesOspfSettings();
          createDeviceSwitchRoutingInterface.ospfSettings.area = "";
          createDeviceSwitchRoutingInterface.ospfSettings.cost = 0;
          createDeviceSwitchRoutingInterface.ospfSettings.isPassiveEnabled = false;

          instance.createDeviceSwitchRoutingInterface(serial, createDeviceSwitchRoutingInterface, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDeviceSwitchRoutingStaticRoute', function() {
        it('should call createDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for createDeviceSwitchRoutingStaticRoute call and complete the assertions
          /*
          var serial = "serial_example";
          var createDeviceSwitchRoutingStaticRoute = new MerakiDashboardApi.CreateDeviceSwitchRoutingStaticRoute();
          createDeviceSwitchRoutingStaticRoute.name = "";
          createDeviceSwitchRoutingStaticRoute.subnet = "";
          createDeviceSwitchRoutingStaticRoute.nextHopIp = "";
          createDeviceSwitchRoutingStaticRoute.advertiseViaOspfEnabled = false;
          createDeviceSwitchRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.createDeviceSwitchRoutingStaticRoute(serial, createDeviceSwitchRoutingStaticRoute, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchLinkAggregation', function() {
        it('should call createNetworkSwitchLinkAggregation successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchLinkAggregation call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.createNetworkSwitchLinkAggregation = new MerakiDashboardApi.CreateNetworkSwitchLinkAggregation();
          opts.createNetworkSwitchLinkAggregation.switchPorts = [new MerakiDashboardApi.NetworksnetworkIdswitchlinkAggregationsSwitchPorts()];
          opts.createNetworkSwitchLinkAggregation.switchPorts[0].serial = "";
          opts.createNetworkSwitchLinkAggregation.switchPorts[0].portId = "";
          opts.createNetworkSwitchLinkAggregation.switchProfilePorts = [new MerakiDashboardApi.NetworksnetworkIdswitchlinkAggregationsSwitchProfilePorts()];
          opts.createNetworkSwitchLinkAggregation.switchProfilePorts[0].profile = "";
          opts.createNetworkSwitchLinkAggregation.switchProfilePorts[0].portId = "";

          instance.createNetworkSwitchLinkAggregation(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchPortSchedule', function() {
        it('should call createNetworkSwitchPortSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchPortSchedule call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkSwitchPortSchedule = new MerakiDashboardApi.CreateNetworkSwitchPortSchedule();
          createNetworkSwitchPortSchedule.name = "";
          createNetworkSwitchPortSchedule.portSchedule = new MerakiDashboardApi.NetworksnetworkIdswitchportSchedulesPortSchedule();
          createNetworkSwitchPortSchedule.portSchedule.monday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingMonday();
          createNetworkSwitchPortSchedule.portSchedule.monday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.monday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.monday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.tuesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingTuesday();
          createNetworkSwitchPortSchedule.portSchedule.tuesday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.tuesday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.tuesday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.wednesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingWednesday();
          createNetworkSwitchPortSchedule.portSchedule.wednesday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.wednesday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.wednesday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.thursday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingThursday();
          createNetworkSwitchPortSchedule.portSchedule.thursday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.thursday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.thursday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.friday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingFriday();
          createNetworkSwitchPortSchedule.portSchedule.friday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.friday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.friday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.saturday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSaturday();
          createNetworkSwitchPortSchedule.portSchedule.saturday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.saturday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.saturday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.sunday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSunday();
          createNetworkSwitchPortSchedule.portSchedule.sunday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.sunday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.sunday.to = "";

          instance.createNetworkSwitchPortSchedule(networkId, createNetworkSwitchPortSchedule, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchQosRule', function() {
        it('should call createNetworkSwitchQosRule successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchQosRule call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkSwitchQosRule = new MerakiDashboardApi.CreateNetworkSwitchQosRule();
          createNetworkSwitchQosRule.vlan = 0;
          createNetworkSwitchQosRule.protocol = "ANY";
          createNetworkSwitchQosRule.srcPort = 0;
          createNetworkSwitchQosRule.srcPortRange = "";
          createNetworkSwitchQosRule.dstPort = 0;
          createNetworkSwitchQosRule.dstPortRange = "";
          createNetworkSwitchQosRule.dscp = 0;

          instance.createNetworkSwitchQosRule(networkId, createNetworkSwitchQosRule, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchRoutingMulticastRendezvousPoint', function() {
        it('should call createNetworkSwitchRoutingMulticastRendezvousPoint successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchRoutingMulticastRendezvousPoint call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkSwitchRoutingMulticastRendezvousPoint = new MerakiDashboardApi.CreateNetworkSwitchRoutingMulticastRendezvousPoint();
          createNetworkSwitchRoutingMulticastRendezvousPoint.interfaceIp = "";
          createNetworkSwitchRoutingMulticastRendezvousPoint.multicastGroup = "";

          instance.createNetworkSwitchRoutingMulticastRendezvousPoint(networkId, createNetworkSwitchRoutingMulticastRendezvousPoint, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchStack', function() {
        it('should call createNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchStack call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkSwitchStack = new MerakiDashboardApi.CreateNetworkSwitchStack();
          createNetworkSwitchStack.name = "";
          createNetworkSwitchStack.serials = [""];

          instance.createNetworkSwitchStack(networkId, createNetworkSwitchStack, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchStackRoutingInterface', function() {
        it('should call createNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchStackRoutingInterface call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var createNetworkSwitchStackRoutingInterface = new MerakiDashboardApi.CreateNetworkSwitchStackRoutingInterface();
          createNetworkSwitchStackRoutingInterface.name = "";
          createNetworkSwitchStackRoutingInterface.subnet = "";
          createNetworkSwitchStackRoutingInterface.interfaceIp = "";
          createNetworkSwitchStackRoutingInterface.multicastRouting = "disabled";
          createNetworkSwitchStackRoutingInterface.vlanId = 0;
          createNetworkSwitchStackRoutingInterface.defaultGateway = "";
          createNetworkSwitchStackRoutingInterface.ospfSettings = new MerakiDashboardApi.DevicesserialswitchroutinginterfacesOspfSettings();
          createNetworkSwitchStackRoutingInterface.ospfSettings.area = "";
          createNetworkSwitchStackRoutingInterface.ospfSettings.cost = 0;
          createNetworkSwitchStackRoutingInterface.ospfSettings.isPassiveEnabled = false;

          instance.createNetworkSwitchStackRoutingInterface(networkId, switchStackId, createNetworkSwitchStackRoutingInterface, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call createNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var createNetworkSwitchStackRoutingStaticRoute = new MerakiDashboardApi.CreateNetworkSwitchStackRoutingStaticRoute();
          createNetworkSwitchStackRoutingStaticRoute.name = "";
          createNetworkSwitchStackRoutingStaticRoute.subnet = "";
          createNetworkSwitchStackRoutingStaticRoute.nextHopIp = "";
          createNetworkSwitchStackRoutingStaticRoute.advertiseViaOspfEnabled = false;
          createNetworkSwitchStackRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.createNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, createNetworkSwitchStackRoutingStaticRoute, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cycleDeviceSwitchPorts', function() {
        it('should call cycleDeviceSwitchPorts successfully', function(done) {
          // TODO: uncomment, update parameter values for cycleDeviceSwitchPorts call and complete the assertions
          /*
          var serial = "serial_example";
          var cycleDeviceSwitchPorts = new MerakiDashboardApi.CycleDeviceSwitchPorts();
          cycleDeviceSwitchPorts.ports = [""];

          instance.cycleDeviceSwitchPorts(serial, cycleDeviceSwitchPorts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDeviceSwitchRoutingInterface', function() {
        it('should call deleteDeviceSwitchRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDeviceSwitchRoutingInterface call
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";

          instance.deleteDeviceSwitchRoutingInterface(serial, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDeviceSwitchRoutingStaticRoute', function() {
        it('should call deleteDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDeviceSwitchRoutingStaticRoute call
          /*
          var serial = "serial_example";
          var staticRouteId = "staticRouteId_example";

          instance.deleteDeviceSwitchRoutingStaticRoute(serial, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchLinkAggregation', function() {
        it('should call deleteNetworkSwitchLinkAggregation successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchLinkAggregation call
          /*
          var networkId = "networkId_example";
          var linkAggregationId = "linkAggregationId_example";

          instance.deleteNetworkSwitchLinkAggregation(networkId, linkAggregationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchPortSchedule', function() {
        it('should call deleteNetworkSwitchPortSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchPortSchedule call
          /*
          var networkId = "networkId_example";
          var portScheduleId = "portScheduleId_example";

          instance.deleteNetworkSwitchPortSchedule(networkId, portScheduleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchQosRule', function() {
        it('should call deleteNetworkSwitchQosRule successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchQosRule call
          /*
          var networkId = "networkId_example";
          var qosRuleId = "qosRuleId_example";

          instance.deleteNetworkSwitchQosRule(networkId, qosRuleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchRoutingMulticastRendezvousPoint', function() {
        it('should call deleteNetworkSwitchRoutingMulticastRendezvousPoint successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchRoutingMulticastRendezvousPoint call
          /*
          var networkId = "networkId_example";
          var rendezvousPointId = "rendezvousPointId_example";

          instance.deleteNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchStack', function() {
        it('should call deleteNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchStack call
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.deleteNetworkSwitchStack(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchStackRoutingInterface', function() {
        it('should call deleteNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchStackRoutingInterface call
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";

          instance.deleteNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call deleteNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchStackRoutingStaticRoute call
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";

          instance.deleteNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchPort', function() {
        it('should call getDeviceSwitchPort successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchPort call and complete the assertions
          /*
          var serial = "serial_example";
          var portId = "portId_example";

          instance.getDeviceSwitchPort(serial, portId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchPorts', function() {
        it('should call getDeviceSwitchPorts successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchPorts call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceSwitchPorts(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchPortsStatuses', function() {
        it('should call getDeviceSwitchPortsStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchPortsStatuses call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;

          instance.getDeviceSwitchPortsStatuses(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchPortsStatusesPackets', function() {
        it('should call getDeviceSwitchPortsStatusesPackets successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchPortsStatusesPackets call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;

          instance.getDeviceSwitchPortsStatusesPackets(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingInterface', function() {
        it('should call getDeviceSwitchRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingInterface call and complete the assertions
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";

          instance.getDeviceSwitchRoutingInterface(serial, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingInterfaceDhcp', function() {
        it('should call getDeviceSwitchRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingInterfaceDhcp call and complete the assertions
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";

          instance.getDeviceSwitchRoutingInterfaceDhcp(serial, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingInterfaces', function() {
        it('should call getDeviceSwitchRoutingInterfaces successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingInterfaces call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceSwitchRoutingInterfaces(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingStaticRoute', function() {
        it('should call getDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingStaticRoute call and complete the assertions
          /*
          var serial = "serial_example";
          var staticRouteId = "staticRouteId_example";

          instance.getDeviceSwitchRoutingStaticRoute(serial, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingStaticRoutes', function() {
        it('should call getDeviceSwitchRoutingStaticRoutes successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingStaticRoutes call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceSwitchRoutingStaticRoutes(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchWarmSpare', function() {
        it('should call getDeviceSwitchWarmSpare successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchWarmSpare call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceSwitchWarmSpare(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchAccessControlLists', function() {
        it('should call getNetworkSwitchAccessControlLists successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchAccessControlLists call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchAccessControlLists(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchDhcpServerPolicy', function() {
        it('should call getNetworkSwitchDhcpServerPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchDhcpServerPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchDhcpServerPolicy(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchDscpToCosMappings', function() {
        it('should call getNetworkSwitchDscpToCosMappings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchDscpToCosMappings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchDscpToCosMappings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchLinkAggregations', function() {
        it('should call getNetworkSwitchLinkAggregations successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchLinkAggregations call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchLinkAggregations(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchMtu', function() {
        it('should call getNetworkSwitchMtu successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchMtu call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchMtu(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchPortSchedules', function() {
        it('should call getNetworkSwitchPortSchedules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchPortSchedules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchPortSchedules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchQosRule', function() {
        it('should call getNetworkSwitchQosRule successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchQosRule call and complete the assertions
          /*
          var networkId = "networkId_example";
          var qosRuleId = "qosRuleId_example";

          instance.getNetworkSwitchQosRule(networkId, qosRuleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchQosRules', function() {
        it('should call getNetworkSwitchQosRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchQosRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchQosRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchQosRulesOrder', function() {
        it('should call getNetworkSwitchQosRulesOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchQosRulesOrder call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchQosRulesOrder(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchRoutingMulticast', function() {
        it('should call getNetworkSwitchRoutingMulticast successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchRoutingMulticast call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchRoutingMulticast(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchRoutingMulticastRendezvousPoint', function() {
        it('should call getNetworkSwitchRoutingMulticastRendezvousPoint successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchRoutingMulticastRendezvousPoint call and complete the assertions
          /*
          var networkId = "networkId_example";
          var rendezvousPointId = "rendezvousPointId_example";

          instance.getNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchRoutingMulticastRendezvousPoints', function() {
        it('should call getNetworkSwitchRoutingMulticastRendezvousPoints successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchRoutingMulticastRendezvousPoints call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchRoutingMulticastRendezvousPoints(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchRoutingOspf', function() {
        it('should call getNetworkSwitchRoutingOspf successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchRoutingOspf call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchRoutingOspf(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchSettings', function() {
        it('should call getNetworkSwitchSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStack', function() {
        it('should call getNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStack call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.getNetworkSwitchStack(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingInterface', function() {
        it('should call getNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingInterface call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";

          instance.getNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingInterfaceDhcp', function() {
        it('should call getNetworkSwitchStackRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingInterfaceDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";

          instance.getNetworkSwitchStackRoutingInterfaceDhcp(networkId, switchStackId, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingInterfaces', function() {
        it('should call getNetworkSwitchStackRoutingInterfaces successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingInterfaces call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.getNetworkSwitchStackRoutingInterfaces(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call getNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";

          instance.getNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingStaticRoutes', function() {
        it('should call getNetworkSwitchStackRoutingStaticRoutes successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingStaticRoutes call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.getNetworkSwitchStackRoutingStaticRoutes(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStacks', function() {
        it('should call getNetworkSwitchStacks successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStacks call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchStacks(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStormControl', function() {
        it('should call getNetworkSwitchStormControl successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStormControl call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchStormControl(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStp', function() {
        it('should call getNetworkSwitchStp successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStp call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchStp(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplateSwitchProfilePort', function() {
        it('should call getOrganizationConfigTemplateSwitchProfilePort successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplateSwitchProfilePort call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var profileId = "profileId_example";
          var portId = "portId_example";

          instance.getOrganizationConfigTemplateSwitchProfilePort(organizationId, configTemplateId, profileId, portId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplateSwitchProfilePorts', function() {
        it('should call getOrganizationConfigTemplateSwitchProfilePorts successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplateSwitchProfilePorts call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var profileId = "profileId_example";

          instance.getOrganizationConfigTemplateSwitchProfilePorts(organizationId, configTemplateId, profileId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplateSwitchProfiles', function() {
        it('should call getOrganizationConfigTemplateSwitchProfiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplateSwitchProfiles call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";

          instance.getOrganizationConfigTemplateSwitchProfiles(organizationId, configTemplateId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeNetworkSwitchStack', function() {
        it('should call removeNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for removeNetworkSwitchStack call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var removeNetworkSwitchStack = new MerakiDashboardApi.RemoveNetworkSwitchStack();
          removeNetworkSwitchStack.serial = "";

          instance.removeNetworkSwitchStack(networkId, switchStackId, removeNetworkSwitchStack, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchPort', function() {
        it('should call updateDeviceSwitchPort successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchPort call and complete the assertions
          /*
          var serial = "serial_example";
          var portId = "portId_example";
          var opts = {};
          opts.updateDeviceSwitchPort = new MerakiDashboardApi.UpdateDeviceSwitchPort();
          opts.updateDeviceSwitchPort.name = "";
          opts.updateDeviceSwitchPort.tags = [""];
          opts.updateDeviceSwitchPort.enabled = false;
          opts.updateDeviceSwitchPort.type = "trunk";
          opts.updateDeviceSwitchPort.vlan = 0;
          opts.updateDeviceSwitchPort.voiceVlan = 0;
          opts.updateDeviceSwitchPort.allowedVlans = "";
          opts.updateDeviceSwitchPort.poeEnabled = false;
          opts.updateDeviceSwitchPort.isolationEnabled = false;
          opts.updateDeviceSwitchPort.rstpEnabled = false;
          opts.updateDeviceSwitchPort.stpGuard = "disabled";
          opts.updateDeviceSwitchPort.linkNegotiation = "";
          opts.updateDeviceSwitchPort.portScheduleId = "";
          opts.updateDeviceSwitchPort.udld = "Alert only";
          opts.updateDeviceSwitchPort.accessPolicyType = "Open";
          opts.updateDeviceSwitchPort.accessPolicyNumber = 0;
          opts.updateDeviceSwitchPort.macAllowList = [""];
          opts.updateDeviceSwitchPort.stickyMacAllowList = [""];
          opts.updateDeviceSwitchPort.stickyMacAllowListLimit = 0;
          opts.updateDeviceSwitchPort.stormControlEnabled = false;
          opts.updateDeviceSwitchPort.flexibleStackingEnabled = false;

          instance.updateDeviceSwitchPort(serial, portId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchRoutingInterface', function() {
        it('should call updateDeviceSwitchRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchRoutingInterface call and complete the assertions
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateDeviceSwitchRoutingInterface = new MerakiDashboardApi.UpdateDeviceSwitchRoutingInterface();
          opts.updateDeviceSwitchRoutingInterface.name = "";
          opts.updateDeviceSwitchRoutingInterface.subnet = "";
          opts.updateDeviceSwitchRoutingInterface.interfaceIp = "";
          opts.updateDeviceSwitchRoutingInterface.multicastRouting = "disabled";
          opts.updateDeviceSwitchRoutingInterface.vlanId = 0;
          opts.updateDeviceSwitchRoutingInterface.ospfSettings = new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIdOspfSettings();
          opts.updateDeviceSwitchRoutingInterface.ospfSettings.area = "";
          opts.updateDeviceSwitchRoutingInterface.ospfSettings.cost = 0;
          opts.updateDeviceSwitchRoutingInterface.ospfSettings.isPassiveEnabled = false;

          instance.updateDeviceSwitchRoutingInterface(serial, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchRoutingInterfaceDhcp', function() {
        it('should call updateDeviceSwitchRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchRoutingInterfaceDhcp call and complete the assertions
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateDeviceSwitchRoutingInterfaceDhcp = new MerakiDashboardApi.UpdateDeviceSwitchRoutingInterfaceDhcp();
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpMode = "dhcpDisabled";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpRelayServerIps = [""];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpLeaseTime = "30 minutes";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dnsNameserversOption = "googlePublicDns";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dnsCustomNameservers = [""];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.bootOptionsEnabled = false;
          opts.updateDeviceSwitchRoutingInterfaceDhcp.bootNextServer = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.bootFileName = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions()];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions[0].code = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions[0].type = "text";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions[0].value = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges()];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges[0].start = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges[0].end = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges[0].comment = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments()];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments[0].name = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments[0].mac = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments[0].ip = "";

          instance.updateDeviceSwitchRoutingInterfaceDhcp(serial, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchRoutingStaticRoute', function() {
        it('should call updateDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchRoutingStaticRoute call and complete the assertions
          /*
          var serial = "serial_example";
          var staticRouteId = "staticRouteId_example";
          var opts = {};
          opts.updateDeviceSwitchRoutingStaticRoute = new MerakiDashboardApi.UpdateDeviceSwitchRoutingStaticRoute();
          opts.updateDeviceSwitchRoutingStaticRoute.name = "";
          opts.updateDeviceSwitchRoutingStaticRoute.subnet = "";
          opts.updateDeviceSwitchRoutingStaticRoute.nextHopIp = "";
          opts.updateDeviceSwitchRoutingStaticRoute.advertiseViaOspfEnabled = false;
          opts.updateDeviceSwitchRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.updateDeviceSwitchRoutingStaticRoute(serial, staticRouteId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchWarmSpare', function() {
        it('should call updateDeviceSwitchWarmSpare successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchWarmSpare call and complete the assertions
          /*
          var serial = "serial_example";
          var updateDeviceSwitchWarmSpare = new MerakiDashboardApi.UpdateDeviceSwitchWarmSpare();
          updateDeviceSwitchWarmSpare.enabled = false;
          updateDeviceSwitchWarmSpare.spareSerial = "";

          instance.updateDeviceSwitchWarmSpare(serial, updateDeviceSwitchWarmSpare, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchAccessControlLists', function() {
        it('should call updateNetworkSwitchAccessControlLists successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchAccessControlLists call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkSwitchAccessControlLists = new MerakiDashboardApi.UpdateNetworkSwitchAccessControlLists();
          updateNetworkSwitchAccessControlLists.rules = [new MerakiDashboardApi.NetworksnetworkIdswitchaccessControlListsRules()];
          updateNetworkSwitchAccessControlLists.rules[0].comment = "";
          updateNetworkSwitchAccessControlLists.rules[0].policy = "allow";
          updateNetworkSwitchAccessControlLists.rules[0].ipVersion = "any";
          updateNetworkSwitchAccessControlLists.rules[0].protocol = "tcp";
          updateNetworkSwitchAccessControlLists.rules[0].srcCidr = "";
          updateNetworkSwitchAccessControlLists.rules[0].srcPort = "";
          updateNetworkSwitchAccessControlLists.rules[0].dstCidr = "";
          updateNetworkSwitchAccessControlLists.rules[0].dstPort = "";
          updateNetworkSwitchAccessControlLists.rules[0].vlan = "";

          instance.updateNetworkSwitchAccessControlLists(networkId, updateNetworkSwitchAccessControlLists, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchDhcpServerPolicy', function() {
        it('should call updateNetworkSwitchDhcpServerPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchDhcpServerPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchDhcpServerPolicy = new MerakiDashboardApi.UpdateNetworkSwitchDhcpServerPolicy();
          opts.updateNetworkSwitchDhcpServerPolicy.defaultPolicy = "allow";
          opts.updateNetworkSwitchDhcpServerPolicy.allowedServers = [""];
          opts.updateNetworkSwitchDhcpServerPolicy.blockedServers = [""];

          instance.updateNetworkSwitchDhcpServerPolicy(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchDscpToCosMappings', function() {
        it('should call updateNetworkSwitchDscpToCosMappings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchDscpToCosMappings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkSwitchDscpToCosMappings = new MerakiDashboardApi.UpdateNetworkSwitchDscpToCosMappings();
          updateNetworkSwitchDscpToCosMappings.mappings = [new MerakiDashboardApi.NetworksnetworkIdswitchdscpToCosMappingsMappings()];
          updateNetworkSwitchDscpToCosMappings.mappings[0].dscp = 0;
          updateNetworkSwitchDscpToCosMappings.mappings[0].cos = 0;
          updateNetworkSwitchDscpToCosMappings.mappings[0].title = "";

          instance.updateNetworkSwitchDscpToCosMappings(networkId, updateNetworkSwitchDscpToCosMappings, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchLinkAggregation', function() {
        it('should call updateNetworkSwitchLinkAggregation successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchLinkAggregation call and complete the assertions
          /*
          var networkId = "networkId_example";
          var linkAggregationId = "linkAggregationId_example";
          var opts = {};
          opts.updateNetworkSwitchLinkAggregation = new MerakiDashboardApi.UpdateNetworkSwitchLinkAggregation();
          opts.updateNetworkSwitchLinkAggregation.switchPorts = [new MerakiDashboardApi.NetworksnetworkIdswitchlinkAggregationsSwitchPorts()];
          opts.updateNetworkSwitchLinkAggregation.switchPorts[0].serial = "";
          opts.updateNetworkSwitchLinkAggregation.switchPorts[0].portId = "";
          opts.updateNetworkSwitchLinkAggregation.switchProfilePorts = [new MerakiDashboardApi.NetworksnetworkIdswitchlinkAggregationsSwitchProfilePorts()];
          opts.updateNetworkSwitchLinkAggregation.switchProfilePorts[0].profile = "";
          opts.updateNetworkSwitchLinkAggregation.switchProfilePorts[0].portId = "";

          instance.updateNetworkSwitchLinkAggregation(networkId, linkAggregationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchMtu', function() {
        it('should call updateNetworkSwitchMtu successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchMtu call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchMtu = new MerakiDashboardApi.UpdateNetworkSwitchMtu();
          opts.updateNetworkSwitchMtu.defaultMtuSize = 0;
          opts.updateNetworkSwitchMtu.overrides = [new MerakiDashboardApi.NetworksnetworkIdswitchmtuOverrides()];
          opts.updateNetworkSwitchMtu.overrides[0].switches = [""];
          opts.updateNetworkSwitchMtu.overrides[0].switchProfiles = [""];
          opts.updateNetworkSwitchMtu.overrides[0].mtuSize = 0;

          instance.updateNetworkSwitchMtu(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchPortSchedule', function() {
        it('should call updateNetworkSwitchPortSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchPortSchedule call and complete the assertions
          /*
          var networkId = "networkId_example";
          var portScheduleId = "portScheduleId_example";
          var opts = {};
          opts.updateNetworkSwitchPortSchedule = new MerakiDashboardApi.UpdateNetworkSwitchPortSchedule();
          opts.updateNetworkSwitchPortSchedule.name = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule = new MerakiDashboardApi.NetworksnetworkIdswitchportSchedulesPortSchedule();
          opts.updateNetworkSwitchPortSchedule.portSchedule.monday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingMonday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.monday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.monday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.monday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.tuesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingTuesday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.tuesday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.tuesday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.tuesday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.wednesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingWednesday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.wednesday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.wednesday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.wednesday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.thursday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingThursday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.thursday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.thursday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.thursday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.friday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingFriday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.friday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.friday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.friday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.saturday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSaturday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.saturday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.saturday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.saturday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.sunday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSunday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.sunday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.sunday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.sunday.to = "";

          instance.updateNetworkSwitchPortSchedule(networkId, portScheduleId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchQosRule', function() {
        it('should call updateNetworkSwitchQosRule successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchQosRule call and complete the assertions
          /*
          var networkId = "networkId_example";
          var qosRuleId = "qosRuleId_example";
          var opts = {};
          opts.updateNetworkSwitchQosRule = new MerakiDashboardApi.UpdateNetworkSwitchQosRule();
          opts.updateNetworkSwitchQosRule.vlan = 0;
          opts.updateNetworkSwitchQosRule.protocol = "ANY";
          opts.updateNetworkSwitchQosRule.srcPort = 0;
          opts.updateNetworkSwitchQosRule.srcPortRange = "";
          opts.updateNetworkSwitchQosRule.dstPort = 0;
          opts.updateNetworkSwitchQosRule.dstPortRange = "";
          opts.updateNetworkSwitchQosRule.dscp = 0;

          instance.updateNetworkSwitchQosRule(networkId, qosRuleId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchQosRulesOrder', function() {
        it('should call updateNetworkSwitchQosRulesOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchQosRulesOrder call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkSwitchQosRulesOrder = new MerakiDashboardApi.UpdateNetworkSwitchQosRulesOrder();
          updateNetworkSwitchQosRulesOrder.ruleIds = [""];

          instance.updateNetworkSwitchQosRulesOrder(networkId, updateNetworkSwitchQosRulesOrder, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchRoutingMulticast', function() {
        it('should call updateNetworkSwitchRoutingMulticast successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchRoutingMulticast call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchRoutingMulticast = new MerakiDashboardApi.UpdateNetworkSwitchRoutingMulticast();
          opts.updateNetworkSwitchRoutingMulticast.defaultSettings = new MerakiDashboardApi.NetworksnetworkIdswitchroutingmulticastDefaultSettings();
          opts.updateNetworkSwitchRoutingMulticast.defaultSettings.igmpSnoopingEnabled = false;
          opts.updateNetworkSwitchRoutingMulticast.defaultSettings.floodUnknownMulticastTrafficEnabled = false;
          opts.updateNetworkSwitchRoutingMulticast.overrides = [new MerakiDashboardApi.NetworksnetworkIdswitchroutingmulticastOverrides()];
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].switchProfiles = [""];
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].switches = [""];
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].stacks = [""];
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].igmpSnoopingEnabled = false;
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].floodUnknownMulticastTrafficEnabled = false;

          instance.updateNetworkSwitchRoutingMulticast(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchRoutingMulticastRendezvousPoint', function() {
        it('should call updateNetworkSwitchRoutingMulticastRendezvousPoint successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchRoutingMulticastRendezvousPoint call and complete the assertions
          /*
          var networkId = "networkId_example";
          var rendezvousPointId = "rendezvousPointId_example";
          var updateNetworkSwitchRoutingMulticastRendezvousPoint = new MerakiDashboardApi.UpdateNetworkSwitchRoutingMulticastRendezvousPoint();
          updateNetworkSwitchRoutingMulticastRendezvousPoint.interfaceIp = "";
          updateNetworkSwitchRoutingMulticastRendezvousPoint.multicastGroup = "";

          instance.updateNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPoint, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchRoutingOspf', function() {
        it('should call updateNetworkSwitchRoutingOspf successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchRoutingOspf call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchRoutingOspf = new MerakiDashboardApi.UpdateNetworkSwitchRoutingOspf();
          opts.updateNetworkSwitchRoutingOspf.enabled = false;
          opts.updateNetworkSwitchRoutingOspf.helloTimerInSeconds = 0;
          opts.updateNetworkSwitchRoutingOspf.deadTimerInSeconds = 0;
          opts.updateNetworkSwitchRoutingOspf.areas = [new MerakiDashboardApi.NetworksnetworkIdswitchroutingospfAreas()];
          opts.updateNetworkSwitchRoutingOspf.areas[0].areaId = 0;
          opts.updateNetworkSwitchRoutingOspf.areas[0].areaName = "";
          opts.updateNetworkSwitchRoutingOspf.areas[0].areaType = "normal";
          opts.updateNetworkSwitchRoutingOspf.md5AuthenticationEnabled = false;
          opts.updateNetworkSwitchRoutingOspf.md5AuthenticationKey = new MerakiDashboardApi.NetworksnetworkIdswitchroutingospfMd5AuthenticationKey();
          opts.updateNetworkSwitchRoutingOspf.md5AuthenticationKey.id = 0;
          opts.updateNetworkSwitchRoutingOspf.md5AuthenticationKey.passphrase = "";

          instance.updateNetworkSwitchRoutingOspf(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchSettings', function() {
        it('should call updateNetworkSwitchSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchSettings = new MerakiDashboardApi.UpdateNetworkSwitchSettings();
          opts.updateNetworkSwitchSettings.vlan = 0;
          opts.updateNetworkSwitchSettings.useCombinedPower = false;
          opts.updateNetworkSwitchSettings.powerExceptions = [new MerakiDashboardApi.NetworksnetworkIdswitchsettingsPowerExceptions()];
          opts.updateNetworkSwitchSettings.powerExceptions[0].serial = "";
          opts.updateNetworkSwitchSettings.powerExceptions[0].powerType = "combined";

          instance.updateNetworkSwitchSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStackRoutingInterface', function() {
        it('should call updateNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStackRoutingInterface call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateNetworkSwitchStackRoutingInterface = new MerakiDashboardApi.UpdateNetworkSwitchStackRoutingInterface();
          opts.updateNetworkSwitchStackRoutingInterface.name = "";
          opts.updateNetworkSwitchStackRoutingInterface.subnet = "";
          opts.updateNetworkSwitchStackRoutingInterface.interfaceIp = "";
          opts.updateNetworkSwitchStackRoutingInterface.multicastRouting = "disabled";
          opts.updateNetworkSwitchStackRoutingInterface.vlanId = 0;
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings = new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIdOspfSettings();
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings.area = "";
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings.cost = 0;
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings.isPassiveEnabled = false;

          instance.updateNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStackRoutingInterfaceDhcp', function() {
        it('should call updateNetworkSwitchStackRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStackRoutingInterfaceDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp = new MerakiDashboardApi.UpdateNetworkSwitchStackRoutingInterfaceDhcp();
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpMode = "dhcpDisabled";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpRelayServerIps = [""];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpLeaseTime = "30 minutes";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dnsNameserversOption = "googlePublicDns";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dnsCustomNameservers = [""];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootOptionsEnabled = false;
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootNextServer = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootFileName = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].code = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].type = "text";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].value = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].start = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].end = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].comment = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].name = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].mac = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].ip = "";

          instance.updateNetworkSwitchStackRoutingInterfaceDhcp(networkId, switchStackId, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call updateNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";
          var opts = {};
          opts.updateNetworkSwitchStackRoutingStaticRoute = new MerakiDashboardApi.UpdateNetworkSwitchStackRoutingStaticRoute();
          opts.updateNetworkSwitchStackRoutingStaticRoute.name = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.subnet = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.nextHopIp = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.advertiseViaOspfEnabled = false;
          opts.updateNetworkSwitchStackRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.updateNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStormControl', function() {
        it('should call updateNetworkSwitchStormControl successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStormControl call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchStormControl = new MerakiDashboardApi.UpdateNetworkSwitchStormControl();
          opts.updateNetworkSwitchStormControl.broadcastThreshold = 0;
          opts.updateNetworkSwitchStormControl.multicastThreshold = 0;
          opts.updateNetworkSwitchStormControl.unknownUnicastThreshold = 0;

          instance.updateNetworkSwitchStormControl(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStp', function() {
        it('should call updateNetworkSwitchStp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchStp = new MerakiDashboardApi.UpdateNetworkSwitchStp();
          opts.updateNetworkSwitchStp.rstpEnabled = false;
          opts.updateNetworkSwitchStp.stpBridgePriority = [new MerakiDashboardApi.NetworksnetworkIdswitchstpStpBridgePriority()];
          opts.updateNetworkSwitchStp.stpBridgePriority[0].switchProfiles = [""];
          opts.updateNetworkSwitchStp.stpBridgePriority[0].switches = [""];
          opts.updateNetworkSwitchStp.stpBridgePriority[0].stacks = [""];
          opts.updateNetworkSwitchStp.stpBridgePriority[0].stpPriority = 0;

          instance.updateNetworkSwitchStp(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationConfigTemplateSwitchProfilePort', function() {
        it('should call updateOrganizationConfigTemplateSwitchProfilePort successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationConfigTemplateSwitchProfilePort call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var profileId = "profileId_example";
          var portId = "portId_example";
          var opts = {};
          opts.updateOrganizationConfigTemplateSwitchProfilePort = new MerakiDashboardApi.UpdateOrganizationConfigTemplateSwitchProfilePort();
          opts.updateOrganizationConfigTemplateSwitchProfilePort.name = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.tags = [""];
          opts.updateOrganizationConfigTemplateSwitchProfilePort.enabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.type = "trunk";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.vlan = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.voiceVlan = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.allowedVlans = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.poeEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.isolationEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.rstpEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stpGuard = "disabled";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.linkNegotiation = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.portScheduleId = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.udld = "Alert only";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.accessPolicyType = "Open";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.accessPolicyNumber = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.macAllowList = [""];
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stickyMacAllowList = [""];
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stickyMacAllowListLimit = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stormControlEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.flexibleStackingEnabled = false;

          instance.updateOrganizationConfigTemplateSwitchProfilePort(organizationId, configTemplateId, profileId, portId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
