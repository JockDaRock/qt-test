/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.IdentityPsksApi();
  });

  describe('(package)', function() {
    describe('IdentityPsksApi', function() {
      describe('createNetworkWirelessSsidIdentityPsk', function() {
        it('should call createNetworkWirelessSsidIdentityPsk successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkWirelessSsidIdentityPsk call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var createNetworkWirelessSsidIdentityPsk = new MerakiDashboardApi.CreateNetworkWirelessSsidIdentityPsk();
          createNetworkWirelessSsidIdentityPsk.name = "";
          createNetworkWirelessSsidIdentityPsk.passphrase = "";
          createNetworkWirelessSsidIdentityPsk.groupPolicyId = "";

          instance.createNetworkWirelessSsidIdentityPsk(networkId, _number, createNetworkWirelessSsidIdentityPsk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkWirelessSsidIdentityPsk', function() {
        it('should call deleteNetworkWirelessSsidIdentityPsk successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkWirelessSsidIdentityPsk call
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var identityPskId = "identityPskId_example";

          instance.deleteNetworkWirelessSsidIdentityPsk(networkId, _number, identityPskId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidIdentityPsk', function() {
        it('should call getNetworkWirelessSsidIdentityPsk successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidIdentityPsk call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var identityPskId = "identityPskId_example";

          instance.getNetworkWirelessSsidIdentityPsk(networkId, _number, identityPskId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidIdentityPsks', function() {
        it('should call getNetworkWirelessSsidIdentityPsks successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidIdentityPsks call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidIdentityPsks(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidIdentityPsk', function() {
        it('should call updateNetworkWirelessSsidIdentityPsk successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidIdentityPsk call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var identityPskId = "identityPskId_example";
          var opts = {};
          opts.updateNetworkWirelessSsidIdentityPsk = new MerakiDashboardApi.UpdateNetworkWirelessSsidIdentityPsk();
          opts.updateNetworkWirelessSsidIdentityPsk.name = "";
          opts.updateNetworkWirelessSsidIdentityPsk.passphrase = "";
          opts.updateNetworkWirelessSsidIdentityPsk.groupPolicyId = "";

          instance.updateNetworkWirelessSsidIdentityPsk(networkId, _number, identityPskId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
