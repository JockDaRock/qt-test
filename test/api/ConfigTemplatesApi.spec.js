/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.ConfigTemplatesApi();
  });

  describe('(package)', function() {
    describe('ConfigTemplatesApi', function() {
      describe('createOrganizationConfigTemplate', function() {
        it('should call createOrganizationConfigTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationConfigTemplate call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationConfigTemplate = new MerakiDashboardApi.CreateOrganizationConfigTemplate();
          createOrganizationConfigTemplate.name = "";
          createOrganizationConfigTemplate.timeZone = "";
          createOrganizationConfigTemplate.copyFromNetworkId = "";

          instance.createOrganizationConfigTemplate(organizationId, createOrganizationConfigTemplate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationConfigTemplate', function() {
        it('should call deleteOrganizationConfigTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationConfigTemplate call
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";

          instance.deleteOrganizationConfigTemplate(organizationId, configTemplateId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplate', function() {
        it('should call getOrganizationConfigTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplate call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";

          instance.getOrganizationConfigTemplate(organizationId, configTemplateId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplateSwitchProfilePort', function() {
        it('should call getOrganizationConfigTemplateSwitchProfilePort successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplateSwitchProfilePort call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var profileId = "profileId_example";
          var portId = "portId_example";

          instance.getOrganizationConfigTemplateSwitchProfilePort(organizationId, configTemplateId, profileId, portId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplateSwitchProfilePorts', function() {
        it('should call getOrganizationConfigTemplateSwitchProfilePorts successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplateSwitchProfilePorts call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var profileId = "profileId_example";

          instance.getOrganizationConfigTemplateSwitchProfilePorts(organizationId, configTemplateId, profileId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplateSwitchProfiles', function() {
        it('should call getOrganizationConfigTemplateSwitchProfiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplateSwitchProfiles call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";

          instance.getOrganizationConfigTemplateSwitchProfiles(organizationId, configTemplateId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplates', function() {
        it('should call getOrganizationConfigTemplates successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplates call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationConfigTemplates(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationConfigTemplate', function() {
        it('should call updateOrganizationConfigTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationConfigTemplate call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var opts = {};
          opts.updateOrganizationConfigTemplate = new MerakiDashboardApi.UpdateOrganizationConfigTemplate();
          opts.updateOrganizationConfigTemplate.name = "";
          opts.updateOrganizationConfigTemplate.timeZone = "";

          instance.updateOrganizationConfigTemplate(organizationId, configTemplateId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationConfigTemplateSwitchProfilePort', function() {
        it('should call updateOrganizationConfigTemplateSwitchProfilePort successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationConfigTemplateSwitchProfilePort call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var profileId = "profileId_example";
          var portId = "portId_example";
          var opts = {};
          opts.updateOrganizationConfigTemplateSwitchProfilePort = new MerakiDashboardApi.UpdateOrganizationConfigTemplateSwitchProfilePort();
          opts.updateOrganizationConfigTemplateSwitchProfilePort.name = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.tags = [""];
          opts.updateOrganizationConfigTemplateSwitchProfilePort.enabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.type = "trunk";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.vlan = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.voiceVlan = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.allowedVlans = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.poeEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.isolationEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.rstpEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stpGuard = "disabled";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.linkNegotiation = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.portScheduleId = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.udld = "Alert only";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.accessPolicyType = "Open";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.accessPolicyNumber = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.macAllowList = [""];
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stickyMacAllowList = [""];
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stickyMacAllowListLimit = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stormControlEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.flexibleStackingEnabled = false;

          instance.updateOrganizationConfigTemplateSwitchProfilePort(organizationId, configTemplateId, profileId, portId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
