/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.MerakiDashboardApi) {
      root.MerakiDashboardApi = {};
    }
    root.MerakiDashboardApi.UpdateDevice = factory(root.MerakiDashboardApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The UpdateDevice model module.
   * @module model/UpdateDevice
   * @version 1.1.0
   */

  /**
   * Constructs a new <code>UpdateDevice</code>.
   * @alias module:model/UpdateDevice
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>UpdateDevice</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UpdateDevice} obj Optional instance to populate.
   * @return {module:model/UpdateDevice} The populated <code>UpdateDevice</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('tags'))
        obj.tags = ApiClient.convertToType(data['tags'], ['String']);
      if (data.hasOwnProperty('lat'))
        obj.lat = ApiClient.convertToType(data['lat'], 'Number');
      if (data.hasOwnProperty('lng'))
        obj.lng = ApiClient.convertToType(data['lng'], 'Number');
      if (data.hasOwnProperty('address'))
        obj.address = ApiClient.convertToType(data['address'], 'String');
      if (data.hasOwnProperty('notes'))
        obj.notes = ApiClient.convertToType(data['notes'], 'String');
      if (data.hasOwnProperty('moveMapMarker'))
        obj.moveMapMarker = ApiClient.convertToType(data['moveMapMarker'], 'Boolean');
      if (data.hasOwnProperty('switchProfileId'))
        obj.switchProfileId = ApiClient.convertToType(data['switchProfileId'], 'String');
      if (data.hasOwnProperty('floorPlanId'))
        obj.floorPlanId = ApiClient.convertToType(data['floorPlanId'], 'String');
    }
    return obj;
  }

  /**
   * The name of a device
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * The list of tags of a device
   * @member {Array.<String>} tags
   */
  exports.prototype.tags = undefined;

  /**
   * The latitude of a device
   * @member {Number} lat
   */
  exports.prototype.lat = undefined;

  /**
   * The longitude of a device
   * @member {Number} lng
   */
  exports.prototype.lng = undefined;

  /**
   * The address of a device
   * @member {String} address
   */
  exports.prototype.address = undefined;

  /**
   * The notes for the device. String. Limited to 255 characters.
   * @member {String} notes
   */
  exports.prototype.notes = undefined;

  /**
   * Whether or not to set the latitude and longitude of a device based on the new address. Only applies when lat and lng are not specified.
   * @member {Boolean} moveMapMarker
   */
  exports.prototype.moveMapMarker = undefined;

  /**
   * The ID of a switch profile to bind to the device (for available switch profiles, see the 'Switch Profiles' endpoint). Use null to unbind the switch device from the current profile. For a device to be bindable to a switch profile, it must (1) be a switch, and (2) belong to a network that is bound to a configuration template.
   * @member {String} switchProfileId
   */
  exports.prototype.switchProfileId = undefined;

  /**
   * The floor plan to associate to this device. null disassociates the device from the floorplan.
   * @member {String} floorPlanId
   */
  exports.prototype.floorPlanId = undefined;

  return exports;

}));
