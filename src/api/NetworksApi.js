/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BindNetwork', 'model/ClaimNetworkDevices', 'model/CombineOrganizationNetworks', 'model/CreateNetworkFloorPlan', 'model/CreateNetworkGroupPolicy', 'model/CreateNetworkMerakiAuthUser', 'model/CreateNetworkMqttBroker', 'model/CreateNetworkPiiRequest', 'model/CreateNetworkWebhooksHttpServer', 'model/CreateNetworkWebhooksWebhookTest', 'model/CreateOrganizationNetwork', 'model/ProvisionNetworkClients', 'model/RemoveNetworkDevices', 'model/UpdateNetwork', 'model/UpdateNetworkAlertsSettings', 'model/UpdateNetworkClientPolicy', 'model/UpdateNetworkClientSplashAuthorizationStatus', 'model/UpdateNetworkFirmwareUpgrades', 'model/UpdateNetworkFloorPlan', 'model/UpdateNetworkGroupPolicy', 'model/UpdateNetworkMerakiAuthUser', 'model/UpdateNetworkMqttBroker', 'model/UpdateNetworkNetflow', 'model/UpdateNetworkSettings', 'model/UpdateNetworkSnmp', 'model/UpdateNetworkSyslogServers', 'model/UpdateNetworkTrafficAnalysis', 'model/UpdateNetworkWebhooksHttpServer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BindNetwork'), require('../model/ClaimNetworkDevices'), require('../model/CombineOrganizationNetworks'), require('../model/CreateNetworkFloorPlan'), require('../model/CreateNetworkGroupPolicy'), require('../model/CreateNetworkMerakiAuthUser'), require('../model/CreateNetworkMqttBroker'), require('../model/CreateNetworkPiiRequest'), require('../model/CreateNetworkWebhooksHttpServer'), require('../model/CreateNetworkWebhooksWebhookTest'), require('../model/CreateOrganizationNetwork'), require('../model/ProvisionNetworkClients'), require('../model/RemoveNetworkDevices'), require('../model/UpdateNetwork'), require('../model/UpdateNetworkAlertsSettings'), require('../model/UpdateNetworkClientPolicy'), require('../model/UpdateNetworkClientSplashAuthorizationStatus'), require('../model/UpdateNetworkFirmwareUpgrades'), require('../model/UpdateNetworkFloorPlan'), require('../model/UpdateNetworkGroupPolicy'), require('../model/UpdateNetworkMerakiAuthUser'), require('../model/UpdateNetworkMqttBroker'), require('../model/UpdateNetworkNetflow'), require('../model/UpdateNetworkSettings'), require('../model/UpdateNetworkSnmp'), require('../model/UpdateNetworkSyslogServers'), require('../model/UpdateNetworkTrafficAnalysis'), require('../model/UpdateNetworkWebhooksHttpServer'));
  } else {
    // Browser globals (root is window)
    if (!root.MerakiDashboardApi) {
      root.MerakiDashboardApi = {};
    }
    root.MerakiDashboardApi.NetworksApi = factory(root.MerakiDashboardApi.ApiClient, root.MerakiDashboardApi.BindNetwork, root.MerakiDashboardApi.ClaimNetworkDevices, root.MerakiDashboardApi.CombineOrganizationNetworks, root.MerakiDashboardApi.CreateNetworkFloorPlan, root.MerakiDashboardApi.CreateNetworkGroupPolicy, root.MerakiDashboardApi.CreateNetworkMerakiAuthUser, root.MerakiDashboardApi.CreateNetworkMqttBroker, root.MerakiDashboardApi.CreateNetworkPiiRequest, root.MerakiDashboardApi.CreateNetworkWebhooksHttpServer, root.MerakiDashboardApi.CreateNetworkWebhooksWebhookTest, root.MerakiDashboardApi.CreateOrganizationNetwork, root.MerakiDashboardApi.ProvisionNetworkClients, root.MerakiDashboardApi.RemoveNetworkDevices, root.MerakiDashboardApi.UpdateNetwork, root.MerakiDashboardApi.UpdateNetworkAlertsSettings, root.MerakiDashboardApi.UpdateNetworkClientPolicy, root.MerakiDashboardApi.UpdateNetworkClientSplashAuthorizationStatus, root.MerakiDashboardApi.UpdateNetworkFirmwareUpgrades, root.MerakiDashboardApi.UpdateNetworkFloorPlan, root.MerakiDashboardApi.UpdateNetworkGroupPolicy, root.MerakiDashboardApi.UpdateNetworkMerakiAuthUser, root.MerakiDashboardApi.UpdateNetworkMqttBroker, root.MerakiDashboardApi.UpdateNetworkNetflow, root.MerakiDashboardApi.UpdateNetworkSettings, root.MerakiDashboardApi.UpdateNetworkSnmp, root.MerakiDashboardApi.UpdateNetworkSyslogServers, root.MerakiDashboardApi.UpdateNetworkTrafficAnalysis, root.MerakiDashboardApi.UpdateNetworkWebhooksHttpServer);
  }
}(this, function(ApiClient, BindNetwork, ClaimNetworkDevices, CombineOrganizationNetworks, CreateNetworkFloorPlan, CreateNetworkGroupPolicy, CreateNetworkMerakiAuthUser, CreateNetworkMqttBroker, CreateNetworkPiiRequest, CreateNetworkWebhooksHttpServer, CreateNetworkWebhooksWebhookTest, CreateOrganizationNetwork, ProvisionNetworkClients, RemoveNetworkDevices, UpdateNetwork, UpdateNetworkAlertsSettings, UpdateNetworkClientPolicy, UpdateNetworkClientSplashAuthorizationStatus, UpdateNetworkFirmwareUpgrades, UpdateNetworkFloorPlan, UpdateNetworkGroupPolicy, UpdateNetworkMerakiAuthUser, UpdateNetworkMqttBroker, UpdateNetworkNetflow, UpdateNetworkSettings, UpdateNetworkSnmp, UpdateNetworkSyslogServers, UpdateNetworkTrafficAnalysis, UpdateNetworkWebhooksHttpServer) {
  'use strict';

  /**
   * Networks service.
   * @module api/NetworksApi
   * @version 1.1.0
   */

  /**
   * Constructs a new NetworksApi. 
   * @alias module:api/NetworksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the bindNetwork operation.
     * @callback module:api/NetworksApi~bindNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bind a network to a template.
     * Bind a network to a template.
     * @param {String} networkId 
     * @param {module:model/BindNetwork} bindNetwork 
     * @param {module:api/NetworksApi~bindNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.bindNetwork = function(networkId, bindNetwork, callback) {
      var postBody = bindNetwork;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling bindNetwork");
      }

      // verify the required parameter 'bindNetwork' is set
      if (bindNetwork === undefined || bindNetwork === null) {
        throw new Error("Missing the required parameter 'bindNetwork' when calling bindNetwork");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/bind', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the claimNetworkDevices operation.
     * @callback module:api/NetworksApi~claimNetworkDevicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim devices into a network
     * Claim devices into a network
     * @param {String} networkId 
     * @param {module:model/ClaimNetworkDevices} claimNetworkDevices 
     * @param {module:api/NetworksApi~claimNetworkDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.claimNetworkDevices = function(networkId, claimNetworkDevices, callback) {
      var postBody = claimNetworkDevices;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling claimNetworkDevices");
      }

      // verify the required parameter 'claimNetworkDevices' is set
      if (claimNetworkDevices === undefined || claimNetworkDevices === null) {
        throw new Error("Missing the required parameter 'claimNetworkDevices' when calling claimNetworkDevices");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/networks/{networkId}/devices/claim', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the combineOrganizationNetworks operation.
     * @callback module:api/NetworksApi~combineOrganizationNetworksCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Combine multiple networks into a single network
     * Combine multiple networks into a single network
     * @param {String} organizationId 
     * @param {module:model/CombineOrganizationNetworks} combineOrganizationNetworks 
     * @param {module:api/NetworksApi~combineOrganizationNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.combineOrganizationNetworks = function(organizationId, combineOrganizationNetworks, callback) {
      var postBody = combineOrganizationNetworks;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling combineOrganizationNetworks");
      }

      // verify the required parameter 'combineOrganizationNetworks' is set
      if (combineOrganizationNetworks === undefined || combineOrganizationNetworks === null) {
        throw new Error("Missing the required parameter 'combineOrganizationNetworks' when calling combineOrganizationNetworks");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks/combine', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkFloorPlan operation.
     * @callback module:api/NetworksApi~createNetworkFloorPlanCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a floor plan
     * Upload a floor plan
     * @param {String} networkId 
     * @param {module:model/CreateNetworkFloorPlan} createNetworkFloorPlan 
     * @param {module:api/NetworksApi~createNetworkFloorPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createNetworkFloorPlan = function(networkId, createNetworkFloorPlan, callback) {
      var postBody = createNetworkFloorPlan;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkFloorPlan");
      }

      // verify the required parameter 'createNetworkFloorPlan' is set
      if (createNetworkFloorPlan === undefined || createNetworkFloorPlan === null) {
        throw new Error("Missing the required parameter 'createNetworkFloorPlan' when calling createNetworkFloorPlan");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkGroupPolicy operation.
     * @callback module:api/NetworksApi~createNetworkGroupPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a group policy
     * Create a group policy
     * @param {String} networkId 
     * @param {module:model/CreateNetworkGroupPolicy} createNetworkGroupPolicy 
     * @param {module:api/NetworksApi~createNetworkGroupPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createNetworkGroupPolicy = function(networkId, createNetworkGroupPolicy, callback) {
      var postBody = createNetworkGroupPolicy;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkGroupPolicy");
      }

      // verify the required parameter 'createNetworkGroupPolicy' is set
      if (createNetworkGroupPolicy === undefined || createNetworkGroupPolicy === null) {
        throw new Error("Missing the required parameter 'createNetworkGroupPolicy' when calling createNetworkGroupPolicy");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkMerakiAuthUser operation.
     * @callback module:api/NetworksApi~createNetworkMerakiAuthUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a user configured with Meraki Authentication for a network (currently supports 802.1X and Splash Guest users, and currently, organizations have a 50,000 user cap)
     * Create a user configured with Meraki Authentication for a network (currently supports 802.1X and Splash Guest users, and currently, organizations have a 50,000 user cap)
     * @param {String} networkId 
     * @param {module:model/CreateNetworkMerakiAuthUser} createNetworkMerakiAuthUser 
     * @param {module:api/NetworksApi~createNetworkMerakiAuthUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createNetworkMerakiAuthUser = function(networkId, createNetworkMerakiAuthUser, callback) {
      var postBody = createNetworkMerakiAuthUser;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkMerakiAuthUser");
      }

      // verify the required parameter 'createNetworkMerakiAuthUser' is set
      if (createNetworkMerakiAuthUser === undefined || createNetworkMerakiAuthUser === null) {
        throw new Error("Missing the required parameter 'createNetworkMerakiAuthUser' when calling createNetworkMerakiAuthUser");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkMqttBroker operation.
     * @callback module:api/NetworksApi~createNetworkMqttBrokerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an MQTT broker
     * Add an MQTT broker
     * @param {String} networkId 
     * @param {module:model/CreateNetworkMqttBroker} createNetworkMqttBroker 
     * @param {module:api/NetworksApi~createNetworkMqttBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createNetworkMqttBroker = function(networkId, createNetworkMqttBroker, callback) {
      var postBody = createNetworkMqttBroker;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkMqttBroker");
      }

      // verify the required parameter 'createNetworkMqttBroker' is set
      if (createNetworkMqttBroker === undefined || createNetworkMqttBroker === null) {
        throw new Error("Missing the required parameter 'createNetworkMqttBroker' when calling createNetworkMqttBroker");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkPiiRequest operation.
     * @callback module:api/NetworksApi~createNetworkPiiRequestCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a new delete or restrict processing PII request
     * Submit a new delete or restrict processing PII request  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/requests ```
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateNetworkPiiRequest} opts.createNetworkPiiRequest 
     * @param {module:api/NetworksApi~createNetworkPiiRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createNetworkPiiRequest = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['createNetworkPiiRequest'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkPiiRequest");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/pii/requests', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkWebhooksHttpServer operation.
     * @callback module:api/NetworksApi~createNetworkWebhooksHttpServerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an HTTP server to a network
     * Add an HTTP server to a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkWebhooksHttpServer} createNetworkWebhooksHttpServer 
     * @param {module:api/NetworksApi~createNetworkWebhooksHttpServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createNetworkWebhooksHttpServer = function(networkId, createNetworkWebhooksHttpServer, callback) {
      var postBody = createNetworkWebhooksHttpServer;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkWebhooksHttpServer");
      }

      // verify the required parameter 'createNetworkWebhooksHttpServer' is set
      if (createNetworkWebhooksHttpServer === undefined || createNetworkWebhooksHttpServer === null) {
        throw new Error("Missing the required parameter 'createNetworkWebhooksHttpServer' when calling createNetworkWebhooksHttpServer");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkWebhooksWebhookTest operation.
     * @callback module:api/NetworksApi~createNetworkWebhooksWebhookTestCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a test webhook for a network
     * Send a test webhook for a network
     * @param {String} networkId 
     * @param {module:model/CreateNetworkWebhooksWebhookTest} createNetworkWebhooksWebhookTest 
     * @param {module:api/NetworksApi~createNetworkWebhooksWebhookTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createNetworkWebhooksWebhookTest = function(networkId, createNetworkWebhooksWebhookTest, callback) {
      var postBody = createNetworkWebhooksWebhookTest;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkWebhooksWebhookTest");
      }

      // verify the required parameter 'createNetworkWebhooksWebhookTest' is set
      if (createNetworkWebhooksWebhookTest === undefined || createNetworkWebhooksWebhookTest === null) {
        throw new Error("Missing the required parameter 'createNetworkWebhooksWebhookTest' when calling createNetworkWebhooksWebhookTest");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/webhookTests', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationNetwork operation.
     * @callback module:api/NetworksApi~createOrganizationNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a network
     * Create a network
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationNetwork} createOrganizationNetwork 
     * @param {module:api/NetworksApi~createOrganizationNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createOrganizationNetwork = function(organizationId, createOrganizationNetwork, callback) {
      var postBody = createOrganizationNetwork;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationNetwork");
      }

      // verify the required parameter 'createOrganizationNetwork' is set
      if (createOrganizationNetwork === undefined || createOrganizationNetwork === null) {
        throw new Error("Missing the required parameter 'createOrganizationNetwork' when calling createOrganizationNetwork");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetwork operation.
     * @callback module:api/NetworksApi~deleteNetworkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a network
     * Delete a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~deleteNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNetwork = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetwork");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/networks/{networkId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkFloorPlan operation.
     * @callback module:api/NetworksApi~deleteNetworkFloorPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destroy a floor plan
     * Destroy a floor plan
     * @param {String} networkId 
     * @param {String} floorPlanId 
     * @param {module:api/NetworksApi~deleteNetworkFloorPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNetworkFloorPlan = function(networkId, floorPlanId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkFloorPlan");
      }

      // verify the required parameter 'floorPlanId' is set
      if (floorPlanId === undefined || floorPlanId === null) {
        throw new Error("Missing the required parameter 'floorPlanId' when calling deleteNetworkFloorPlan");
      }


      var pathParams = {
        'networkId': networkId,
        'floorPlanId': floorPlanId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans/{floorPlanId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkGroupPolicy operation.
     * @callback module:api/NetworksApi~deleteNetworkGroupPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a group policy
     * Delete a group policy
     * @param {String} networkId 
     * @param {String} groupPolicyId 
     * @param {module:api/NetworksApi~deleteNetworkGroupPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNetworkGroupPolicy = function(networkId, groupPolicyId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkGroupPolicy");
      }

      // verify the required parameter 'groupPolicyId' is set
      if (groupPolicyId === undefined || groupPolicyId === null) {
        throw new Error("Missing the required parameter 'groupPolicyId' when calling deleteNetworkGroupPolicy");
      }


      var pathParams = {
        'networkId': networkId,
        'groupPolicyId': groupPolicyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies/{groupPolicyId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkMerakiAuthUser operation.
     * @callback module:api/NetworksApi~deleteNetworkMerakiAuthUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user configured with Meraki Authentication (currently only 802.1X RADIUS users can be deleted)
     * Delete a user configured with Meraki Authentication (currently only 802.1X RADIUS users can be deleted)
     * @param {String} networkId 
     * @param {String} merakiAuthUserId 
     * @param {module:api/NetworksApi~deleteNetworkMerakiAuthUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNetworkMerakiAuthUser = function(networkId, merakiAuthUserId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkMerakiAuthUser");
      }

      // verify the required parameter 'merakiAuthUserId' is set
      if (merakiAuthUserId === undefined || merakiAuthUserId === null) {
        throw new Error("Missing the required parameter 'merakiAuthUserId' when calling deleteNetworkMerakiAuthUser");
      }


      var pathParams = {
        'networkId': networkId,
        'merakiAuthUserId': merakiAuthUserId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkMqttBroker operation.
     * @callback module:api/NetworksApi~deleteNetworkMqttBrokerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an MQTT broker
     * Delete an MQTT broker
     * @param {String} networkId 
     * @param {String} mqttBrokerId 
     * @param {module:api/NetworksApi~deleteNetworkMqttBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNetworkMqttBroker = function(networkId, mqttBrokerId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkMqttBroker");
      }

      // verify the required parameter 'mqttBrokerId' is set
      if (mqttBrokerId === undefined || mqttBrokerId === null) {
        throw new Error("Missing the required parameter 'mqttBrokerId' when calling deleteNetworkMqttBroker");
      }


      var pathParams = {
        'networkId': networkId,
        'mqttBrokerId': mqttBrokerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkPiiRequest operation.
     * @callback module:api/NetworksApi~deleteNetworkPiiRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a restrict processing PII request
     * Delete a restrict processing PII request  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/requests/{requestId} ```
     * @param {String} networkId 
     * @param {String} requestId 
     * @param {module:api/NetworksApi~deleteNetworkPiiRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNetworkPiiRequest = function(networkId, requestId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkPiiRequest");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling deleteNetworkPiiRequest");
      }


      var pathParams = {
        'networkId': networkId,
        'requestId': requestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/networks/{networkId}/pii/requests/{requestId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkWebhooksHttpServer operation.
     * @callback module:api/NetworksApi~deleteNetworkWebhooksHttpServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an HTTP server from a network
     * Delete an HTTP server from a network
     * @param {String} networkId 
     * @param {String} httpServerId 
     * @param {module:api/NetworksApi~deleteNetworkWebhooksHttpServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNetworkWebhooksHttpServer = function(networkId, httpServerId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkWebhooksHttpServer");
      }

      // verify the required parameter 'httpServerId' is set
      if (httpServerId === undefined || httpServerId === null) {
        throw new Error("Missing the required parameter 'httpServerId' when calling deleteNetworkWebhooksHttpServer");
      }


      var pathParams = {
        'networkId': networkId,
        'httpServerId': httpServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers/{httpServerId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetwork operation.
     * @callback module:api/NetworksApi~getNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a network
     * Return a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetwork = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetwork");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAlertsSettings operation.
     * @callback module:api/NetworksApi~getNetworkAlertsSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the alert configuration for this network
     * Return the alert configuration for this network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkAlertsSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkAlertsSettings = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAlertsSettings");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/alerts/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkBluetoothClient operation.
     * @callback module:api/NetworksApi~getNetworkBluetoothClientCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a Bluetooth client. Bluetooth clients can be identified by their ID or their MAC.
     * Return a Bluetooth client. Bluetooth clients can be identified by their ID or their MAC.
     * @param {String} networkId 
     * @param {String} bluetoothClientId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeConnectivityHistory Include the connectivity history for this client
     * @param {Number} opts.connectivityHistoryTimespan The timespan, in seconds, for the connectivityHistory data. By default 1 day, 86400, will be used.
     * @param {module:api/NetworksApi~getNetworkBluetoothClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkBluetoothClient = function(networkId, bluetoothClientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkBluetoothClient");
      }

      // verify the required parameter 'bluetoothClientId' is set
      if (bluetoothClientId === undefined || bluetoothClientId === null) {
        throw new Error("Missing the required parameter 'bluetoothClientId' when calling getNetworkBluetoothClient");
      }


      var pathParams = {
        'networkId': networkId,
        'bluetoothClientId': bluetoothClientId
      };
      var queryParams = {
        'includeConnectivityHistory': opts['includeConnectivityHistory'],
        'connectivityHistoryTimespan': opts['connectivityHistoryTimespan'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/bluetoothClients/{bluetoothClientId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkBluetoothClients operation.
     * @callback module:api/NetworksApi~getNetworkBluetoothClientsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the Bluetooth clients seen by APs in this network
     * List the Bluetooth clients seen by APs in this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.t0 The beginning of the timespan for the data. The maximum lookback period is 7 days from today.
     * @param {Number} opts.timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 7 days. The default is 1 day.
     * @param {Number} opts.perPage The number of entries per page returned. Acceptable range is 5 - 1000. Default is 10.
     * @param {String} opts.startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {Boolean} opts.includeConnectivityHistory Include the connectivity history for this client
     * @param {module:api/NetworksApi~getNetworkBluetoothClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkBluetoothClients = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkBluetoothClients");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'includeConnectivityHistory': opts['includeConnectivityHistory'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/bluetoothClients', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClient operation.
     * @callback module:api/NetworksApi~getNetworkClientCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * Return the client associated with the given identifier. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:api/NetworksApi~getNetworkClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkClient = function(networkId, clientId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClient");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClient");
      }


      var pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientPolicy operation.
     * @callback module:api/NetworksApi~getNetworkClientPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * Return the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:api/NetworksApi~getNetworkClientPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkClientPolicy = function(networkId, clientId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientPolicy");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClientPolicy");
      }


      var pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/policy', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientSplashAuthorizationStatus operation.
     * @callback module:api/NetworksApi~getNetworkClientSplashAuthorizationStatusCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the splash authorization for a client, for each SSID they've associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * Return the splash authorization for a client, for each SSID they've associated with through splash. Only enabled SSIDs with Click-through splash enabled will be included. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:api/NetworksApi~getNetworkClientSplashAuthorizationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkClientSplashAuthorizationStatus = function(networkId, clientId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientSplashAuthorizationStatus");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClientSplashAuthorizationStatus");
      }


      var pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientTrafficHistory operation.
     * @callback module:api/NetworksApi~getNetworkClientTrafficHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the client's network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide > General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * Return the client's network traffic data over time. Usage data is in kilobytes. This endpoint requires detailed traffic analysis to be enabled on the Network-wide > General page. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.perPage The number of entries per page returned. Acceptable range is 3 - 1000.
     * @param {String} opts.startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/NetworksApi~getNetworkClientTrafficHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkClientTrafficHistory = function(networkId, clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientTrafficHistory");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClientTrafficHistory");
      }


      var pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      var queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/trafficHistory', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClientUsageHistory operation.
     * @callback module:api/NetworksApi~getNetworkClientUsageHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the client's daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * Return the client's daily usage history. Usage data is in kilobytes. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:api/NetworksApi~getNetworkClientUsageHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkClientUsageHistory = function(networkId, clientId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClientUsageHistory");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getNetworkClientUsageHistory");
      }


      var pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/usageHistory', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkClients operation.
     * @callback module:api/NetworksApi~getNetworkClientsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the clients that have used this network in the timespan
     * List the clients that have used this network in the timespan
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} opts.timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} opts.perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
     * @param {String} opts.startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/NetworksApi~getNetworkClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkClients = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkClients");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/clients', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDevices operation.
     * @callback module:api/NetworksApi~getNetworkDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the devices in a network
     * List the devices in a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkDevices = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkDevices");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/devices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkEvents operation.
     * @callback module:api/NetworksApi~getNetworkEventsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the events for the network
     * List the events for the network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.productType The product type to fetch events for. This parameter is required for networks with multiple device types. Valid types are wireless, appliance, switch, systemsManager, camera, and cellularGateway
     * @param {Array.<String>} opts.includedEventTypes A list of event types. The returned events will be filtered to only include events with these types.
     * @param {Array.<String>} opts.excludedEventTypes A list of event types. The returned events will be filtered to exclude events with these types.
     * @param {String} opts.deviceMac The MAC address of the Meraki device which the list of events will be filtered with
     * @param {String} opts.deviceSerial The serial of the Meraki device which the list of events will be filtered with
     * @param {String} opts.deviceName The name of the Meraki device which the list of events will be filtered with
     * @param {String} opts.clientIp The IP of the client which the list of events will be filtered with. Only supported for track-by-IP networks.
     * @param {String} opts.clientMac The MAC address of the client which the list of events will be filtered with. Only supported for track-by-MAC networks.
     * @param {String} opts.clientName The name, or partial name, of the client which the list of events will be filtered with
     * @param {String} opts.smDeviceMac The MAC address of the Systems Manager device which the list of events will be filtered with
     * @param {String} opts.smDeviceName The name of the Systems Manager device which the list of events will be filtered with
     * @param {Number} opts.perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 10.
     * @param {String} opts.startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/NetworksApi~getNetworkEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkEvents = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkEvents");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
        'productType': opts['productType'],
        'deviceMac': opts['deviceMac'],
        'deviceSerial': opts['deviceSerial'],
        'deviceName': opts['deviceName'],
        'clientIp': opts['clientIp'],
        'clientMac': opts['clientMac'],
        'clientName': opts['clientName'],
        'smDeviceMac': opts['smDeviceMac'],
        'smDeviceName': opts['smDeviceName'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
      };
      var collectionQueryParams = {
        'includedEventTypes': {
          value: opts['includedEventTypes'],
          collectionFormat: 'multi'
        },
        'excludedEventTypes': {
          value: opts['excludedEventTypes'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/events', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkEventsEventTypes operation.
     * @callback module:api/NetworksApi~getNetworkEventsEventTypesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the event type to human-readable description
     * List the event type to human-readable description
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkEventsEventTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkEventsEventTypes = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkEventsEventTypes");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/events/eventTypes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFirmwareUpgrades operation.
     * @callback module:api/NetworksApi~getNetworkFirmwareUpgradesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current maintenance window for a network
     * Get current maintenance window for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkFirmwareUpgradesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkFirmwareUpgrades = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFirmwareUpgrades");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFloorPlan operation.
     * @callback module:api/NetworksApi~getNetworkFloorPlanCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a floor plan by ID
     * Find a floor plan by ID
     * @param {String} networkId 
     * @param {String} floorPlanId 
     * @param {module:api/NetworksApi~getNetworkFloorPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkFloorPlan = function(networkId, floorPlanId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFloorPlan");
      }

      // verify the required parameter 'floorPlanId' is set
      if (floorPlanId === undefined || floorPlanId === null) {
        throw new Error("Missing the required parameter 'floorPlanId' when calling getNetworkFloorPlan");
      }


      var pathParams = {
        'networkId': networkId,
        'floorPlanId': floorPlanId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans/{floorPlanId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkFloorPlans operation.
     * @callback module:api/NetworksApi~getNetworkFloorPlansCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the floor plans that belong to your network
     * List the floor plans that belong to your network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkFloorPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkFloorPlans = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkFloorPlans");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupPolicies operation.
     * @callback module:api/NetworksApi~getNetworkGroupPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the group policies in a network
     * List the group policies in a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkGroupPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkGroupPolicies = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkGroupPolicies");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkGroupPolicy operation.
     * @callback module:api/NetworksApi~getNetworkGroupPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display a group policy
     * Display a group policy
     * @param {String} networkId 
     * @param {String} groupPolicyId 
     * @param {module:api/NetworksApi~getNetworkGroupPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkGroupPolicy = function(networkId, groupPolicyId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkGroupPolicy");
      }

      // verify the required parameter 'groupPolicyId' is set
      if (groupPolicyId === undefined || groupPolicyId === null) {
        throw new Error("Missing the required parameter 'groupPolicyId' when calling getNetworkGroupPolicy");
      }


      var pathParams = {
        'networkId': networkId,
        'groupPolicyId': groupPolicyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies/{groupPolicyId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMerakiAuthUser operation.
     * @callback module:api/NetworksApi~getNetworkMerakiAuthUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the Meraki Auth splash or RADIUS user
     * Return the Meraki Auth splash or RADIUS user
     * @param {String} networkId 
     * @param {String} merakiAuthUserId 
     * @param {module:api/NetworksApi~getNetworkMerakiAuthUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkMerakiAuthUser = function(networkId, merakiAuthUserId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkMerakiAuthUser");
      }

      // verify the required parameter 'merakiAuthUserId' is set
      if (merakiAuthUserId === undefined || merakiAuthUserId === null) {
        throw new Error("Missing the required parameter 'merakiAuthUserId' when calling getNetworkMerakiAuthUser");
      }


      var pathParams = {
        'networkId': networkId,
        'merakiAuthUserId': merakiAuthUserId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMerakiAuthUsers operation.
     * @callback module:api/NetworksApi~getNetworkMerakiAuthUsersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the splash or RADIUS users configured under Meraki Authentication for a network
     * List the splash or RADIUS users configured under Meraki Authentication for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkMerakiAuthUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkMerakiAuthUsers = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkMerakiAuthUsers");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMqttBroker operation.
     * @callback module:api/NetworksApi~getNetworkMqttBrokerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an MQTT broker
     * Return an MQTT broker
     * @param {String} networkId 
     * @param {String} mqttBrokerId 
     * @param {module:api/NetworksApi~getNetworkMqttBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkMqttBroker = function(networkId, mqttBrokerId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkMqttBroker");
      }

      // verify the required parameter 'mqttBrokerId' is set
      if (mqttBrokerId === undefined || mqttBrokerId === null) {
        throw new Error("Missing the required parameter 'mqttBrokerId' when calling getNetworkMqttBroker");
      }


      var pathParams = {
        'networkId': networkId,
        'mqttBrokerId': mqttBrokerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMqttBrokers operation.
     * @callback module:api/NetworksApi~getNetworkMqttBrokersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the MQTT brokers for this network
     * List the MQTT brokers for this network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkMqttBrokersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkMqttBrokers = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkMqttBrokers");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkNetflow operation.
     * @callback module:api/NetworksApi~getNetworkNetflowCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the NetFlow traffic reporting settings for a network
     * Return the NetFlow traffic reporting settings for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkNetflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkNetflow = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkNetflow");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/netflow', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkNetworkHealthChannelUtilization operation.
     * @callback module:api/NetworksApi~getNetworkNetworkHealthChannelUtilizationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the channel utilization over each radio for all APs in a network.
     * Get the channel utilization over each radio for all APs in a network.
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} opts.t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} opts.timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} opts.resolution The time resolution in seconds for returned data. The valid resolutions are: 600. The default is 600.
     * @param {Number} opts.perPage The number of entries per page returned. Acceptable range is 3 - 100. Default is 10.
     * @param {String} opts.startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/NetworksApi~getNetworkNetworkHealthChannelUtilizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkNetworkHealthChannelUtilization = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkNetworkHealthChannelUtilization");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'resolution': opts['resolution'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/networkHealth/channelUtilization', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiPiiKeys operation.
     * @callback module:api/NetworksApi~getNetworkPiiPiiKeysCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key \"0\" containing the applicable keys.
     * List the keys required to access Personally Identifiable Information (PII) for a given identifier. Exactly one identifier will be accepted. If the organization contains org-wide Systems Manager users matching the key provided then there will be an entry with the key \"0\" containing the applicable keys.  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/piiKeys ```
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.username The username of a Systems Manager user
     * @param {String} opts.email The email of a network user account or a Systems Manager device
     * @param {String} opts.mac The MAC of a network client device or a Systems Manager device
     * @param {String} opts.serial The serial of a Systems Manager device
     * @param {String} opts.imei The IMEI of a Systems Manager device
     * @param {String} opts.bluetoothMac The MAC of a Bluetooth client
     * @param {module:api/NetworksApi~getNetworkPiiPiiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkPiiPiiKeys = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiPiiKeys");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
        'username': opts['username'],
        'email': opts['email'],
        'mac': opts['mac'],
        'serial': opts['serial'],
        'imei': opts['imei'],
        'bluetoothMac': opts['bluetoothMac'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/pii/piiKeys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiRequest operation.
     * @callback module:api/NetworksApi~getNetworkPiiRequestCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a PII request
     * Return a PII request  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/requests/{requestId} ```
     * @param {String} networkId 
     * @param {String} requestId 
     * @param {module:api/NetworksApi~getNetworkPiiRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkPiiRequest = function(networkId, requestId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiRequest");
      }

      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling getNetworkPiiRequest");
      }


      var pathParams = {
        'networkId': networkId,
        'requestId': requestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/pii/requests/{requestId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiRequests operation.
     * @callback module:api/NetworksApi~getNetworkPiiRequestsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the PII requests for this network or organization
     * List the PII requests for this network or organization  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/requests ```
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkPiiRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkPiiRequests = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiRequests");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/pii/requests', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiSmDevicesForKey operation.
     * @callback module:api/NetworksApi~getNetworkPiiSmDevicesForKeyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager device ID(s) associated with that identifier. These device IDs can be used with the Systems Manager API endpoints to retrieve device details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/smDevicesForKey ```
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.username The username of a Systems Manager user
     * @param {String} opts.email The email of a network user account or a Systems Manager device
     * @param {String} opts.mac The MAC of a network client device or a Systems Manager device
     * @param {String} opts.serial The serial of a Systems Manager device
     * @param {String} opts.imei The IMEI of a Systems Manager device
     * @param {String} opts.bluetoothMac The MAC of a Bluetooth client
     * @param {module:api/NetworksApi~getNetworkPiiSmDevicesForKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkPiiSmDevicesForKey = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiSmDevicesForKey");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
        'username': opts['username'],
        'email': opts['email'],
        'mac': opts['mac'],
        'serial': opts['serial'],
        'imei': opts['imei'],
        'bluetoothMac': opts['bluetoothMac'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/pii/smDevicesForKey', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkPiiSmOwnersForKey operation.
     * @callback module:api/NetworksApi~getNetworkPiiSmOwnersForKeyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.
     * Given a piece of Personally Identifiable Information (PII), return the Systems Manager owner ID(s) associated with that identifier. These owner IDs can be used with the Systems Manager API endpoints to retrieve owner details. Exactly one identifier will be accepted.  ## ALTERNATE PATH  ``` /organizations/{organizationId}/pii/smOwnersForKey ```
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.username The username of a Systems Manager user
     * @param {String} opts.email The email of a network user account or a Systems Manager device
     * @param {String} opts.mac The MAC of a network client device or a Systems Manager device
     * @param {String} opts.serial The serial of a Systems Manager device
     * @param {String} opts.imei The IMEI of a Systems Manager device
     * @param {String} opts.bluetoothMac The MAC of a Bluetooth client
     * @param {module:api/NetworksApi~getNetworkPiiSmOwnersForKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkPiiSmOwnersForKey = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkPiiSmOwnersForKey");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
        'username': opts['username'],
        'email': opts['email'],
        'mac': opts['mac'],
        'serial': opts['serial'],
        'imei': opts['imei'],
        'bluetoothMac': opts['bluetoothMac'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/pii/smOwnersForKey', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSettings operation.
     * @callback module:api/NetworksApi~getNetworkSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the settings for a network
     * Return the settings for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkSettings = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSettings");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSnmp operation.
     * @callback module:api/NetworksApi~getNetworkSnmpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the SNMP settings for a network
     * Return the SNMP settings for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkSnmpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkSnmp = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSnmp");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/snmp', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSplashLoginAttempts operation.
     * @callback module:api/NetworksApi~getNetworkSplashLoginAttemptsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the splash login attempts for a network
     * List the splash login attempts for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.ssidNumber Only return the login attempts for the specified SSID
     * @param {String} opts.loginIdentifier The username, email, or phone number used during login
     * @param {Number} opts.timespan The timespan, in seconds, for the login attempts. The period will be from [timespan] seconds ago until now. The maximum timespan is 3 months
     * @param {module:api/NetworksApi~getNetworkSplashLoginAttemptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkSplashLoginAttempts = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSplashLoginAttempts");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
        'ssidNumber': opts['ssidNumber'],
        'loginIdentifier': opts['loginIdentifier'],
        'timespan': opts['timespan'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/splashLoginAttempts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSyslogServers operation.
     * @callback module:api/NetworksApi~getNetworkSyslogServersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the syslog servers for a network
     * List the syslog servers for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkSyslogServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkSyslogServers = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSyslogServers");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/syslogServers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTraffic operation.
     * @callback module:api/NetworksApi~getNetworkTrafficCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *     The traffic analysis data for this network.     <a href=\"https://documentation.meraki.com/MR/Monitoring_and_Reporting/Hostname_Visibility\">Traffic Analysis with Hostname Visibility</a> must be enabled on the network. 
     *     The traffic analysis data for this network.     <a href=\"https://documentation.meraki.com/MR/Monitoring_and_Reporting/Hostname_Visibility\">Traffic Analysis with Hostname Visibility</a> must be enabled on the network. 
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.t0 The beginning of the timespan for the data. The maximum lookback period is 30 days from today.
     * @param {Number} opts.timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 30 days.
     * @param {module:model/String} opts.deviceType     Filter the data by device type: 'combined', 'wireless', 'switch' or 'appliance'. Defaults to 'combined'.     When using 'combined', for each rule the data will come from the device type with the most usage. 
     * @param {module:api/NetworksApi~getNetworkTrafficCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkTraffic = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkTraffic");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan'],
        'deviceType': opts['deviceType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/traffic', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTrafficAnalysis operation.
     * @callback module:api/NetworksApi~getNetworkTrafficAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the traffic analysis settings for a network
     * Return the traffic analysis settings for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkTrafficAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkTrafficAnalysis = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkTrafficAnalysis");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/trafficAnalysis', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTrafficShapingApplicationCategories operation.
     * @callback module:api/NetworksApi~getNetworkTrafficShapingApplicationCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the application categories for traffic shaping rules.
     * Returns the application categories for traffic shaping rules.
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkTrafficShapingApplicationCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkTrafficShapingApplicationCategories = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkTrafficShapingApplicationCategories");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/trafficShaping/applicationCategories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkTrafficShapingDscpTaggingOptions operation.
     * @callback module:api/NetworksApi~getNetworkTrafficShapingDscpTaggingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * Returns the available DSCP tagging options for your traffic shaping rules.
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkTrafficShapingDscpTaggingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkTrafficShapingDscpTaggingOptions = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkTrafficShapingDscpTaggingOptions");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/trafficShaping/dscpTaggingOptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWebhooksHttpServer operation.
     * @callback module:api/NetworksApi~getNetworkWebhooksHttpServerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an HTTP server for a network
     * Return an HTTP server for a network
     * @param {String} networkId 
     * @param {String} httpServerId 
     * @param {module:api/NetworksApi~getNetworkWebhooksHttpServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkWebhooksHttpServer = function(networkId, httpServerId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWebhooksHttpServer");
      }

      // verify the required parameter 'httpServerId' is set
      if (httpServerId === undefined || httpServerId === null) {
        throw new Error("Missing the required parameter 'httpServerId' when calling getNetworkWebhooksHttpServer");
      }


      var pathParams = {
        'networkId': networkId,
        'httpServerId': httpServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers/{httpServerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWebhooksHttpServers operation.
     * @callback module:api/NetworksApi~getNetworkWebhooksHttpServersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the HTTP servers for a network
     * List the HTTP servers for a network
     * @param {String} networkId 
     * @param {module:api/NetworksApi~getNetworkWebhooksHttpServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkWebhooksHttpServers = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWebhooksHttpServers");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWebhooksWebhookTest operation.
     * @callback module:api/NetworksApi~getNetworkWebhooksWebhookTestCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the status of a webhook test for a network
     * Return the status of a webhook test for a network
     * @param {String} networkId 
     * @param {String} webhookTestId 
     * @param {module:api/NetworksApi~getNetworkWebhooksWebhookTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkWebhooksWebhookTest = function(networkId, webhookTestId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWebhooksWebhookTest");
      }

      // verify the required parameter 'webhookTestId' is set
      if (webhookTestId === undefined || webhookTestId === null) {
        throw new Error("Missing the required parameter 'webhookTestId' when calling getNetworkWebhooksWebhookTest");
      }


      var pathParams = {
        'networkId': networkId,
        'webhookTestId': webhookTestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/webhookTests/{webhookTestId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationNetworks operation.
     * @callback module:api/NetworksApi~getOrganizationNetworksCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the networks that the user has privileges on in an organization
     * List the networks that the user has privileges on in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.configTemplateId An optional parameter that is the ID of a config template. Will return all networks bound to that template.
     * @param {Array.<String>} opts.tags An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
     * @param {module:model/String} opts.tagsFilterType An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {Number} opts.perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
     * @param {String} opts.startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/NetworksApi~getOrganizationNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationNetworks = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationNetworks");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        'configTemplateId': opts['configTemplateId'],
        'tagsFilterType': opts['tagsFilterType'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
      };
      var collectionQueryParams = {
        'tags': {
          value: opts['tags'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the provisionNetworkClients operation.
     * @callback module:api/NetworksApi~provisionNetworkClientsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * Provisions a client with a name and policy. Clients can be provisioned before they associate to the network.
     * @param {String} networkId 
     * @param {module:model/ProvisionNetworkClients} provisionNetworkClients 
     * @param {module:api/NetworksApi~provisionNetworkClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.provisionNetworkClients = function(networkId, provisionNetworkClients, callback) {
      var postBody = provisionNetworkClients;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling provisionNetworkClients");
      }

      // verify the required parameter 'provisionNetworkClients' is set
      if (provisionNetworkClients === undefined || provisionNetworkClients === null) {
        throw new Error("Missing the required parameter 'provisionNetworkClients' when calling provisionNetworkClients");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/clients/provision', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNetworkDevices operation.
     * @callback module:api/NetworksApi~removeNetworkDevicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a single device
     * Remove a single device
     * @param {String} networkId 
     * @param {module:model/RemoveNetworkDevices} removeNetworkDevices 
     * @param {module:api/NetworksApi~removeNetworkDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeNetworkDevices = function(networkId, removeNetworkDevices, callback) {
      var postBody = removeNetworkDevices;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling removeNetworkDevices");
      }

      // verify the required parameter 'removeNetworkDevices' is set
      if (removeNetworkDevices === undefined || removeNetworkDevices === null) {
        throw new Error("Missing the required parameter 'removeNetworkDevices' when calling removeNetworkDevices");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/networks/{networkId}/devices/remove', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the splitNetwork operation.
     * @callback module:api/NetworksApi~splitNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Split a combined network into individual networks for each type of device
     * Split a combined network into individual networks for each type of device
     * @param {String} networkId 
     * @param {module:api/NetworksApi~splitNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.splitNetwork = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling splitNetwork");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/split', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unbindNetwork operation.
     * @callback module:api/NetworksApi~unbindNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unbind a network from a template.
     * Unbind a network from a template.
     * @param {String} networkId 
     * @param {module:api/NetworksApi~unbindNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.unbindNetwork = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling unbindNetwork");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/unbind', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetwork operation.
     * @callback module:api/NetworksApi~updateNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a network
     * Update a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetwork} opts.updateNetwork 
     * @param {module:api/NetworksApi~updateNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetwork = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetwork'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetwork");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkAlertsSettings operation.
     * @callback module:api/NetworksApi~updateNetworkAlertsSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the alert configuration for this network
     * Update the alert configuration for this network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkAlertsSettings} opts.updateNetworkAlertsSettings 
     * @param {module:api/NetworksApi~updateNetworkAlertsSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkAlertsSettings = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkAlertsSettings'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkAlertsSettings");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/alerts/settings', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkClientPolicy operation.
     * @callback module:api/NetworksApi~updateNetworkClientPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * Update the policy assigned to a client on the network. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:model/UpdateNetworkClientPolicy} updateNetworkClientPolicy 
     * @param {module:api/NetworksApi~updateNetworkClientPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkClientPolicy = function(networkId, clientId, updateNetworkClientPolicy, callback) {
      var postBody = updateNetworkClientPolicy;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkClientPolicy");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateNetworkClientPolicy");
      }

      // verify the required parameter 'updateNetworkClientPolicy' is set
      if (updateNetworkClientPolicy === undefined || updateNetworkClientPolicy === null) {
        throw new Error("Missing the required parameter 'updateNetworkClientPolicy' when calling updateNetworkClientPolicy");
      }


      var pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/policy', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkClientSplashAuthorizationStatus operation.
     * @callback module:api/NetworksApi~updateNetworkClientSplashAuthorizationStatusCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client's splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * Update a client's splash authorization. Clients can be identified by a client key or either the MAC or IP depending on whether the network uses Track-by-IP.
     * @param {String} networkId 
     * @param {String} clientId 
     * @param {module:model/UpdateNetworkClientSplashAuthorizationStatus} updateNetworkClientSplashAuthorizationStatus 
     * @param {module:api/NetworksApi~updateNetworkClientSplashAuthorizationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkClientSplashAuthorizationStatus = function(networkId, clientId, updateNetworkClientSplashAuthorizationStatus, callback) {
      var postBody = updateNetworkClientSplashAuthorizationStatus;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkClientSplashAuthorizationStatus");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateNetworkClientSplashAuthorizationStatus");
      }

      // verify the required parameter 'updateNetworkClientSplashAuthorizationStatus' is set
      if (updateNetworkClientSplashAuthorizationStatus === undefined || updateNetworkClientSplashAuthorizationStatus === null) {
        throw new Error("Missing the required parameter 'updateNetworkClientSplashAuthorizationStatus' when calling updateNetworkClientSplashAuthorizationStatus");
      }


      var pathParams = {
        'networkId': networkId,
        'clientId': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/clients/{clientId}/splashAuthorizationStatus', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFirmwareUpgrades operation.
     * @callback module:api/NetworksApi~updateNetworkFirmwareUpgradesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update current maintenance window for a network
     * Update current maintenance window for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkFirmwareUpgrades} opts.updateNetworkFirmwareUpgrades 
     * @param {module:api/NetworksApi~updateNetworkFirmwareUpgradesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkFirmwareUpgrades = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkFirmwareUpgrades'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFirmwareUpgrades");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/firmwareUpgrades', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkFloorPlan operation.
     * @callback module:api/NetworksApi~updateNetworkFloorPlanCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a floor plan's geolocation and other meta data
     * Update a floor plan's geolocation and other meta data
     * @param {String} networkId 
     * @param {String} floorPlanId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkFloorPlan} opts.updateNetworkFloorPlan 
     * @param {module:api/NetworksApi~updateNetworkFloorPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkFloorPlan = function(networkId, floorPlanId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkFloorPlan'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkFloorPlan");
      }

      // verify the required parameter 'floorPlanId' is set
      if (floorPlanId === undefined || floorPlanId === null) {
        throw new Error("Missing the required parameter 'floorPlanId' when calling updateNetworkFloorPlan");
      }


      var pathParams = {
        'networkId': networkId,
        'floorPlanId': floorPlanId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/floorPlans/{floorPlanId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkGroupPolicy operation.
     * @callback module:api/NetworksApi~updateNetworkGroupPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a group policy
     * Update a group policy
     * @param {String} networkId 
     * @param {String} groupPolicyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkGroupPolicy} opts.updateNetworkGroupPolicy 
     * @param {module:api/NetworksApi~updateNetworkGroupPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkGroupPolicy = function(networkId, groupPolicyId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkGroupPolicy'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkGroupPolicy");
      }

      // verify the required parameter 'groupPolicyId' is set
      if (groupPolicyId === undefined || groupPolicyId === null) {
        throw new Error("Missing the required parameter 'groupPolicyId' when calling updateNetworkGroupPolicy");
      }


      var pathParams = {
        'networkId': networkId,
        'groupPolicyId': groupPolicyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/groupPolicies/{groupPolicyId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkMerakiAuthUser operation.
     * @callback module:api/NetworksApi~updateNetworkMerakiAuthUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user configured with Meraki Authentication (currently only 802.1X RADIUS users can be updated)
     * Update a user configured with Meraki Authentication (currently only 802.1X RADIUS users can be updated)
     * @param {String} networkId 
     * @param {String} merakiAuthUserId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkMerakiAuthUser} opts.updateNetworkMerakiAuthUser 
     * @param {module:api/NetworksApi~updateNetworkMerakiAuthUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkMerakiAuthUser = function(networkId, merakiAuthUserId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkMerakiAuthUser'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkMerakiAuthUser");
      }

      // verify the required parameter 'merakiAuthUserId' is set
      if (merakiAuthUserId === undefined || merakiAuthUserId === null) {
        throw new Error("Missing the required parameter 'merakiAuthUserId' when calling updateNetworkMerakiAuthUser");
      }


      var pathParams = {
        'networkId': networkId,
        'merakiAuthUserId': merakiAuthUserId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/merakiAuthUsers/{merakiAuthUserId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkMqttBroker operation.
     * @callback module:api/NetworksApi~updateNetworkMqttBrokerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an MQTT broker
     * Update an MQTT broker
     * @param {String} networkId 
     * @param {String} mqttBrokerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkMqttBroker} opts.updateNetworkMqttBroker 
     * @param {module:api/NetworksApi~updateNetworkMqttBrokerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkMqttBroker = function(networkId, mqttBrokerId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkMqttBroker'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkMqttBroker");
      }

      // verify the required parameter 'mqttBrokerId' is set
      if (mqttBrokerId === undefined || mqttBrokerId === null) {
        throw new Error("Missing the required parameter 'mqttBrokerId' when calling updateNetworkMqttBroker");
      }


      var pathParams = {
        'networkId': networkId,
        'mqttBrokerId': mqttBrokerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/mqttBrokers/{mqttBrokerId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkNetflow operation.
     * @callback module:api/NetworksApi~updateNetworkNetflowCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the NetFlow traffic reporting settings for a network
     * Update the NetFlow traffic reporting settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkNetflow} opts.updateNetworkNetflow 
     * @param {module:api/NetworksApi~updateNetworkNetflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkNetflow = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkNetflow'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkNetflow");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/netflow', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSettings operation.
     * @callback module:api/NetworksApi~updateNetworkSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the settings for a network
     * Update the settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSettings} opts.updateNetworkSettings 
     * @param {module:api/NetworksApi~updateNetworkSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkSettings = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkSettings'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSettings");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/settings', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSnmp operation.
     * @callback module:api/NetworksApi~updateNetworkSnmpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the SNMP settings for a network
     * Update the SNMP settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSnmp} opts.updateNetworkSnmp 
     * @param {module:api/NetworksApi~updateNetworkSnmpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkSnmp = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkSnmp'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSnmp");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/snmp', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSyslogServers operation.
     * @callback module:api/NetworksApi~updateNetworkSyslogServersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the syslog servers for a network
     * Update the syslog servers for a network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkSyslogServers} updateNetworkSyslogServers 
     * @param {module:api/NetworksApi~updateNetworkSyslogServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkSyslogServers = function(networkId, updateNetworkSyslogServers, callback) {
      var postBody = updateNetworkSyslogServers;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSyslogServers");
      }

      // verify the required parameter 'updateNetworkSyslogServers' is set
      if (updateNetworkSyslogServers === undefined || updateNetworkSyslogServers === null) {
        throw new Error("Missing the required parameter 'updateNetworkSyslogServers' when calling updateNetworkSyslogServers");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/syslogServers', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkTrafficAnalysis operation.
     * @callback module:api/NetworksApi~updateNetworkTrafficAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the traffic analysis settings for a network
     * Update the traffic analysis settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkTrafficAnalysis} opts.updateNetworkTrafficAnalysis 
     * @param {module:api/NetworksApi~updateNetworkTrafficAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkTrafficAnalysis = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkTrafficAnalysis'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkTrafficAnalysis");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/trafficAnalysis', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWebhooksHttpServer operation.
     * @callback module:api/NetworksApi~updateNetworkWebhooksHttpServerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an HTTP server
     * Update an HTTP server
     * @param {String} networkId 
     * @param {String} httpServerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWebhooksHttpServer} opts.updateNetworkWebhooksHttpServer 
     * @param {module:api/NetworksApi~updateNetworkWebhooksHttpServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkWebhooksHttpServer = function(networkId, httpServerId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkWebhooksHttpServer'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWebhooksHttpServer");
      }

      // verify the required parameter 'httpServerId' is set
      if (httpServerId === undefined || httpServerId === null) {
        throw new Error("Missing the required parameter 'httpServerId' when calling updateNetworkWebhooksHttpServer");
      }


      var pathParams = {
        'networkId': networkId,
        'httpServerId': httpServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/webhooks/httpServers/{httpServerId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
