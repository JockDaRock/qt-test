/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.MonitorApi();
  });

  describe('(package)', function() {
    describe('MonitorApi', function() {
      describe('generateDeviceCameraSnapshot', function() {
        it('should call generateDeviceCameraSnapshot successfully', function(done) {
          // TODO: uncomment, update parameter values for generateDeviceCameraSnapshot call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.generateDeviceCameraSnapshot = new MerakiDashboardApi.GenerateDeviceCameraSnapshot();
          opts.generateDeviceCameraSnapshot.timestamp = "";
          opts.generateDeviceCameraSnapshot.fullframe = false;

          instance.generateDeviceCameraSnapshot(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceApplianceDhcpSubnets', function() {
        it('should call getDeviceApplianceDhcpSubnets successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceApplianceDhcpSubnets call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceApplianceDhcpSubnets(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceAppliancePerformance', function() {
        it('should call getDeviceAppliancePerformance successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceAppliancePerformance call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceAppliancePerformance(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceCameraAnalyticsLive', function() {
        it('should call getDeviceCameraAnalyticsLive successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCameraAnalyticsLive call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceCameraAnalyticsLive(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceCameraAnalyticsOverview', function() {
        it('should call getDeviceCameraAnalyticsOverview successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCameraAnalyticsOverview call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.objectType = "objectType_example";

          instance.getDeviceCameraAnalyticsOverview(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceCameraAnalyticsRecent', function() {
        it('should call getDeviceCameraAnalyticsRecent successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCameraAnalyticsRecent call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.objectType = "objectType_example";

          instance.getDeviceCameraAnalyticsRecent(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceCameraAnalyticsZoneHistory', function() {
        it('should call getDeviceCameraAnalyticsZoneHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCameraAnalyticsZoneHistory call and complete the assertions
          /*
          var serial = "serial_example";
          var zoneId = "zoneId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.resolution = 56;
          opts.objectType = "objectType_example";

          instance.getDeviceCameraAnalyticsZoneHistory(serial, zoneId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceCameraAnalyticsZones', function() {
        it('should call getDeviceCameraAnalyticsZones successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCameraAnalyticsZones call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceCameraAnalyticsZones(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceClients', function() {
        it('should call getDeviceClients successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceClients call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;

          instance.getDeviceClients(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceLldpCdp', function() {
        it('should call getDeviceLldpCdp successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceLldpCdp call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceLldpCdp(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceLossAndLatencyHistory', function() {
        it('should call getDeviceLossAndLatencyHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceLossAndLatencyHistory call and complete the assertions
          /*
          var serial = "serial_example";
          var ip = "ip_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.resolution = 56;
          opts.uplink = "uplink_example";

          instance.getDeviceLossAndLatencyHistory(serial, ip, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchPortsStatuses', function() {
        it('should call getDeviceSwitchPortsStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchPortsStatuses call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;

          instance.getDeviceSwitchPortsStatuses(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchPortsStatusesPackets', function() {
        it('should call getDeviceSwitchPortsStatusesPackets successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchPortsStatusesPackets call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;

          instance.getDeviceSwitchPortsStatusesPackets(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceWirelessConnectionStats', function() {
        it('should call getDeviceWirelessConnectionStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceWirelessConnectionStats call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.band = "band_example";
          opts.ssid = 56;
          opts.vlan = 56;
          opts.apTag = "apTag_example";

          instance.getDeviceWirelessConnectionStats(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceWirelessLatencyStats', function() {
        it('should call getDeviceWirelessLatencyStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceWirelessLatencyStats call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.band = "band_example";
          opts.ssid = 56;
          opts.vlan = 56;
          opts.apTag = "apTag_example";
          opts.fields = "fields_example";

          instance.getDeviceWirelessLatencyStats(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceWirelessStatus', function() {
        it('should call getDeviceWirelessStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceWirelessStatus call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceWirelessStatus(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceClientSecurityEvents', function() {
        it('should call getNetworkApplianceClientSecurityEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceClientSecurityEvents call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.sortOrder = "sortOrder_example";

          instance.getNetworkApplianceClientSecurityEvents(networkId, clientId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceSecurityEvents', function() {
        it('should call getNetworkApplianceSecurityEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceSecurityEvents call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.sortOrder = "sortOrder_example";

          instance.getNetworkApplianceSecurityEvents(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkBluetoothClient', function() {
        it('should call getNetworkBluetoothClient successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkBluetoothClient call and complete the assertions
          /*
          var networkId = "networkId_example";
          var bluetoothClientId = "bluetoothClientId_example";
          var opts = {};
          opts.includeConnectivityHistory = true;
          opts.connectivityHistoryTimespan = 56;

          instance.getNetworkBluetoothClient(networkId, bluetoothClientId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkBluetoothClients', function() {
        it('should call getNetworkBluetoothClients successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkBluetoothClients call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.includeConnectivityHistory = true;

          instance.getNetworkBluetoothClients(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkClient', function() {
        it('should call getNetworkClient successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkClient call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";

          instance.getNetworkClient(networkId, clientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkClientTrafficHistory', function() {
        it('should call getNetworkClientTrafficHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkClientTrafficHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkClientTrafficHistory(networkId, clientId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkClientUsageHistory', function() {
        it('should call getNetworkClientUsageHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkClientUsageHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";

          instance.getNetworkClientUsageHistory(networkId, clientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkClients', function() {
        it('should call getNetworkClients successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkClients call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkClients(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkEvents', function() {
        it('should call getNetworkEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkEvents call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.productType = "productType_example";
          opts.includedEventTypes = ["includedEventTypes_example"];
          opts.excludedEventTypes = ["excludedEventTypes_example"];
          opts.deviceMac = "deviceMac_example";
          opts.deviceSerial = "deviceSerial_example";
          opts.deviceName = "deviceName_example";
          opts.clientIp = "clientIp_example";
          opts.clientMac = "clientMac_example";
          opts.clientName = "clientName_example";
          opts.smDeviceMac = "smDeviceMac_example";
          opts.smDeviceName = "smDeviceName_example";
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkEvents(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkEventsEventTypes', function() {
        it('should call getNetworkEventsEventTypes successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkEventsEventTypes call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkEventsEventTypes(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceCellularUsageHistory', function() {
        it('should call getNetworkSmDeviceCellularUsageHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceCellularUsageHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceCellularUsageHistory(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceConnectivity', function() {
        it('should call getNetworkSmDeviceConnectivity successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceConnectivity call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkSmDeviceConnectivity(networkId, deviceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceDesktopLogs', function() {
        it('should call getNetworkSmDeviceDesktopLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceDesktopLogs call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkSmDeviceDesktopLogs(networkId, deviceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceDeviceCommandLogs', function() {
        it('should call getNetworkSmDeviceDeviceCommandLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceDeviceCommandLogs call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkSmDeviceDeviceCommandLogs(networkId, deviceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDevicePerformanceHistory', function() {
        it('should call getNetworkSmDevicePerformanceHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDevicePerformanceHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkSmDevicePerformanceHistory(networkId, deviceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSplashLoginAttempts', function() {
        it('should call getNetworkSplashLoginAttempts successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSplashLoginAttempts call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.ssidNumber = 56;
          opts.loginIdentifier = "loginIdentifier_example";
          opts.timespan = 56;

          instance.getNetworkSplashLoginAttempts(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkTraffic', function() {
        it('should call getNetworkTraffic successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkTraffic call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;
          opts.deviceType = "deviceType_example";

          instance.getNetworkTraffic(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessAirMarshal', function() {
        it('should call getNetworkWirelessAirMarshal successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessAirMarshal call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;

          instance.getNetworkWirelessAirMarshal(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessChannelUtilizationHistory', function() {
        it('should call getNetworkWirelessChannelUtilizationHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessChannelUtilizationHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.resolution = 56;
          opts.autoResolution = true;
          opts.clientId = "clientId_example";
          opts.deviceSerial = "deviceSerial_example";
          opts.apTag = "apTag_example";
          opts.band = "band_example";

          instance.getNetworkWirelessChannelUtilizationHistory(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessClientConnectionStats', function() {
        it('should call getNetworkWirelessClientConnectionStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessClientConnectionStats call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.band = "band_example";
          opts.ssid = 56;
          opts.vlan = 56;
          opts.apTag = "apTag_example";

          instance.getNetworkWirelessClientConnectionStats(networkId, clientId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessClientConnectivityEvents', function() {
        it('should call getNetworkWirelessClientConnectivityEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessClientConnectivityEvents call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.types = ["types_example"];
          opts.includedSeverities = ["includedSeverities_example"];
          opts.band = "band_example";
          opts.ssidNumber = 56;
          opts.deviceSerial = "deviceSerial_example";

          instance.getNetworkWirelessClientConnectivityEvents(networkId, clientId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessClientCountHistory', function() {
        it('should call getNetworkWirelessClientCountHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessClientCountHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.resolution = 56;
          opts.autoResolution = true;
          opts.clientId = "clientId_example";
          opts.deviceSerial = "deviceSerial_example";
          opts.apTag = "apTag_example";
          opts.band = "band_example";
          opts.ssid = 56;

          instance.getNetworkWirelessClientCountHistory(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessClientLatencyHistory', function() {
        it('should call getNetworkWirelessClientLatencyHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessClientLatencyHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.resolution = 56;

          instance.getNetworkWirelessClientLatencyHistory(networkId, clientId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessClientLatencyStats', function() {
        it('should call getNetworkWirelessClientLatencyStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessClientLatencyStats call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.band = "band_example";
          opts.ssid = 56;
          opts.vlan = 56;
          opts.apTag = "apTag_example";
          opts.fields = "fields_example";

          instance.getNetworkWirelessClientLatencyStats(networkId, clientId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessClientsConnectionStats', function() {
        it('should call getNetworkWirelessClientsConnectionStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessClientsConnectionStats call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.band = "band_example";
          opts.ssid = 56;
          opts.vlan = 56;
          opts.apTag = "apTag_example";

          instance.getNetworkWirelessClientsConnectionStats(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessClientsLatencyStats', function() {
        it('should call getNetworkWirelessClientsLatencyStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessClientsLatencyStats call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.band = "band_example";
          opts.ssid = 56;
          opts.vlan = 56;
          opts.apTag = "apTag_example";
          opts.fields = "fields_example";

          instance.getNetworkWirelessClientsLatencyStats(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessConnectionStats', function() {
        it('should call getNetworkWirelessConnectionStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessConnectionStats call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.band = "band_example";
          opts.ssid = 56;
          opts.vlan = 56;
          opts.apTag = "apTag_example";

          instance.getNetworkWirelessConnectionStats(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessDataRateHistory', function() {
        it('should call getNetworkWirelessDataRateHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessDataRateHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.resolution = 56;
          opts.autoResolution = true;
          opts.clientId = "clientId_example";
          opts.deviceSerial = "deviceSerial_example";
          opts.apTag = "apTag_example";
          opts.band = "band_example";
          opts.ssid = 56;

          instance.getNetworkWirelessDataRateHistory(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessDevicesConnectionStats', function() {
        it('should call getNetworkWirelessDevicesConnectionStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessDevicesConnectionStats call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.band = "band_example";
          opts.ssid = 56;
          opts.vlan = 56;
          opts.apTag = "apTag_example";

          instance.getNetworkWirelessDevicesConnectionStats(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessDevicesLatencyStats', function() {
        it('should call getNetworkWirelessDevicesLatencyStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessDevicesLatencyStats call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.band = "band_example";
          opts.ssid = 56;
          opts.vlan = 56;
          opts.apTag = "apTag_example";
          opts.fields = "fields_example";

          instance.getNetworkWirelessDevicesLatencyStats(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessFailedConnections', function() {
        it('should call getNetworkWirelessFailedConnections successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessFailedConnections call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.band = "band_example";
          opts.ssid = 56;
          opts.vlan = 56;
          opts.apTag = "apTag_example";
          opts.serial = "serial_example";
          opts.clientId = "clientId_example";

          instance.getNetworkWirelessFailedConnections(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessLatencyHistory', function() {
        it('should call getNetworkWirelessLatencyHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessLatencyHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.resolution = 56;
          opts.autoResolution = true;
          opts.clientId = "clientId_example";
          opts.deviceSerial = "deviceSerial_example";
          opts.apTag = "apTag_example";
          opts.band = "band_example";
          opts.ssid = 56;
          opts.accessCategory = "accessCategory_example";

          instance.getNetworkWirelessLatencyHistory(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessLatencyStats', function() {
        it('should call getNetworkWirelessLatencyStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessLatencyStats call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.band = "band_example";
          opts.ssid = 56;
          opts.vlan = 56;
          opts.apTag = "apTag_example";
          opts.fields = "fields_example";

          instance.getNetworkWirelessLatencyStats(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessMeshStatuses', function() {
        it('should call getNetworkWirelessMeshStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessMeshStatuses call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkWirelessMeshStatuses(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSignalQualityHistory', function() {
        it('should call getNetworkWirelessSignalQualityHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSignalQualityHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.resolution = 56;
          opts.autoResolution = true;
          opts.clientId = "clientId_example";
          opts.deviceSerial = "deviceSerial_example";
          opts.apTag = "apTag_example";
          opts.band = "band_example";
          opts.ssid = 56;

          instance.getNetworkWirelessSignalQualityHistory(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessUsageHistory', function() {
        it('should call getNetworkWirelessUsageHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessUsageHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.resolution = 56;
          opts.autoResolution = true;
          opts.clientId = "clientId_example";
          opts.deviceSerial = "deviceSerial_example";
          opts.apTag = "apTag_example";
          opts.band = "band_example";
          opts.ssid = 56;

          instance.getNetworkWirelessUsageHistory(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApiRequests', function() {
        it('should call getOrganizationApiRequests successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApiRequests call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.adminId = "adminId_example";
          opts.path = "path_example";
          opts.method = "method_example";
          opts.responseCode = 56;
          opts.sourceIp = "sourceIp_example";

          instance.getOrganizationApiRequests(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApiRequestsOverview', function() {
        it('should call getOrganizationApiRequestsOverview successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApiRequestsOverview call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;

          instance.getOrganizationApiRequestsOverview(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceSecurityEvents', function() {
        it('should call getOrganizationApplianceSecurityEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceSecurityEvents call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.sortOrder = "sortOrder_example";

          instance.getOrganizationApplianceSecurityEvents(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceUplinkStatuses', function() {
        it('should call getOrganizationApplianceUplinkStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceUplinkStatuses call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getOrganizationApplianceUplinkStatuses(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceVpnStats', function() {
        it('should call getOrganizationApplianceVpnStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceVpnStats call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.networkIds = ["networkIds_example"];
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;

          instance.getOrganizationApplianceVpnStats(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceVpnStatuses', function() {
        it('should call getOrganizationApplianceVpnStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceVpnStatuses call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.networkIds = ["networkIds_example"];

          instance.getOrganizationApplianceVpnStatuses(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigurationChanges', function() {
        it('should call getOrganizationConfigurationChanges successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigurationChanges call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.networkId = "networkId_example";
          opts.adminId = "adminId_example";

          instance.getOrganizationConfigurationChanges(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationDevicesStatuses', function() {
        it('should call getOrganizationDevicesStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationDevicesStatuses call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getOrganizationDevicesStatuses(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationDevicesUplinksLossAndLatency', function() {
        it('should call getOrganizationDevicesUplinksLossAndLatency successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationDevicesUplinksLossAndLatency call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.uplink = "uplink_example";
          opts.ip = "ip_example";

          instance.getOrganizationDevicesUplinksLossAndLatency(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationLicensesOverview', function() {
        it('should call getOrganizationLicensesOverview successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationLicensesOverview call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationLicensesOverview(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationOpenapiSpec', function() {
        it('should call getOrganizationOpenapiSpec successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationOpenapiSpec call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationOpenapiSpec(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationWebhooksLogs', function() {
        it('should call getOrganizationWebhooksLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationWebhooksLogs call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.url = "url_example";

          instance.getOrganizationWebhooksLogs(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
