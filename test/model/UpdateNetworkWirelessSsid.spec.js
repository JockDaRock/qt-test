/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UpdateNetworkWirelessSsid', function() {
      beforeEach(function() {
        instance = new MerakiDashboardApi.UpdateNetworkWirelessSsid();
      });

      it('should create an instance of UpdateNetworkWirelessSsid', function() {
        // TODO: update the code to test UpdateNetworkWirelessSsid
        expect(instance).to.be.a(MerakiDashboardApi.UpdateNetworkWirelessSsid);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property enabled (base name: "enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

      it('should have the property authMode (base name: "authMode")', function() {
        // TODO: update the code to test the property authMode
        expect(instance).to.have.property('authMode');
        // expect(instance.authMode).to.be(expectedValueLiteral);
      });

      it('should have the property enterpriseAdminAccess (base name: "enterpriseAdminAccess")', function() {
        // TODO: update the code to test the property enterpriseAdminAccess
        expect(instance).to.have.property('enterpriseAdminAccess');
        // expect(instance.enterpriseAdminAccess).to.be(expectedValueLiteral);
      });

      it('should have the property encryptionMode (base name: "encryptionMode")', function() {
        // TODO: update the code to test the property encryptionMode
        expect(instance).to.have.property('encryptionMode');
        // expect(instance.encryptionMode).to.be(expectedValueLiteral);
      });

      it('should have the property psk (base name: "psk")', function() {
        // TODO: update the code to test the property psk
        expect(instance).to.have.property('psk');
        // expect(instance.psk).to.be(expectedValueLiteral);
      });

      it('should have the property wpaEncryptionMode (base name: "wpaEncryptionMode")', function() {
        // TODO: update the code to test the property wpaEncryptionMode
        expect(instance).to.have.property('wpaEncryptionMode');
        // expect(instance.wpaEncryptionMode).to.be(expectedValueLiteral);
      });

      it('should have the property splashPage (base name: "splashPage")', function() {
        // TODO: update the code to test the property splashPage
        expect(instance).to.have.property('splashPage');
        // expect(instance.splashPage).to.be(expectedValueLiteral);
      });

      it('should have the property radiusServers (base name: "radiusServers")', function() {
        // TODO: update the code to test the property radiusServers
        expect(instance).to.have.property('radiusServers');
        // expect(instance.radiusServers).to.be(expectedValueLiteral);
      });

      it('should have the property radiusProxyEnabled (base name: "radiusProxyEnabled")', function() {
        // TODO: update the code to test the property radiusProxyEnabled
        expect(instance).to.have.property('radiusProxyEnabled');
        // expect(instance.radiusProxyEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property radiusCoaEnabled (base name: "radiusCoaEnabled")', function() {
        // TODO: update the code to test the property radiusCoaEnabled
        expect(instance).to.have.property('radiusCoaEnabled');
        // expect(instance.radiusCoaEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property radiusFailoverPolicy (base name: "radiusFailoverPolicy")', function() {
        // TODO: update the code to test the property radiusFailoverPolicy
        expect(instance).to.have.property('radiusFailoverPolicy');
        // expect(instance.radiusFailoverPolicy).to.be(expectedValueLiteral);
      });

      it('should have the property radiusLoadBalancingPolicy (base name: "radiusLoadBalancingPolicy")', function() {
        // TODO: update the code to test the property radiusLoadBalancingPolicy
        expect(instance).to.have.property('radiusLoadBalancingPolicy');
        // expect(instance.radiusLoadBalancingPolicy).to.be(expectedValueLiteral);
      });

      it('should have the property radiusAccountingEnabled (base name: "radiusAccountingEnabled")', function() {
        // TODO: update the code to test the property radiusAccountingEnabled
        expect(instance).to.have.property('radiusAccountingEnabled');
        // expect(instance.radiusAccountingEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property radiusAccountingServers (base name: "radiusAccountingServers")', function() {
        // TODO: update the code to test the property radiusAccountingServers
        expect(instance).to.have.property('radiusAccountingServers');
        // expect(instance.radiusAccountingServers).to.be(expectedValueLiteral);
      });

      it('should have the property radiusAttributeForGroupPolicies (base name: "radiusAttributeForGroupPolicies")', function() {
        // TODO: update the code to test the property radiusAttributeForGroupPolicies
        expect(instance).to.have.property('radiusAttributeForGroupPolicies');
        // expect(instance.radiusAttributeForGroupPolicies).to.be(expectedValueLiteral);
      });

      it('should have the property ipAssignmentMode (base name: "ipAssignmentMode")', function() {
        // TODO: update the code to test the property ipAssignmentMode
        expect(instance).to.have.property('ipAssignmentMode');
        // expect(instance.ipAssignmentMode).to.be(expectedValueLiteral);
      });

      it('should have the property useVlanTagging (base name: "useVlanTagging")', function() {
        // TODO: update the code to test the property useVlanTagging
        expect(instance).to.have.property('useVlanTagging');
        // expect(instance.useVlanTagging).to.be(expectedValueLiteral);
      });

      it('should have the property concentratorNetworkId (base name: "concentratorNetworkId")', function() {
        // TODO: update the code to test the property concentratorNetworkId
        expect(instance).to.have.property('concentratorNetworkId');
        // expect(instance.concentratorNetworkId).to.be(expectedValueLiteral);
      });

      it('should have the property vlanId (base name: "vlanId")', function() {
        // TODO: update the code to test the property vlanId
        expect(instance).to.have.property('vlanId');
        // expect(instance.vlanId).to.be(expectedValueLiteral);
      });

      it('should have the property defaultVlanId (base name: "defaultVlanId")', function() {
        // TODO: update the code to test the property defaultVlanId
        expect(instance).to.have.property('defaultVlanId');
        // expect(instance.defaultVlanId).to.be(expectedValueLiteral);
      });

      it('should have the property apTagsAndVlanIds (base name: "apTagsAndVlanIds")', function() {
        // TODO: update the code to test the property apTagsAndVlanIds
        expect(instance).to.have.property('apTagsAndVlanIds');
        // expect(instance.apTagsAndVlanIds).to.be(expectedValueLiteral);
      });

      it('should have the property walledGardenEnabled (base name: "walledGardenEnabled")', function() {
        // TODO: update the code to test the property walledGardenEnabled
        expect(instance).to.have.property('walledGardenEnabled');
        // expect(instance.walledGardenEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property walledGardenRanges (base name: "walledGardenRanges")', function() {
        // TODO: update the code to test the property walledGardenRanges
        expect(instance).to.have.property('walledGardenRanges');
        // expect(instance.walledGardenRanges).to.be(expectedValueLiteral);
      });

      it('should have the property radiusOverride (base name: "radiusOverride")', function() {
        // TODO: update the code to test the property radiusOverride
        expect(instance).to.have.property('radiusOverride');
        // expect(instance.radiusOverride).to.be(expectedValueLiteral);
      });

      it('should have the property radiusGuestVlanEnabled (base name: "radiusGuestVlanEnabled")', function() {
        // TODO: update the code to test the property radiusGuestVlanEnabled
        expect(instance).to.have.property('radiusGuestVlanEnabled');
        // expect(instance.radiusGuestVlanEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property radiusGuestVlanId (base name: "radiusGuestVlanId")', function() {
        // TODO: update the code to test the property radiusGuestVlanId
        expect(instance).to.have.property('radiusGuestVlanId');
        // expect(instance.radiusGuestVlanId).to.be(expectedValueLiteral);
      });

      it('should have the property minBitrate (base name: "minBitrate")', function() {
        // TODO: update the code to test the property minBitrate
        expect(instance).to.have.property('minBitrate');
        // expect(instance.minBitrate).to.be(expectedValueLiteral);
      });

      it('should have the property bandSelection (base name: "bandSelection")', function() {
        // TODO: update the code to test the property bandSelection
        expect(instance).to.have.property('bandSelection');
        // expect(instance.bandSelection).to.be(expectedValueLiteral);
      });

      it('should have the property perClientBandwidthLimitUp (base name: "perClientBandwidthLimitUp")', function() {
        // TODO: update the code to test the property perClientBandwidthLimitUp
        expect(instance).to.have.property('perClientBandwidthLimitUp');
        // expect(instance.perClientBandwidthLimitUp).to.be(expectedValueLiteral);
      });

      it('should have the property perClientBandwidthLimitDown (base name: "perClientBandwidthLimitDown")', function() {
        // TODO: update the code to test the property perClientBandwidthLimitDown
        expect(instance).to.have.property('perClientBandwidthLimitDown');
        // expect(instance.perClientBandwidthLimitDown).to.be(expectedValueLiteral);
      });

      it('should have the property perSsidBandwidthLimitUp (base name: "perSsidBandwidthLimitUp")', function() {
        // TODO: update the code to test the property perSsidBandwidthLimitUp
        expect(instance).to.have.property('perSsidBandwidthLimitUp');
        // expect(instance.perSsidBandwidthLimitUp).to.be(expectedValueLiteral);
      });

      it('should have the property perSsidBandwidthLimitDown (base name: "perSsidBandwidthLimitDown")', function() {
        // TODO: update the code to test the property perSsidBandwidthLimitDown
        expect(instance).to.have.property('perSsidBandwidthLimitDown');
        // expect(instance.perSsidBandwidthLimitDown).to.be(expectedValueLiteral);
      });

      it('should have the property lanIsolationEnabled (base name: "lanIsolationEnabled")', function() {
        // TODO: update the code to test the property lanIsolationEnabled
        expect(instance).to.have.property('lanIsolationEnabled');
        // expect(instance.lanIsolationEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property visible (base name: "visible")', function() {
        // TODO: update the code to test the property visible
        expect(instance).to.have.property('visible');
        // expect(instance.visible).to.be(expectedValueLiteral);
      });

      it('should have the property availableOnAllAps (base name: "availableOnAllAps")', function() {
        // TODO: update the code to test the property availableOnAllAps
        expect(instance).to.have.property('availableOnAllAps');
        // expect(instance.availableOnAllAps).to.be(expectedValueLiteral);
      });

      it('should have the property availabilityTags (base name: "availabilityTags")', function() {
        // TODO: update the code to test the property availabilityTags
        expect(instance).to.have.property('availabilityTags');
        // expect(instance.availabilityTags).to.be(expectedValueLiteral);
      });

      it('should have the property mandatoryDhcpEnabled (base name: "mandatoryDhcpEnabled")', function() {
        // TODO: update the code to test the property mandatoryDhcpEnabled
        expect(instance).to.have.property('mandatoryDhcpEnabled');
        // expect(instance.mandatoryDhcpEnabled).to.be(expectedValueLiteral);
      });

    });
  });

}));
