/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.SsidsApi();
  });

  describe('(package)', function() {
    describe('SsidsApi', function() {
      describe('createNetworkWirelessSsidIdentityPsk', function() {
        it('should call createNetworkWirelessSsidIdentityPsk successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkWirelessSsidIdentityPsk call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var createNetworkWirelessSsidIdentityPsk = new MerakiDashboardApi.CreateNetworkWirelessSsidIdentityPsk();
          createNetworkWirelessSsidIdentityPsk.name = "";
          createNetworkWirelessSsidIdentityPsk.passphrase = "";
          createNetworkWirelessSsidIdentityPsk.groupPolicyId = "";

          instance.createNetworkWirelessSsidIdentityPsk(networkId, _number, createNetworkWirelessSsidIdentityPsk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkWirelessSsidIdentityPsk', function() {
        it('should call deleteNetworkWirelessSsidIdentityPsk successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkWirelessSsidIdentityPsk call
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var identityPskId = "identityPskId_example";

          instance.deleteNetworkWirelessSsidIdentityPsk(networkId, _number, identityPskId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsid', function() {
        it('should call getNetworkWirelessSsid successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsid call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsid(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidFirewallL3FirewallRules', function() {
        it('should call getNetworkWirelessSsidFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidFirewallL3FirewallRules(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidFirewallL7FirewallRules', function() {
        it('should call getNetworkWirelessSsidFirewallL7FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidFirewallL7FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidFirewallL7FirewallRules(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidIdentityPsk', function() {
        it('should call getNetworkWirelessSsidIdentityPsk successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidIdentityPsk call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var identityPskId = "identityPskId_example";

          instance.getNetworkWirelessSsidIdentityPsk(networkId, _number, identityPskId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidIdentityPsks', function() {
        it('should call getNetworkWirelessSsidIdentityPsks successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidIdentityPsks call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidIdentityPsks(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidSplashSettings', function() {
        it('should call getNetworkWirelessSsidSplashSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidSplashSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidSplashSettings(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidTrafficShapingRules', function() {
        it('should call getNetworkWirelessSsidTrafficShapingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidTrafficShapingRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidTrafficShapingRules(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsids', function() {
        it('should call getNetworkWirelessSsids successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsids call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkWirelessSsids(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsid', function() {
        it('should call updateNetworkWirelessSsid successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsid call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var opts = {};
          opts.updateNetworkWirelessSsid = new MerakiDashboardApi.UpdateNetworkWirelessSsid();
          opts.updateNetworkWirelessSsid.name = "";
          opts.updateNetworkWirelessSsid.enabled = false;
          opts.updateNetworkWirelessSsid.authMode = "open";
          opts.updateNetworkWirelessSsid.enterpriseAdminAccess = "access disabled";
          opts.updateNetworkWirelessSsid.encryptionMode = "wep";
          opts.updateNetworkWirelessSsid.psk = "";
          opts.updateNetworkWirelessSsid.wpaEncryptionMode = "WPA1 only";
          opts.updateNetworkWirelessSsid.splashPage = "None";
          opts.updateNetworkWirelessSsid.radiusServers = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumberRadiusServers()];
          opts.updateNetworkWirelessSsid.radiusServers[0].host = "";
          opts.updateNetworkWirelessSsid.radiusServers[0].port = 0;
          opts.updateNetworkWirelessSsid.radiusServers[0].secret = "";
          opts.updateNetworkWirelessSsid.radiusProxyEnabled = false;
          opts.updateNetworkWirelessSsid.radiusCoaEnabled = false;
          opts.updateNetworkWirelessSsid.radiusFailoverPolicy = "Deny access";
          opts.updateNetworkWirelessSsid.radiusLoadBalancingPolicy = "Strict priority order";
          opts.updateNetworkWirelessSsid.radiusAccountingEnabled = false;
          opts.updateNetworkWirelessSsid.radiusAccountingServers = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumberRadiusAccountingServers()];
          opts.updateNetworkWirelessSsid.radiusAccountingServers[0].host = "";
          opts.updateNetworkWirelessSsid.radiusAccountingServers[0].port = 0;
          opts.updateNetworkWirelessSsid.radiusAccountingServers[0].secret = "";
          opts.updateNetworkWirelessSsid.radiusAttributeForGroupPolicies = "Filter-Id";
          opts.updateNetworkWirelessSsid.ipAssignmentMode = "";
          opts.updateNetworkWirelessSsid.useVlanTagging = false;
          opts.updateNetworkWirelessSsid.concentratorNetworkId = "";
          opts.updateNetworkWirelessSsid.vlanId = 0;
          opts.updateNetworkWirelessSsid.defaultVlanId = 0;
          opts.updateNetworkWirelessSsid.apTagsAndVlanIds = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumberApTagsAndVlanIds()];
          opts.updateNetworkWirelessSsid.apTagsAndVlanIds[0].tags = [""];
          opts.updateNetworkWirelessSsid.apTagsAndVlanIds[0].vlanId = 0;
          opts.updateNetworkWirelessSsid.walledGardenEnabled = false;
          opts.updateNetworkWirelessSsid.walledGardenRanges = [""];
          opts.updateNetworkWirelessSsid.radiusOverride = false;
          opts.updateNetworkWirelessSsid.radiusGuestVlanEnabled = false;
          opts.updateNetworkWirelessSsid.radiusGuestVlanId = 0;
          opts.updateNetworkWirelessSsid.minBitrate = 0.0;
          opts.updateNetworkWirelessSsid.bandSelection = "";
          opts.updateNetworkWirelessSsid.perClientBandwidthLimitUp = 0;
          opts.updateNetworkWirelessSsid.perClientBandwidthLimitDown = 0;
          opts.updateNetworkWirelessSsid.perSsidBandwidthLimitUp = 0;
          opts.updateNetworkWirelessSsid.perSsidBandwidthLimitDown = 0;
          opts.updateNetworkWirelessSsid.lanIsolationEnabled = false;
          opts.updateNetworkWirelessSsid.visible = false;
          opts.updateNetworkWirelessSsid.availableOnAllAps = false;
          opts.updateNetworkWirelessSsid.availabilityTags = [""];
          opts.updateNetworkWirelessSsid.mandatoryDhcpEnabled = false;

          instance.updateNetworkWirelessSsid(networkId, _number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidFirewallL3FirewallRules', function() {
        it('should call updateNetworkWirelessSsidFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var opts = {};
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules = new MerakiDashboardApi.UpdateNetworkWirelessSsidFirewallL3FirewallRules();
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumberfirewalll3FirewallRulesRules()];
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].comment = "";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].policy = "allow";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].protocol = "tcp";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].destPort = "";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].destCidr = "";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.allowLanAccess = false;

          instance.updateNetworkWirelessSsidFirewallL3FirewallRules(networkId, _number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidFirewallL7FirewallRules', function() {
        it('should call updateNetworkWirelessSsidFirewallL7FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidFirewallL7FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var opts = {};
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules = new MerakiDashboardApi.UpdateNetworkWirelessSsidFirewallL7FirewallRules();
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumberfirewalll7FirewallRulesRules()];
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules.rules[0].policy = "deny";
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules.rules[0].type = "application";
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules.rules[0].value = "";

          instance.updateNetworkWirelessSsidFirewallL7FirewallRules(networkId, _number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidIdentityPsk', function() {
        it('should call updateNetworkWirelessSsidIdentityPsk successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidIdentityPsk call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var identityPskId = "identityPskId_example";
          var opts = {};
          opts.updateNetworkWirelessSsidIdentityPsk = new MerakiDashboardApi.UpdateNetworkWirelessSsidIdentityPsk();
          opts.updateNetworkWirelessSsidIdentityPsk.name = "";
          opts.updateNetworkWirelessSsidIdentityPsk.passphrase = "";
          opts.updateNetworkWirelessSsidIdentityPsk.groupPolicyId = "";

          instance.updateNetworkWirelessSsidIdentityPsk(networkId, _number, identityPskId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidSplashSettings', function() {
        it('should call updateNetworkWirelessSsidSplashSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidSplashSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var opts = {};
          opts.updateNetworkWirelessSsidSplashSettings = new MerakiDashboardApi.UpdateNetworkWirelessSsidSplashSettings();
          opts.updateNetworkWirelessSsidSplashSettings.splashUrl = "";
          opts.updateNetworkWirelessSsidSplashSettings.useSplashUrl = false;

          instance.updateNetworkWirelessSsidSplashSettings(networkId, _number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidTrafficShapingRules', function() {
        it('should call updateNetworkWirelessSsidTrafficShapingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidTrafficShapingRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var opts = {};
          opts.updateNetworkWirelessSsidTrafficShapingRules = new MerakiDashboardApi.UpdateNetworkWirelessSsidTrafficShapingRules();
          opts.updateNetworkWirelessSsidTrafficShapingRules.trafficShapingEnabled = false;
          opts.updateNetworkWirelessSsidTrafficShapingRules.defaultRulesEnabled = false;
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumbertrafficShapingrulesRules()];
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].definitions = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesDefinitions()];
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].definitions[0].type = "application";
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].definitions[0].value = "";
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].perClientBandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimits();
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].perClientBandwidthLimits.settings = "";
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].perClientBandwidthLimits.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimitsBandwidthLimits();
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].perClientBandwidthLimits.bandwidthLimits.limitUp = 0;
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].perClientBandwidthLimits.bandwidthLimits.limitDown = 0;
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].dscpTagValue = 0;
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].pcpTagValue = 0;

          instance.updateNetworkWirelessSsidTrafficShapingRules(networkId, _number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
