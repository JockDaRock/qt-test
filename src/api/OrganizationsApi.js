/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AssignOrganizationLicensesSeats', 'model/ClaimIntoOrganization', 'model/CloneOrganization', 'model/CombineOrganizationNetworks', 'model/CreateOrganization', 'model/CreateOrganizationActionBatch', 'model/CreateOrganizationAdmin', 'model/CreateOrganizationBrandingPolicy', 'model/CreateOrganizationConfigTemplate', 'model/CreateOrganizationNetwork', 'model/CreateOrganizationSamlIdp', 'model/CreateOrganizationSamlRole', 'model/MoveOrganizationLicenses', 'model/MoveOrganizationLicensesSeats', 'model/RenewOrganizationLicensesSeats', 'model/UpdateOrganization', 'model/UpdateOrganizationActionBatch', 'model/UpdateOrganizationAdmin', 'model/UpdateOrganizationBrandingPoliciesPriorities', 'model/UpdateOrganizationBrandingPolicy', 'model/UpdateOrganizationConfigTemplate', 'model/UpdateOrganizationLicense', 'model/UpdateOrganizationSaml', 'model/UpdateOrganizationSamlIdp', 'model/UpdateOrganizationSamlRole', 'model/UpdateOrganizationSnmp'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AssignOrganizationLicensesSeats'), require('../model/ClaimIntoOrganization'), require('../model/CloneOrganization'), require('../model/CombineOrganizationNetworks'), require('../model/CreateOrganization'), require('../model/CreateOrganizationActionBatch'), require('../model/CreateOrganizationAdmin'), require('../model/CreateOrganizationBrandingPolicy'), require('../model/CreateOrganizationConfigTemplate'), require('../model/CreateOrganizationNetwork'), require('../model/CreateOrganizationSamlIdp'), require('../model/CreateOrganizationSamlRole'), require('../model/MoveOrganizationLicenses'), require('../model/MoveOrganizationLicensesSeats'), require('../model/RenewOrganizationLicensesSeats'), require('../model/UpdateOrganization'), require('../model/UpdateOrganizationActionBatch'), require('../model/UpdateOrganizationAdmin'), require('../model/UpdateOrganizationBrandingPoliciesPriorities'), require('../model/UpdateOrganizationBrandingPolicy'), require('../model/UpdateOrganizationConfigTemplate'), require('../model/UpdateOrganizationLicense'), require('../model/UpdateOrganizationSaml'), require('../model/UpdateOrganizationSamlIdp'), require('../model/UpdateOrganizationSamlRole'), require('../model/UpdateOrganizationSnmp'));
  } else {
    // Browser globals (root is window)
    if (!root.MerakiDashboardApi) {
      root.MerakiDashboardApi = {};
    }
    root.MerakiDashboardApi.OrganizationsApi = factory(root.MerakiDashboardApi.ApiClient, root.MerakiDashboardApi.AssignOrganizationLicensesSeats, root.MerakiDashboardApi.ClaimIntoOrganization, root.MerakiDashboardApi.CloneOrganization, root.MerakiDashboardApi.CombineOrganizationNetworks, root.MerakiDashboardApi.CreateOrganization, root.MerakiDashboardApi.CreateOrganizationActionBatch, root.MerakiDashboardApi.CreateOrganizationAdmin, root.MerakiDashboardApi.CreateOrganizationBrandingPolicy, root.MerakiDashboardApi.CreateOrganizationConfigTemplate, root.MerakiDashboardApi.CreateOrganizationNetwork, root.MerakiDashboardApi.CreateOrganizationSamlIdp, root.MerakiDashboardApi.CreateOrganizationSamlRole, root.MerakiDashboardApi.MoveOrganizationLicenses, root.MerakiDashboardApi.MoveOrganizationLicensesSeats, root.MerakiDashboardApi.RenewOrganizationLicensesSeats, root.MerakiDashboardApi.UpdateOrganization, root.MerakiDashboardApi.UpdateOrganizationActionBatch, root.MerakiDashboardApi.UpdateOrganizationAdmin, root.MerakiDashboardApi.UpdateOrganizationBrandingPoliciesPriorities, root.MerakiDashboardApi.UpdateOrganizationBrandingPolicy, root.MerakiDashboardApi.UpdateOrganizationConfigTemplate, root.MerakiDashboardApi.UpdateOrganizationLicense, root.MerakiDashboardApi.UpdateOrganizationSaml, root.MerakiDashboardApi.UpdateOrganizationSamlIdp, root.MerakiDashboardApi.UpdateOrganizationSamlRole, root.MerakiDashboardApi.UpdateOrganizationSnmp);
  }
}(this, function(ApiClient, AssignOrganizationLicensesSeats, ClaimIntoOrganization, CloneOrganization, CombineOrganizationNetworks, CreateOrganization, CreateOrganizationActionBatch, CreateOrganizationAdmin, CreateOrganizationBrandingPolicy, CreateOrganizationConfigTemplate, CreateOrganizationNetwork, CreateOrganizationSamlIdp, CreateOrganizationSamlRole, MoveOrganizationLicenses, MoveOrganizationLicensesSeats, RenewOrganizationLicensesSeats, UpdateOrganization, UpdateOrganizationActionBatch, UpdateOrganizationAdmin, UpdateOrganizationBrandingPoliciesPriorities, UpdateOrganizationBrandingPolicy, UpdateOrganizationConfigTemplate, UpdateOrganizationLicense, UpdateOrganizationSaml, UpdateOrganizationSamlIdp, UpdateOrganizationSamlRole, UpdateOrganizationSnmp) {
  'use strict';

  /**
   * Organizations service.
   * @module api/OrganizationsApi
   * @version 1.1.0
   */

  /**
   * Constructs a new OrganizationsApi. 
   * @alias module:api/OrganizationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the assignOrganizationLicensesSeats operation.
     * @callback module:api/OrganizationsApi~assignOrganizationLicensesSeatsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     * Assign SM seats to a network. This will increase the managed SM device limit of the network
     * @param {String} organizationId 
     * @param {module:model/AssignOrganizationLicensesSeats} assignOrganizationLicensesSeats 
     * @param {module:api/OrganizationsApi~assignOrganizationLicensesSeatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.assignOrganizationLicensesSeats = function(organizationId, assignOrganizationLicensesSeats, callback) {
      var postBody = assignOrganizationLicensesSeats;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling assignOrganizationLicensesSeats");
      }

      // verify the required parameter 'assignOrganizationLicensesSeats' is set
      if (assignOrganizationLicensesSeats === undefined || assignOrganizationLicensesSeats === null) {
        throw new Error("Missing the required parameter 'assignOrganizationLicensesSeats' when calling assignOrganizationLicensesSeats");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/assignSeats', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the claimIntoOrganization operation.
     * @callback module:api/OrganizationsApi~claimIntoOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory.
     * Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ClaimIntoOrganization} opts.claimIntoOrganization 
     * @param {module:api/OrganizationsApi~claimIntoOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.claimIntoOrganization = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = opts['claimIntoOrganization'];

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling claimIntoOrganization");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/claim', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneOrganization operation.
     * @callback module:api/OrganizationsApi~cloneOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new organization by cloning the addressed organization
     * Create a new organization by cloning the addressed organization
     * @param {String} organizationId 
     * @param {module:model/CloneOrganization} cloneOrganization 
     * @param {module:api/OrganizationsApi~cloneOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.cloneOrganization = function(organizationId, cloneOrganization, callback) {
      var postBody = cloneOrganization;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling cloneOrganization");
      }

      // verify the required parameter 'cloneOrganization' is set
      if (cloneOrganization === undefined || cloneOrganization === null) {
        throw new Error("Missing the required parameter 'cloneOrganization' when calling cloneOrganization");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/clone', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the combineOrganizationNetworks operation.
     * @callback module:api/OrganizationsApi~combineOrganizationNetworksCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Combine multiple networks into a single network
     * Combine multiple networks into a single network
     * @param {String} organizationId 
     * @param {module:model/CombineOrganizationNetworks} combineOrganizationNetworks 
     * @param {module:api/OrganizationsApi~combineOrganizationNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.combineOrganizationNetworks = function(organizationId, combineOrganizationNetworks, callback) {
      var postBody = combineOrganizationNetworks;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling combineOrganizationNetworks");
      }

      // verify the required parameter 'combineOrganizationNetworks' is set
      if (combineOrganizationNetworks === undefined || combineOrganizationNetworks === null) {
        throw new Error("Missing the required parameter 'combineOrganizationNetworks' when calling combineOrganizationNetworks");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks/combine', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganization operation.
     * @callback module:api/OrganizationsApi~createOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new organization
     * Create a new organization
     * @param {module:model/CreateOrganization} createOrganization 
     * @param {module:api/OrganizationsApi~createOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createOrganization = function(createOrganization, callback) {
      var postBody = createOrganization;

      // verify the required parameter 'createOrganization' is set
      if (createOrganization === undefined || createOrganization === null) {
        throw new Error("Missing the required parameter 'createOrganization' when calling createOrganization");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationActionBatch operation.
     * @callback module:api/OrganizationsApi~createOrganizationActionBatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an action batch
     * Create an action batch
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationActionBatch} createOrganizationActionBatch 
     * @param {module:api/OrganizationsApi~createOrganizationActionBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createOrganizationActionBatch = function(organizationId, createOrganizationActionBatch, callback) {
      var postBody = createOrganizationActionBatch;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationActionBatch");
      }

      // verify the required parameter 'createOrganizationActionBatch' is set
      if (createOrganizationActionBatch === undefined || createOrganizationActionBatch === null) {
        throw new Error("Missing the required parameter 'createOrganizationActionBatch' when calling createOrganizationActionBatch");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationAdmin operation.
     * @callback module:api/OrganizationsApi~createOrganizationAdminCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new dashboard administrator
     * Create a new dashboard administrator
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationAdmin} createOrganizationAdmin 
     * @param {module:api/OrganizationsApi~createOrganizationAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createOrganizationAdmin = function(organizationId, createOrganizationAdmin, callback) {
      var postBody = createOrganizationAdmin;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationAdmin");
      }

      // verify the required parameter 'createOrganizationAdmin' is set
      if (createOrganizationAdmin === undefined || createOrganizationAdmin === null) {
        throw new Error("Missing the required parameter 'createOrganizationAdmin' when calling createOrganizationAdmin");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/admins', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationBrandingPolicy operation.
     * @callback module:api/OrganizationsApi~createOrganizationBrandingPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new branding policy to an organization
     * Add a new branding policy to an organization
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationBrandingPolicy} createOrganizationBrandingPolicy 
     * @param {module:api/OrganizationsApi~createOrganizationBrandingPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createOrganizationBrandingPolicy = function(organizationId, createOrganizationBrandingPolicy, callback) {
      var postBody = createOrganizationBrandingPolicy;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationBrandingPolicy");
      }

      // verify the required parameter 'createOrganizationBrandingPolicy' is set
      if (createOrganizationBrandingPolicy === undefined || createOrganizationBrandingPolicy === null) {
        throw new Error("Missing the required parameter 'createOrganizationBrandingPolicy' when calling createOrganizationBrandingPolicy");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationConfigTemplate operation.
     * @callback module:api/OrganizationsApi~createOrganizationConfigTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new configuration template
     * Create a new configuration template
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationConfigTemplate} createOrganizationConfigTemplate 
     * @param {module:api/OrganizationsApi~createOrganizationConfigTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createOrganizationConfigTemplate = function(organizationId, createOrganizationConfigTemplate, callback) {
      var postBody = createOrganizationConfigTemplate;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationConfigTemplate");
      }

      // verify the required parameter 'createOrganizationConfigTemplate' is set
      if (createOrganizationConfigTemplate === undefined || createOrganizationConfigTemplate === null) {
        throw new Error("Missing the required parameter 'createOrganizationConfigTemplate' when calling createOrganizationConfigTemplate");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationNetwork operation.
     * @callback module:api/OrganizationsApi~createOrganizationNetworkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a network
     * Create a network
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationNetwork} createOrganizationNetwork 
     * @param {module:api/OrganizationsApi~createOrganizationNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createOrganizationNetwork = function(organizationId, createOrganizationNetwork, callback) {
      var postBody = createOrganizationNetwork;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationNetwork");
      }

      // verify the required parameter 'createOrganizationNetwork' is set
      if (createOrganizationNetwork === undefined || createOrganizationNetwork === null) {
        throw new Error("Missing the required parameter 'createOrganizationNetwork' when calling createOrganizationNetwork");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationSamlIdp operation.
     * @callback module:api/OrganizationsApi~createOrganizationSamlIdpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a SAML IdP for your organization.
     * Create a SAML IdP for your organization.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationSamlIdp} createOrganizationSamlIdp 
     * @param {module:api/OrganizationsApi~createOrganizationSamlIdpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createOrganizationSamlIdp = function(organizationId, createOrganizationSamlIdp, callback) {
      var postBody = createOrganizationSamlIdp;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationSamlIdp");
      }

      // verify the required parameter 'createOrganizationSamlIdp' is set
      if (createOrganizationSamlIdp === undefined || createOrganizationSamlIdp === null) {
        throw new Error("Missing the required parameter 'createOrganizationSamlIdp' when calling createOrganizationSamlIdp");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrganizationSamlRole operation.
     * @callback module:api/OrganizationsApi~createOrganizationSamlRoleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a SAML role
     * Create a SAML role
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationSamlRole} createOrganizationSamlRole 
     * @param {module:api/OrganizationsApi~createOrganizationSamlRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createOrganizationSamlRole = function(organizationId, createOrganizationSamlRole, callback) {
      var postBody = createOrganizationSamlRole;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationSamlRole");
      }

      // verify the required parameter 'createOrganizationSamlRole' is set
      if (createOrganizationSamlRole === undefined || createOrganizationSamlRole === null) {
        throw new Error("Missing the required parameter 'createOrganizationSamlRole' when calling createOrganizationSamlRole");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganization operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an organization
     * Delete an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~deleteOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrganization = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganization");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/organizations/{organizationId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationActionBatch operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationActionBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an action batch
     * Delete an action batch
     * @param {String} organizationId 
     * @param {String} actionBatchId 
     * @param {module:api/OrganizationsApi~deleteOrganizationActionBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrganizationActionBatch = function(organizationId, actionBatchId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationActionBatch");
      }

      // verify the required parameter 'actionBatchId' is set
      if (actionBatchId === undefined || actionBatchId === null) {
        throw new Error("Missing the required parameter 'actionBatchId' when calling deleteOrganizationActionBatch");
      }


      var pathParams = {
        'organizationId': organizationId,
        'actionBatchId': actionBatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches/{actionBatchId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationAdmin operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationAdminCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke all access for a dashboard administrator within this organization
     * Revoke all access for a dashboard administrator within this organization
     * @param {String} organizationId 
     * @param {String} adminId 
     * @param {module:api/OrganizationsApi~deleteOrganizationAdminCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrganizationAdmin = function(organizationId, adminId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationAdmin");
      }

      // verify the required parameter 'adminId' is set
      if (adminId === undefined || adminId === null) {
        throw new Error("Missing the required parameter 'adminId' when calling deleteOrganizationAdmin");
      }


      var pathParams = {
        'organizationId': organizationId,
        'adminId': adminId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/admins/{adminId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationBrandingPolicy operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationBrandingPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a branding policy
     * Delete a branding policy
     * @param {String} organizationId 
     * @param {String} brandingPolicyId 
     * @param {module:api/OrganizationsApi~deleteOrganizationBrandingPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrganizationBrandingPolicy = function(organizationId, brandingPolicyId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationBrandingPolicy");
      }

      // verify the required parameter 'brandingPolicyId' is set
      if (brandingPolicyId === undefined || brandingPolicyId === null) {
        throw new Error("Missing the required parameter 'brandingPolicyId' when calling deleteOrganizationBrandingPolicy");
      }


      var pathParams = {
        'organizationId': organizationId,
        'brandingPolicyId': brandingPolicyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationConfigTemplate operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationConfigTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a configuration template
     * Remove a configuration template
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {module:api/OrganizationsApi~deleteOrganizationConfigTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrganizationConfigTemplate = function(organizationId, configTemplateId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationConfigTemplate");
      }

      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling deleteOrganizationConfigTemplate");
      }


      var pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationSamlIdp operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationSamlIdpCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a SAML IdP in your organization.
     * Remove a SAML IdP in your organization.
     * @param {String} organizationId 
     * @param {String} idpId 
     * @param {module:api/OrganizationsApi~deleteOrganizationSamlIdpCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrganizationSamlIdp = function(organizationId, idpId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationSamlIdp");
      }

      // verify the required parameter 'idpId' is set
      if (idpId === undefined || idpId === null) {
        throw new Error("Missing the required parameter 'idpId' when calling deleteOrganizationSamlIdp");
      }


      var pathParams = {
        'organizationId': organizationId,
        'idpId': idpId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps/{idpId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationSamlRole operation.
     * @callback module:api/OrganizationsApi~deleteOrganizationSamlRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a SAML role
     * Remove a SAML role
     * @param {String} organizationId 
     * @param {String} samlRoleId 
     * @param {module:api/OrganizationsApi~deleteOrganizationSamlRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrganizationSamlRole = function(organizationId, samlRoleId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationSamlRole");
      }

      // verify the required parameter 'samlRoleId' is set
      if (samlRoleId === undefined || samlRoleId === null) {
        throw new Error("Missing the required parameter 'samlRoleId' when calling deleteOrganizationSamlRole");
      }


      var pathParams = {
        'organizationId': organizationId,
        'samlRoleId': samlRoleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles/{samlRoleId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganization operation.
     * @callback module:api/OrganizationsApi~getOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an organization
     * Return an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganization = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganization");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationActionBatch operation.
     * @callback module:api/OrganizationsApi~getOrganizationActionBatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an action batch
     * Return an action batch
     * @param {String} organizationId 
     * @param {String} actionBatchId 
     * @param {module:api/OrganizationsApi~getOrganizationActionBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationActionBatch = function(organizationId, actionBatchId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationActionBatch");
      }

      // verify the required parameter 'actionBatchId' is set
      if (actionBatchId === undefined || actionBatchId === null) {
        throw new Error("Missing the required parameter 'actionBatchId' when calling getOrganizationActionBatch");
      }


      var pathParams = {
        'organizationId': organizationId,
        'actionBatchId': actionBatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches/{actionBatchId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationActionBatches operation.
     * @callback module:api/OrganizationsApi~getOrganizationActionBatchesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the list of action batches in the organization
     * Return the list of action batches in the organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.status Filter batches by status. Valid types are pending, completed, and failed.
     * @param {module:api/OrganizationsApi~getOrganizationActionBatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationActionBatches = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationActionBatches");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        'status': opts['status'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationAdmins operation.
     * @callback module:api/OrganizationsApi~getOrganizationAdminsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the dashboard administrators in this organization
     * List the dashboard administrators in this organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationAdminsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationAdmins = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationAdmins");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/admins', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApiRequests operation.
     * @callback module:api/OrganizationsApi~getOrganizationApiRequestsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the API requests made by an organization
     * List the API requests made by an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} opts.t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} opts.timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.
     * @param {Number} opts.perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
     * @param {String} opts.startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.adminId Filter the results by the ID of the admin who made the API requests
     * @param {String} opts.path Filter the results by the path of the API requests
     * @param {String} opts.method Filter the results by the method of the API requests (must be 'GET', 'PUT', 'POST' or 'DELETE')
     * @param {Number} opts.responseCode Filter the results by the response code of the API requests
     * @param {String} opts.sourceIp Filter the results by the IP address of the originating API request
     * @param {module:api/OrganizationsApi~getOrganizationApiRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationApiRequests = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApiRequests");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'adminId': opts['adminId'],
        'path': opts['path'],
        'method': opts['method'],
        'responseCode': opts['responseCode'],
        'sourceIp': opts['sourceIp'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/apiRequests', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationApiRequestsOverview operation.
     * @callback module:api/OrganizationsApi~getOrganizationApiRequestsOverviewCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an aggregated overview of API requests data
     * Return an aggregated overview of API requests data
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {String} opts.t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} opts.timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 31 days.
     * @param {module:api/OrganizationsApi~getOrganizationApiRequestsOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationApiRequestsOverview = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationApiRequestsOverview");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/apiRequests/overview', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationBrandingPolicies operation.
     * @callback module:api/OrganizationsApi~getOrganizationBrandingPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the branding policies of an organization
     * List the branding policies of an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationBrandingPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationBrandingPolicies = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPolicies");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationBrandingPoliciesPriorities operation.
     * @callback module:api/OrganizationsApi~getOrganizationBrandingPoliciesPrioritiesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationBrandingPoliciesPrioritiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationBrandingPoliciesPriorities = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPoliciesPriorities");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/priorities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationBrandingPolicy operation.
     * @callback module:api/OrganizationsApi~getOrganizationBrandingPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a branding policy
     * Return a branding policy
     * @param {String} organizationId 
     * @param {String} brandingPolicyId 
     * @param {module:api/OrganizationsApi~getOrganizationBrandingPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationBrandingPolicy = function(organizationId, brandingPolicyId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationBrandingPolicy");
      }

      // verify the required parameter 'brandingPolicyId' is set
      if (brandingPolicyId === undefined || brandingPolicyId === null) {
        throw new Error("Missing the required parameter 'brandingPolicyId' when calling getOrganizationBrandingPolicy");
      }


      var pathParams = {
        'organizationId': organizationId,
        'brandingPolicyId': brandingPolicyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplate operation.
     * @callback module:api/OrganizationsApi~getOrganizationConfigTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single configuration template
     * Return a single configuration template
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {module:api/OrganizationsApi~getOrganizationConfigTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationConfigTemplate = function(organizationId, configTemplateId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplate");
      }

      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplate");
      }


      var pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplates operation.
     * @callback module:api/OrganizationsApi~getOrganizationConfigTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the configuration templates for this organization
     * List the configuration templates for this organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationConfigTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationConfigTemplates = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplates");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigurationChanges operation.
     * @callback module:api/OrganizationsApi~getOrganizationConfigurationChangesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the Change Log for your organization
     * View the Change Log for your organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.t0 The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
     * @param {String} opts.t1 The end of the timespan for the data. t1 can be a maximum of 365 days after t0.
     * @param {Number} opts.timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 365 days. The default is 365 days.
     * @param {Number} opts.perPage The number of entries per page returned. Acceptable range is 3 - 5000. Default is 5000.
     * @param {String} opts.startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.networkId Filters on the given network
     * @param {String} opts.adminId Filters on the given Admin
     * @param {module:api/OrganizationsApi~getOrganizationConfigurationChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationConfigurationChanges = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigurationChanges");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'networkId': opts['networkId'],
        'adminId': opts['adminId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/configurationChanges', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevices operation.
     * @callback module:api/OrganizationsApi~getOrganizationDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the devices in an organization
     * List the devices in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} opts.startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.configurationUpdatedAfter Filter results by whether or not the device's configuration has been updated after the given timestamp
     * @param {module:api/OrganizationsApi~getOrganizationDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationDevices = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevices");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'configurationUpdatedAfter': opts['configurationUpdatedAfter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevicesStatuses operation.
     * @callback module:api/OrganizationsApi~getOrganizationDevicesStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the status of every Meraki device in the organization
     * List the status of every Meraki device in the organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} opts.startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/OrganizationsApi~getOrganizationDevicesStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationDevicesStatuses = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevicesStatuses");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices/statuses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationDevicesUplinksLossAndLatency operation.
     * @callback module:api/OrganizationsApi~getOrganizationDevicesUplinksLossAndLatencyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.t0 The beginning of the timespan for the data. The maximum lookback period is 365 days from today.
     * @param {String} opts.t1 The end of the timespan for the data. t1 can be a maximum of 5 minutes after t0. The latest possible time that t1 can be is 2 minutes into the past.
     * @param {Number} opts.timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 5 minutes. The default is 5 minutes.
     * @param {module:model/String} opts.uplink Optional filter for a specific WAN uplink. Valid uplinks are wan1, wan2, cellular. Default will return all uplinks.
     * @param {String} opts.ip Optional filter for a specific destination IP. Default will return all destination IPs.
     * @param {module:api/OrganizationsApi~getOrganizationDevicesUplinksLossAndLatencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationDevicesUplinksLossAndLatency = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationDevicesUplinksLossAndLatency");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'uplink': opts['uplink'],
        'ip': opts['ip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/devices/uplinksLossAndLatency', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryDevice operation.
     * @callback module:api/OrganizationsApi~getOrganizationInventoryDeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a single device from the inventory of an organization
     * Return a single device from the inventory of an organization
     * @param {String} organizationId 
     * @param {String} serial 
     * @param {module:api/OrganizationsApi~getOrganizationInventoryDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationInventoryDevice = function(organizationId, serial, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryDevice");
      }

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getOrganizationInventoryDevice");
      }


      var pathParams = {
        'organizationId': organizationId,
        'serial': serial
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventoryDevices/{serial}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInventoryDevices operation.
     * @callback module:api/OrganizationsApi~getOrganizationInventoryDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the device inventory for an organization
     * Return the device inventory for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} opts.startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:model/String} opts.usedState Filter results by used or unused inventory. Accepted values are \"used\" or \"unused\".
     * @param {String} opts.search Search for devices in inventory based on serial number, mac address, or model.
     * @param {module:api/OrganizationsApi~getOrganizationInventoryDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationInventoryDevices = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInventoryDevices");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'usedState': opts['usedState'],
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/inventoryDevices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationLicense operation.
     * @callback module:api/OrganizationsApi~getOrganizationLicenseCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display a license
     * Display a license
     * @param {String} organizationId 
     * @param {String} licenseId 
     * @param {module:api/OrganizationsApi~getOrganizationLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationLicense = function(organizationId, licenseId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationLicense");
      }

      // verify the required parameter 'licenseId' is set
      if (licenseId === undefined || licenseId === null) {
        throw new Error("Missing the required parameter 'licenseId' when calling getOrganizationLicense");
      }


      var pathParams = {
        'organizationId': organizationId,
        'licenseId': licenseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/{licenseId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationLicenses operation.
     * @callback module:api/OrganizationsApi~getOrganizationLicensesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the licenses for an organization
     * List the licenses for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
     * @param {String} opts.startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.deviceSerial Filter the licenses to those assigned to a particular device
     * @param {String} opts.networkId Filter the licenses to those assigned in a particular network
     * @param {module:model/String} opts.state Filter the licenses to those in a particular state. Can be one of 'active', 'expired', 'expiring', 'unused', 'unusedActive' or 'recentlyQueued'
     * @param {module:api/OrganizationsApi~getOrganizationLicensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationLicenses = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationLicenses");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'deviceSerial': opts['deviceSerial'],
        'networkId': opts['networkId'],
        'state': opts['state'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationLicensesOverview operation.
     * @callback module:api/OrganizationsApi~getOrganizationLicensesOverviewCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return an overview of the license state for an organization
     * Return an overview of the license state for an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationLicensesOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationLicensesOverview = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationLicensesOverview");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/overview', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationNetworks operation.
     * @callback module:api/OrganizationsApi~getOrganizationNetworksCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the networks that the user has privileges on in an organization
     * List the networks that the user has privileges on in an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.configTemplateId An optional parameter that is the ID of a config template. Will return all networks bound to that template.
     * @param {Array.<String>} opts.tags An optional parameter to filter networks by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below).
     * @param {module:model/String} opts.tagsFilterType An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
     * @param {Number} opts.perPage The number of entries per page returned. Acceptable range is 3 - 100000. Default is 1000.
     * @param {String} opts.startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {module:api/OrganizationsApi~getOrganizationNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationNetworks = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationNetworks");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        'configTemplateId': opts['configTemplateId'],
        'tagsFilterType': opts['tagsFilterType'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
      };
      var collectionQueryParams = {
        'tags': {
          value: opts['tags'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/networks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationOpenapiSpec operation.
     * @callback module:api/OrganizationsApi~getOrganizationOpenapiSpecCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the OpenAPI 2.0 Specification of the organization's API documentation in JSON
     * Return the OpenAPI 2.0 Specification of the organization's API documentation in JSON
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationOpenapiSpecCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationOpenapiSpec = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationOpenapiSpec");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/openapiSpec', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSaml operation.
     * @callback module:api/OrganizationsApi~getOrganizationSamlCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the SAML SSO enabled settings for an organization.
     * Returns the SAML SSO enabled settings for an organization.
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationSamlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationSaml = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSaml");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSamlIdp operation.
     * @callback module:api/OrganizationsApi~getOrganizationSamlIdpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a SAML IdP from your organization.
     * Get a SAML IdP from your organization.
     * @param {String} organizationId 
     * @param {String} idpId 
     * @param {module:api/OrganizationsApi~getOrganizationSamlIdpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationSamlIdp = function(organizationId, idpId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSamlIdp");
      }

      // verify the required parameter 'idpId' is set
      if (idpId === undefined || idpId === null) {
        throw new Error("Missing the required parameter 'idpId' when calling getOrganizationSamlIdp");
      }


      var pathParams = {
        'organizationId': organizationId,
        'idpId': idpId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps/{idpId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSamlIdps operation.
     * @callback module:api/OrganizationsApi~getOrganizationSamlIdpsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the SAML IdPs in your organization.
     * List the SAML IdPs in your organization.
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationSamlIdpsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationSamlIdps = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSamlIdps");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSamlRole operation.
     * @callback module:api/OrganizationsApi~getOrganizationSamlRoleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a SAML role
     * Return a SAML role
     * @param {String} organizationId 
     * @param {String} samlRoleId 
     * @param {module:api/OrganizationsApi~getOrganizationSamlRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationSamlRole = function(organizationId, samlRoleId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSamlRole");
      }

      // verify the required parameter 'samlRoleId' is set
      if (samlRoleId === undefined || samlRoleId === null) {
        throw new Error("Missing the required parameter 'samlRoleId' when calling getOrganizationSamlRole");
      }


      var pathParams = {
        'organizationId': organizationId,
        'samlRoleId': samlRoleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles/{samlRoleId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSamlRoles operation.
     * @callback module:api/OrganizationsApi~getOrganizationSamlRolesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the SAML roles for this organization
     * List the SAML roles for this organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationSamlRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationSamlRoles = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSamlRoles");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationSnmp operation.
     * @callback module:api/OrganizationsApi~getOrganizationSnmpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the SNMP settings for an organization
     * Return the SNMP settings for an organization
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~getOrganizationSnmpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationSnmp = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationSnmp");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/snmp', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationWebhooksLogs operation.
     * @callback module:api/OrganizationsApi~getOrganizationWebhooksLogsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the log of webhook POSTs sent
     * Return the log of webhook POSTs sent
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.t0 The beginning of the timespan for the data. The maximum lookback period is 90 days from today.
     * @param {String} opts.t1 The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     * @param {Number} opts.timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {Number} opts.perPage The number of entries per page returned. Acceptable range is 3 - 1000. Default is 50.
     * @param {String} opts.startingAfter A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.endingBefore A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     * @param {String} opts.url The URL the webhook was sent to
     * @param {module:api/OrganizationsApi~getOrganizationWebhooksLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationWebhooksLogs = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationWebhooksLogs");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
        't0': opts['t0'],
        't1': opts['t1'],
        'timespan': opts['timespan'],
        'perPage': opts['perPage'],
        'startingAfter': opts['startingAfter'],
        'endingBefore': opts['endingBefore'],
        'url': opts['url'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/webhooks/logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizations operation.
     * @callback module:api/OrganizationsApi~getOrganizationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the organizations that the user has privileges on
     * List the organizations that the user has privileges on
     * @param {module:api/OrganizationsApi~getOrganizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizations = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the moveOrganizationLicenses operation.
     * @callback module:api/OrganizationsApi~moveOrganizationLicensesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     * Move licenses to another organization. This will also move any devices that the licenses are assigned to
     * @param {String} organizationId 
     * @param {module:model/MoveOrganizationLicenses} moveOrganizationLicenses 
     * @param {module:api/OrganizationsApi~moveOrganizationLicensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.moveOrganizationLicenses = function(organizationId, moveOrganizationLicenses, callback) {
      var postBody = moveOrganizationLicenses;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling moveOrganizationLicenses");
      }

      // verify the required parameter 'moveOrganizationLicenses' is set
      if (moveOrganizationLicenses === undefined || moveOrganizationLicenses === null) {
        throw new Error("Missing the required parameter 'moveOrganizationLicenses' when calling moveOrganizationLicenses");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/move', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the moveOrganizationLicensesSeats operation.
     * @callback module:api/OrganizationsApi~moveOrganizationLicensesSeatsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move SM seats to another organization
     * Move SM seats to another organization
     * @param {String} organizationId 
     * @param {module:model/MoveOrganizationLicensesSeats} moveOrganizationLicensesSeats 
     * @param {module:api/OrganizationsApi~moveOrganizationLicensesSeatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.moveOrganizationLicensesSeats = function(organizationId, moveOrganizationLicensesSeats, callback) {
      var postBody = moveOrganizationLicensesSeats;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling moveOrganizationLicensesSeats");
      }

      // verify the required parameter 'moveOrganizationLicensesSeats' is set
      if (moveOrganizationLicensesSeats === undefined || moveOrganizationLicensesSeats === null) {
        throw new Error("Missing the required parameter 'moveOrganizationLicensesSeats' when calling moveOrganizationLicensesSeats");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/moveSeats', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the renewOrganizationLicensesSeats operation.
     * @callback module:api/OrganizationsApi~renewOrganizationLicensesSeatsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     * Renew SM seats of a license. This will extend the license expiration date of managed SM devices covered by this license
     * @param {String} organizationId 
     * @param {module:model/RenewOrganizationLicensesSeats} renewOrganizationLicensesSeats 
     * @param {module:api/OrganizationsApi~renewOrganizationLicensesSeatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.renewOrganizationLicensesSeats = function(organizationId, renewOrganizationLicensesSeats, callback) {
      var postBody = renewOrganizationLicensesSeats;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling renewOrganizationLicensesSeats");
      }

      // verify the required parameter 'renewOrganizationLicensesSeats' is set
      if (renewOrganizationLicensesSeats === undefined || renewOrganizationLicensesSeats === null) {
        throw new Error("Missing the required parameter 'renewOrganizationLicensesSeats' when calling renewOrganizationLicensesSeats");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/renewSeats', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganization operation.
     * @callback module:api/OrganizationsApi~updateOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization
     * Update an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganization} opts.updateOrganization 
     * @param {module:api/OrganizationsApi~updateOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOrganization = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateOrganization'];

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganization");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationActionBatch operation.
     * @callback module:api/OrganizationsApi~updateOrganizationActionBatchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an action batch
     * Update an action batch
     * @param {String} organizationId 
     * @param {String} actionBatchId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationActionBatch} opts.updateOrganizationActionBatch 
     * @param {module:api/OrganizationsApi~updateOrganizationActionBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOrganizationActionBatch = function(organizationId, actionBatchId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateOrganizationActionBatch'];

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationActionBatch");
      }

      // verify the required parameter 'actionBatchId' is set
      if (actionBatchId === undefined || actionBatchId === null) {
        throw new Error("Missing the required parameter 'actionBatchId' when calling updateOrganizationActionBatch");
      }


      var pathParams = {
        'organizationId': organizationId,
        'actionBatchId': actionBatchId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/actionBatches/{actionBatchId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationAdmin operation.
     * @callback module:api/OrganizationsApi~updateOrganizationAdminCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an administrator
     * Update an administrator
     * @param {String} organizationId 
     * @param {String} adminId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationAdmin} opts.updateOrganizationAdmin 
     * @param {module:api/OrganizationsApi~updateOrganizationAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOrganizationAdmin = function(organizationId, adminId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateOrganizationAdmin'];

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationAdmin");
      }

      // verify the required parameter 'adminId' is set
      if (adminId === undefined || adminId === null) {
        throw new Error("Missing the required parameter 'adminId' when calling updateOrganizationAdmin");
      }


      var pathParams = {
        'organizationId': organizationId,
        'adminId': adminId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/admins/{adminId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationBrandingPoliciesPriorities operation.
     * @callback module:api/OrganizationsApi~updateOrganizationBrandingPoliciesPrioritiesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the priority ordering of an organization's branding policies.
     * Update the priority ordering of an organization's branding policies.
     * @param {String} organizationId 
     * @param {module:model/UpdateOrganizationBrandingPoliciesPriorities} updateOrganizationBrandingPoliciesPriorities 
     * @param {module:api/OrganizationsApi~updateOrganizationBrandingPoliciesPrioritiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOrganizationBrandingPoliciesPriorities = function(organizationId, updateOrganizationBrandingPoliciesPriorities, callback) {
      var postBody = updateOrganizationBrandingPoliciesPriorities;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationBrandingPoliciesPriorities");
      }

      // verify the required parameter 'updateOrganizationBrandingPoliciesPriorities' is set
      if (updateOrganizationBrandingPoliciesPriorities === undefined || updateOrganizationBrandingPoliciesPriorities === null) {
        throw new Error("Missing the required parameter 'updateOrganizationBrandingPoliciesPriorities' when calling updateOrganizationBrandingPoliciesPriorities");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/priorities', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationBrandingPolicy operation.
     * @callback module:api/OrganizationsApi~updateOrganizationBrandingPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a branding policy
     * Update a branding policy
     * @param {String} organizationId 
     * @param {String} brandingPolicyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationBrandingPolicy} opts.updateOrganizationBrandingPolicy 
     * @param {module:api/OrganizationsApi~updateOrganizationBrandingPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOrganizationBrandingPolicy = function(organizationId, brandingPolicyId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateOrganizationBrandingPolicy'];

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationBrandingPolicy");
      }

      // verify the required parameter 'brandingPolicyId' is set
      if (brandingPolicyId === undefined || brandingPolicyId === null) {
        throw new Error("Missing the required parameter 'brandingPolicyId' when calling updateOrganizationBrandingPolicy");
      }


      var pathParams = {
        'organizationId': organizationId,
        'brandingPolicyId': brandingPolicyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationConfigTemplate operation.
     * @callback module:api/OrganizationsApi~updateOrganizationConfigTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a configuration template
     * Update a configuration template
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationConfigTemplate} opts.updateOrganizationConfigTemplate 
     * @param {module:api/OrganizationsApi~updateOrganizationConfigTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOrganizationConfigTemplate = function(organizationId, configTemplateId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateOrganizationConfigTemplate'];

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationConfigTemplate");
      }

      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling updateOrganizationConfigTemplate");
      }


      var pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationLicense operation.
     * @callback module:api/OrganizationsApi~updateOrganizationLicenseCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a license
     * Update a license
     * @param {String} organizationId 
     * @param {String} licenseId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationLicense} opts.updateOrganizationLicense 
     * @param {module:api/OrganizationsApi~updateOrganizationLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOrganizationLicense = function(organizationId, licenseId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateOrganizationLicense'];

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationLicense");
      }

      // verify the required parameter 'licenseId' is set
      if (licenseId === undefined || licenseId === null) {
        throw new Error("Missing the required parameter 'licenseId' when calling updateOrganizationLicense");
      }


      var pathParams = {
        'organizationId': organizationId,
        'licenseId': licenseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/licenses/{licenseId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationSaml operation.
     * @callback module:api/OrganizationsApi~updateOrganizationSamlCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the SAML SSO enabled settings for an organization.
     * Updates the SAML SSO enabled settings for an organization.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationSaml} opts.updateOrganizationSaml 
     * @param {module:api/OrganizationsApi~updateOrganizationSamlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOrganizationSaml = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateOrganizationSaml'];

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationSaml");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationSamlIdp operation.
     * @callback module:api/OrganizationsApi~updateOrganizationSamlIdpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a SAML IdP in your organization
     * Update a SAML IdP in your organization
     * @param {String} organizationId 
     * @param {String} idpId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationSamlIdp} opts.updateOrganizationSamlIdp 
     * @param {module:api/OrganizationsApi~updateOrganizationSamlIdpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOrganizationSamlIdp = function(organizationId, idpId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateOrganizationSamlIdp'];

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationSamlIdp");
      }

      // verify the required parameter 'idpId' is set
      if (idpId === undefined || idpId === null) {
        throw new Error("Missing the required parameter 'idpId' when calling updateOrganizationSamlIdp");
      }


      var pathParams = {
        'organizationId': organizationId,
        'idpId': idpId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/saml/idps/{idpId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationSamlRole operation.
     * @callback module:api/OrganizationsApi~updateOrganizationSamlRoleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a SAML role
     * Update a SAML role
     * @param {String} organizationId 
     * @param {String} samlRoleId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationSamlRole} opts.updateOrganizationSamlRole 
     * @param {module:api/OrganizationsApi~updateOrganizationSamlRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOrganizationSamlRole = function(organizationId, samlRoleId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateOrganizationSamlRole'];

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationSamlRole");
      }

      // verify the required parameter 'samlRoleId' is set
      if (samlRoleId === undefined || samlRoleId === null) {
        throw new Error("Missing the required parameter 'samlRoleId' when calling updateOrganizationSamlRole");
      }


      var pathParams = {
        'organizationId': organizationId,
        'samlRoleId': samlRoleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/samlRoles/{samlRoleId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationSnmp operation.
     * @callback module:api/OrganizationsApi~updateOrganizationSnmpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the SNMP settings for an organization
     * Update the SNMP settings for an organization
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationSnmp} opts.updateOrganizationSnmp 
     * @param {module:api/OrganizationsApi~updateOrganizationSnmpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOrganizationSnmp = function(organizationId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateOrganizationSnmp'];

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationSnmp");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/snmp', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
