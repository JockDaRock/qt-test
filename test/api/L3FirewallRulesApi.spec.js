/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.L3FirewallRulesApi();
  });

  describe('(package)', function() {
    describe('L3FirewallRulesApi', function() {
      describe('getNetworkApplianceFirewallL3FirewallRules', function() {
        it('should call getNetworkApplianceFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallL3FirewallRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidFirewallL3FirewallRules', function() {
        it('should call getNetworkWirelessSsidFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidFirewallL3FirewallRules(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallL3FirewallRules', function() {
        it('should call updateNetworkApplianceFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceFirewallL3FirewallRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallL3FirewallRules();
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewallcellularFirewallRulesRules()];
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].comment = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].policy = "allow";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].protocol = "tcp";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].srcPort = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].srcCidr = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].destPort = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].destCidr = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].syslogEnabled = false;
          opts.updateNetworkApplianceFirewallL3FirewallRules.syslogDefaultRule = false;

          instance.updateNetworkApplianceFirewallL3FirewallRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidFirewallL3FirewallRules', function() {
        it('should call updateNetworkWirelessSsidFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var opts = {};
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules = new MerakiDashboardApi.UpdateNetworkWirelessSsidFirewallL3FirewallRules();
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumberfirewalll3FirewallRulesRules()];
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].comment = "";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].policy = "allow";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].protocol = "tcp";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].destPort = "";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].destCidr = "";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.allowLanAccess = false;

          instance.updateNetworkWirelessSsidFirewallL3FirewallRules(networkId, _number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
