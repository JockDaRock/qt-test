/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.StacksApi();
  });

  describe('(package)', function() {
    describe('StacksApi', function() {
      describe('addNetworkSwitchStack', function() {
        it('should call addNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for addNetworkSwitchStack call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var addNetworkSwitchStack = new MerakiDashboardApi.AddNetworkSwitchStack();
          addNetworkSwitchStack.serial = "";

          instance.addNetworkSwitchStack(networkId, switchStackId, addNetworkSwitchStack, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchStack', function() {
        it('should call createNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchStack call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkSwitchStack = new MerakiDashboardApi.CreateNetworkSwitchStack();
          createNetworkSwitchStack.name = "";
          createNetworkSwitchStack.serials = [""];

          instance.createNetworkSwitchStack(networkId, createNetworkSwitchStack, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchStackRoutingInterface', function() {
        it('should call createNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchStackRoutingInterface call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var createNetworkSwitchStackRoutingInterface = new MerakiDashboardApi.CreateNetworkSwitchStackRoutingInterface();
          createNetworkSwitchStackRoutingInterface.name = "";
          createNetworkSwitchStackRoutingInterface.subnet = "";
          createNetworkSwitchStackRoutingInterface.interfaceIp = "";
          createNetworkSwitchStackRoutingInterface.multicastRouting = "disabled";
          createNetworkSwitchStackRoutingInterface.vlanId = 0;
          createNetworkSwitchStackRoutingInterface.defaultGateway = "";
          createNetworkSwitchStackRoutingInterface.ospfSettings = new MerakiDashboardApi.DevicesserialswitchroutinginterfacesOspfSettings();
          createNetworkSwitchStackRoutingInterface.ospfSettings.area = "";
          createNetworkSwitchStackRoutingInterface.ospfSettings.cost = 0;
          createNetworkSwitchStackRoutingInterface.ospfSettings.isPassiveEnabled = false;

          instance.createNetworkSwitchStackRoutingInterface(networkId, switchStackId, createNetworkSwitchStackRoutingInterface, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call createNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var createNetworkSwitchStackRoutingStaticRoute = new MerakiDashboardApi.CreateNetworkSwitchStackRoutingStaticRoute();
          createNetworkSwitchStackRoutingStaticRoute.name = "";
          createNetworkSwitchStackRoutingStaticRoute.subnet = "";
          createNetworkSwitchStackRoutingStaticRoute.nextHopIp = "";
          createNetworkSwitchStackRoutingStaticRoute.advertiseViaOspfEnabled = false;
          createNetworkSwitchStackRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.createNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, createNetworkSwitchStackRoutingStaticRoute, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchStack', function() {
        it('should call deleteNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchStack call
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.deleteNetworkSwitchStack(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchStackRoutingInterface', function() {
        it('should call deleteNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchStackRoutingInterface call
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";

          instance.deleteNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call deleteNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchStackRoutingStaticRoute call
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";

          instance.deleteNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStack', function() {
        it('should call getNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStack call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.getNetworkSwitchStack(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingInterface', function() {
        it('should call getNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingInterface call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";

          instance.getNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingInterfaceDhcp', function() {
        it('should call getNetworkSwitchStackRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingInterfaceDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";

          instance.getNetworkSwitchStackRoutingInterfaceDhcp(networkId, switchStackId, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingInterfaces', function() {
        it('should call getNetworkSwitchStackRoutingInterfaces successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingInterfaces call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.getNetworkSwitchStackRoutingInterfaces(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call getNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";

          instance.getNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingStaticRoutes', function() {
        it('should call getNetworkSwitchStackRoutingStaticRoutes successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingStaticRoutes call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.getNetworkSwitchStackRoutingStaticRoutes(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStacks', function() {
        it('should call getNetworkSwitchStacks successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStacks call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchStacks(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeNetworkSwitchStack', function() {
        it('should call removeNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for removeNetworkSwitchStack call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var removeNetworkSwitchStack = new MerakiDashboardApi.RemoveNetworkSwitchStack();
          removeNetworkSwitchStack.serial = "";

          instance.removeNetworkSwitchStack(networkId, switchStackId, removeNetworkSwitchStack, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStackRoutingInterface', function() {
        it('should call updateNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStackRoutingInterface call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateNetworkSwitchStackRoutingInterface = new MerakiDashboardApi.UpdateNetworkSwitchStackRoutingInterface();
          opts.updateNetworkSwitchStackRoutingInterface.name = "";
          opts.updateNetworkSwitchStackRoutingInterface.subnet = "";
          opts.updateNetworkSwitchStackRoutingInterface.interfaceIp = "";
          opts.updateNetworkSwitchStackRoutingInterface.multicastRouting = "disabled";
          opts.updateNetworkSwitchStackRoutingInterface.vlanId = 0;
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings = new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIdOspfSettings();
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings.area = "";
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings.cost = 0;
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings.isPassiveEnabled = false;

          instance.updateNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStackRoutingInterfaceDhcp', function() {
        it('should call updateNetworkSwitchStackRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStackRoutingInterfaceDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp = new MerakiDashboardApi.UpdateNetworkSwitchStackRoutingInterfaceDhcp();
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpMode = "dhcpDisabled";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpRelayServerIps = [""];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpLeaseTime = "30 minutes";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dnsNameserversOption = "googlePublicDns";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dnsCustomNameservers = [""];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootOptionsEnabled = false;
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootNextServer = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootFileName = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].code = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].type = "text";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].value = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].start = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].end = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].comment = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].name = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].mac = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].ip = "";

          instance.updateNetworkSwitchStackRoutingInterfaceDhcp(networkId, switchStackId, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call updateNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";
          var opts = {};
          opts.updateNetworkSwitchStackRoutingStaticRoute = new MerakiDashboardApi.UpdateNetworkSwitchStackRoutingStaticRoute();
          opts.updateNetworkSwitchStackRoutingStaticRoute.name = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.subnet = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.nextHopIp = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.advertiseViaOspfEnabled = false;
          opts.updateNetworkSwitchStackRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.updateNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
