/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.MerakiDashboardApi) {
      root.MerakiDashboardApi = {};
    }
    root.MerakiDashboardApi.DevicesserialmanagementInterfaceWan1 = factory(root.MerakiDashboardApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The DevicesserialmanagementInterfaceWan1 model module.
   * @module model/DevicesserialmanagementInterfaceWan1
   * @version 1.1.0
   */

  /**
   * Constructs a new <code>DevicesserialmanagementInterfaceWan1</code>.
   * WAN 1 settings
   * @alias module:model/DevicesserialmanagementInterfaceWan1
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>DevicesserialmanagementInterfaceWan1</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DevicesserialmanagementInterfaceWan1} obj Optional instance to populate.
   * @return {module:model/DevicesserialmanagementInterfaceWan1} The populated <code>DevicesserialmanagementInterfaceWan1</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('wanEnabled'))
        obj.wanEnabled = ApiClient.convertToType(data['wanEnabled'], 'String');
      if (data.hasOwnProperty('usingStaticIp'))
        obj.usingStaticIp = ApiClient.convertToType(data['usingStaticIp'], 'Boolean');
      if (data.hasOwnProperty('staticIp'))
        obj.staticIp = ApiClient.convertToType(data['staticIp'], 'String');
      if (data.hasOwnProperty('staticGatewayIp'))
        obj.staticGatewayIp = ApiClient.convertToType(data['staticGatewayIp'], 'String');
      if (data.hasOwnProperty('staticSubnetMask'))
        obj.staticSubnetMask = ApiClient.convertToType(data['staticSubnetMask'], 'String');
      if (data.hasOwnProperty('staticDns'))
        obj.staticDns = ApiClient.convertToType(data['staticDns'], ['String']);
      if (data.hasOwnProperty('vlan'))
        obj.vlan = ApiClient.convertToType(data['vlan'], 'Number');
    }
    return obj;
  }

  /**
   * Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
   * @member {module:model/DevicesserialmanagementInterfaceWan1.WanEnabledEnum} wanEnabled
   */
  exports.prototype.wanEnabled = undefined;

  /**
   * Configue the interface to have static IP settings or use DHCP.
   * @member {Boolean} usingStaticIp
   */
  exports.prototype.usingStaticIp = undefined;

  /**
   * The IP the device should use on the WAN.
   * @member {String} staticIp
   */
  exports.prototype.staticIp = undefined;

  /**
   * The IP of the gateway on the WAN.
   * @member {String} staticGatewayIp
   */
  exports.prototype.staticGatewayIp = undefined;

  /**
   * The subnet mask for the WAN.
   * @member {String} staticSubnetMask
   */
  exports.prototype.staticSubnetMask = undefined;

  /**
   * Up to two DNS IPs.
   * @member {Array.<String>} staticDns
   */
  exports.prototype.staticDns = undefined;

  /**
   * The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
   * @member {Number} vlan
   */
  exports.prototype.vlan = undefined;


  /**
   * Allowed values for the <code>wanEnabled</code> property.
   * @enum {String}
   * @readonly
   */
  exports.WanEnabledEnum = {
    /**
     * value: "enabled"
     * @const
     */
    enabled: "enabled",

    /**
     * value: "disabled"
     * @const
     */
    disabled: "disabled",

    /**
     * value: "not configured"
     * @const
     */
    notConfigured: "not configured"
  };

  return exports;

}));
