/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.StaticRoutesApi();
  });

  describe('(package)', function() {
    describe('StaticRoutesApi', function() {
      describe('createDeviceSwitchRoutingStaticRoute', function() {
        it('should call createDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for createDeviceSwitchRoutingStaticRoute call and complete the assertions
          /*
          var serial = "serial_example";
          var createDeviceSwitchRoutingStaticRoute = new MerakiDashboardApi.CreateDeviceSwitchRoutingStaticRoute();
          createDeviceSwitchRoutingStaticRoute.name = "";
          createDeviceSwitchRoutingStaticRoute.subnet = "";
          createDeviceSwitchRoutingStaticRoute.nextHopIp = "";
          createDeviceSwitchRoutingStaticRoute.advertiseViaOspfEnabled = false;
          createDeviceSwitchRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.createDeviceSwitchRoutingStaticRoute(serial, createDeviceSwitchRoutingStaticRoute, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkApplianceStaticRoute', function() {
        it('should call createNetworkApplianceStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkApplianceStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkApplianceStaticRoute = new MerakiDashboardApi.CreateNetworkApplianceStaticRoute();
          createNetworkApplianceStaticRoute.name = "";
          createNetworkApplianceStaticRoute.subnet = "";
          createNetworkApplianceStaticRoute.gatewayIp = "";

          instance.createNetworkApplianceStaticRoute(networkId, createNetworkApplianceStaticRoute, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call createNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var createNetworkSwitchStackRoutingStaticRoute = new MerakiDashboardApi.CreateNetworkSwitchStackRoutingStaticRoute();
          createNetworkSwitchStackRoutingStaticRoute.name = "";
          createNetworkSwitchStackRoutingStaticRoute.subnet = "";
          createNetworkSwitchStackRoutingStaticRoute.nextHopIp = "";
          createNetworkSwitchStackRoutingStaticRoute.advertiseViaOspfEnabled = false;
          createNetworkSwitchStackRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.createNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, createNetworkSwitchStackRoutingStaticRoute, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDeviceSwitchRoutingStaticRoute', function() {
        it('should call deleteDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDeviceSwitchRoutingStaticRoute call
          /*
          var serial = "serial_example";
          var staticRouteId = "staticRouteId_example";

          instance.deleteDeviceSwitchRoutingStaticRoute(serial, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkApplianceStaticRoute', function() {
        it('should call deleteNetworkApplianceStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkApplianceStaticRoute call
          /*
          var networkId = "networkId_example";
          var staticRouteId = "staticRouteId_example";

          instance.deleteNetworkApplianceStaticRoute(networkId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call deleteNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchStackRoutingStaticRoute call
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";

          instance.deleteNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingStaticRoute', function() {
        it('should call getDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingStaticRoute call and complete the assertions
          /*
          var serial = "serial_example";
          var staticRouteId = "staticRouteId_example";

          instance.getDeviceSwitchRoutingStaticRoute(serial, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingStaticRoutes', function() {
        it('should call getDeviceSwitchRoutingStaticRoutes successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingStaticRoutes call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceSwitchRoutingStaticRoutes(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceStaticRoute', function() {
        it('should call getNetworkApplianceStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var staticRouteId = "staticRouteId_example";

          instance.getNetworkApplianceStaticRoute(networkId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceStaticRoutes', function() {
        it('should call getNetworkApplianceStaticRoutes successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceStaticRoutes call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceStaticRoutes(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call getNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";

          instance.getNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingStaticRoutes', function() {
        it('should call getNetworkSwitchStackRoutingStaticRoutes successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingStaticRoutes call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.getNetworkSwitchStackRoutingStaticRoutes(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchRoutingStaticRoute', function() {
        it('should call updateDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchRoutingStaticRoute call and complete the assertions
          /*
          var serial = "serial_example";
          var staticRouteId = "staticRouteId_example";
          var opts = {};
          opts.updateDeviceSwitchRoutingStaticRoute = new MerakiDashboardApi.UpdateDeviceSwitchRoutingStaticRoute();
          opts.updateDeviceSwitchRoutingStaticRoute.name = "";
          opts.updateDeviceSwitchRoutingStaticRoute.subnet = "";
          opts.updateDeviceSwitchRoutingStaticRoute.nextHopIp = "";
          opts.updateDeviceSwitchRoutingStaticRoute.advertiseViaOspfEnabled = false;
          opts.updateDeviceSwitchRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.updateDeviceSwitchRoutingStaticRoute(serial, staticRouteId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceStaticRoute', function() {
        it('should call updateNetworkApplianceStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var staticRouteId = "staticRouteId_example";
          var opts = {};
          opts.updateNetworkApplianceStaticRoute = new MerakiDashboardApi.UpdateNetworkApplianceStaticRoute();
          opts.updateNetworkApplianceStaticRoute.name = "";
          opts.updateNetworkApplianceStaticRoute.subnet = "";
          opts.updateNetworkApplianceStaticRoute.gatewayIp = "";
          opts.updateNetworkApplianceStaticRoute.enabled = false;
          opts.updateNetworkApplianceStaticRoute.fixedIpAssignments = ;
          opts.updateNetworkApplianceStaticRoute.reservedIpRanges = [new MerakiDashboardApi.NetworksnetworkIdappliancestaticRoutesstaticRouteIdReservedIpRanges()];
          opts.updateNetworkApplianceStaticRoute.reservedIpRanges[0].start = "";
          opts.updateNetworkApplianceStaticRoute.reservedIpRanges[0].end = "";
          opts.updateNetworkApplianceStaticRoute.reservedIpRanges[0].comment = "";

          instance.updateNetworkApplianceStaticRoute(networkId, staticRouteId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call updateNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";
          var opts = {};
          opts.updateNetworkSwitchStackRoutingStaticRoute = new MerakiDashboardApi.UpdateNetworkSwitchStackRoutingStaticRoute();
          opts.updateNetworkSwitchStackRoutingStaticRoute.name = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.subnet = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.nextHopIp = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.advertiseViaOspfEnabled = false;
          opts.updateNetworkSwitchStackRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.updateNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
