/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies', function() {
      beforeEach(function() {
        instance = new MerakiDashboardApi.OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies();
      });

      it('should create an instance of OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies', function() {
        // TODO: update the code to test OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies
        expect(instance).to.be.a(MerakiDashboardApi.OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies);
      });

      it('should have the property ikeCipherAlgo (base name: "ikeCipherAlgo")', function() {
        // TODO: update the code to test the property ikeCipherAlgo
        expect(instance).to.have.property('ikeCipherAlgo');
        // expect(instance.ikeCipherAlgo).to.be(expectedValueLiteral);
      });

      it('should have the property ikeAuthAlgo (base name: "ikeAuthAlgo")', function() {
        // TODO: update the code to test the property ikeAuthAlgo
        expect(instance).to.have.property('ikeAuthAlgo');
        // expect(instance.ikeAuthAlgo).to.be(expectedValueLiteral);
      });

      it('should have the property ikePrfAlgo (base name: "ikePrfAlgo")', function() {
        // TODO: update the code to test the property ikePrfAlgo
        expect(instance).to.have.property('ikePrfAlgo');
        // expect(instance.ikePrfAlgo).to.be(expectedValueLiteral);
      });

      it('should have the property ikeDiffieHellmanGroup (base name: "ikeDiffieHellmanGroup")', function() {
        // TODO: update the code to test the property ikeDiffieHellmanGroup
        expect(instance).to.have.property('ikeDiffieHellmanGroup');
        // expect(instance.ikeDiffieHellmanGroup).to.be(expectedValueLiteral);
      });

      it('should have the property ikeLifetime (base name: "ikeLifetime")', function() {
        // TODO: update the code to test the property ikeLifetime
        expect(instance).to.have.property('ikeLifetime');
        // expect(instance.ikeLifetime).to.be(expectedValueLiteral);
      });

      it('should have the property childCipherAlgo (base name: "childCipherAlgo")', function() {
        // TODO: update the code to test the property childCipherAlgo
        expect(instance).to.have.property('childCipherAlgo');
        // expect(instance.childCipherAlgo).to.be(expectedValueLiteral);
      });

      it('should have the property childAuthAlgo (base name: "childAuthAlgo")', function() {
        // TODO: update the code to test the property childAuthAlgo
        expect(instance).to.have.property('childAuthAlgo');
        // expect(instance.childAuthAlgo).to.be(expectedValueLiteral);
      });

      it('should have the property childPfsGroup (base name: "childPfsGroup")', function() {
        // TODO: update the code to test the property childPfsGroup
        expect(instance).to.have.property('childPfsGroup');
        // expect(instance.childPfsGroup).to.be(expectedValueLiteral);
      });

      it('should have the property childLifetime (base name: "childLifetime")', function() {
        // TODO: update the code to test the property childLifetime
        expect(instance).to.have.property('childLifetime');
        // expect(instance.childLifetime).to.be(expectedValueLiteral);
      });

    });
  });

}));
