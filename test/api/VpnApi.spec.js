/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.VpnApi();
  });

  describe('(package)', function() {
    describe('VpnApi', function() {
      describe('getNetworkApplianceVpnSiteToSiteVpn', function() {
        it('should call getNetworkApplianceVpnSiteToSiteVpn successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceVpnSiteToSiteVpn call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceVpnSiteToSiteVpn(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceVpnStats', function() {
        it('should call getOrganizationApplianceVpnStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceVpnStats call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.networkIds = ["networkIds_example"];
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;

          instance.getOrganizationApplianceVpnStats(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceVpnStatuses', function() {
        it('should call getOrganizationApplianceVpnStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceVpnStatuses call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.networkIds = ["networkIds_example"];

          instance.getOrganizationApplianceVpnStatuses(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceVpnThirdPartyVPNPeers', function() {
        it('should call getOrganizationApplianceVpnThirdPartyVPNPeers successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceVpnThirdPartyVPNPeers call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationApplianceVpnThirdPartyVPNPeers(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceVpnVpnFirewallRules', function() {
        it('should call getOrganizationApplianceVpnVpnFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceVpnVpnFirewallRules call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationApplianceVpnVpnFirewallRules(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceVpnSiteToSiteVpn', function() {
        it('should call updateNetworkApplianceVpnSiteToSiteVpn successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceVpnSiteToSiteVpn call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceVpnSiteToSiteVpn = new MerakiDashboardApi.UpdateNetworkApplianceVpnSiteToSiteVpn();
          updateNetworkApplianceVpnSiteToSiteVpn.mode = "none";
          updateNetworkApplianceVpnSiteToSiteVpn.hubs = [new MerakiDashboardApi.NetworksnetworkIdappliancevpnsiteToSiteVpnHubs()];
          updateNetworkApplianceVpnSiteToSiteVpn.hubs[0].hubId = "";
          updateNetworkApplianceVpnSiteToSiteVpn.hubs[0].useDefaultRoute = false;
          updateNetworkApplianceVpnSiteToSiteVpn.subnets = [new MerakiDashboardApi.NetworksnetworkIdappliancevpnsiteToSiteVpnSubnets()];
          updateNetworkApplianceVpnSiteToSiteVpn.subnets[0].localSubnet = "";
          updateNetworkApplianceVpnSiteToSiteVpn.subnets[0].useVpn = false;

          instance.updateNetworkApplianceVpnSiteToSiteVpn(networkId, updateNetworkApplianceVpnSiteToSiteVpn, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationApplianceVpnThirdPartyVPNPeers', function() {
        it('should call updateOrganizationApplianceVpnThirdPartyVPNPeers successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationApplianceVpnThirdPartyVPNPeers call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var updateOrganizationApplianceVpnThirdPartyVPNPeers = new MerakiDashboardApi.UpdateOrganizationApplianceVpnThirdPartyVPNPeers();
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers = [new MerakiDashboardApi.OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers()];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].name = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].publicIp = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].remoteId = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].privateSubnets = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies = new MerakiDashboardApi.OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies();
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikeCipherAlgo = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikeAuthAlgo = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikePrfAlgo = ["prfsha256"]"prfsha256";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikeDiffieHellmanGroup = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikeLifetime = 0;
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.childCipherAlgo = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.childAuthAlgo = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.childPfsGroup = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.childLifetime = 0;
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPoliciesPreset = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].secret = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ikeVersion = "1";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].networkTags = [""];

          instance.updateOrganizationApplianceVpnThirdPartyVPNPeers(organizationId, updateOrganizationApplianceVpnThirdPartyVPNPeers, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationApplianceVpnVpnFirewallRules', function() {
        it('should call updateOrganizationApplianceVpnVpnFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationApplianceVpnVpnFirewallRules call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.updateOrganizationApplianceVpnVpnFirewallRules = new MerakiDashboardApi.UpdateOrganizationApplianceVpnVpnFirewallRules();
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules = [new MerakiDashboardApi.OrganizationsorganizationIdappliancevpnvpnFirewallRulesRules()];
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].comment = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].policy = "allow";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].protocol = "tcp";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].srcPort = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].srcCidr = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].destPort = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].destCidr = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].syslogEnabled = false;
          opts.updateOrganizationApplianceVpnVpnFirewallRules.syslogDefaultRule = false;

          instance.updateOrganizationApplianceVpnVpnFirewallRules(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
