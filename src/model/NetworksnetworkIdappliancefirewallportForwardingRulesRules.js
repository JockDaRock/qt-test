/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.MerakiDashboardApi) {
      root.MerakiDashboardApi = {};
    }
    root.MerakiDashboardApi.NetworksnetworkIdappliancefirewallportForwardingRulesRules = factory(root.MerakiDashboardApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The NetworksnetworkIdappliancefirewallportForwardingRulesRules model module.
   * @module model/NetworksnetworkIdappliancefirewallportForwardingRulesRules
   * @version 1.1.0
   */

  /**
   * Constructs a new <code>NetworksnetworkIdappliancefirewallportForwardingRulesRules</code>.
   * @alias module:model/NetworksnetworkIdappliancefirewallportForwardingRulesRules
   * @class
   * @param lanIp {String} The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN
   * @param publicPort {String} A port or port ranges that will be forwarded to the host on the LAN
   * @param localPort {String} A port or port ranges that will receive the forwarded traffic from the WAN
   * @param allowedIps {Array.<String>} An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges (or any)
   * @param protocol {module:model/NetworksnetworkIdappliancefirewallportForwardingRulesRules.ProtocolEnum} TCP or UDP
   */
  var exports = function(lanIp, publicPort, localPort, allowedIps, protocol) {
    this.lanIp = lanIp;
    this.publicPort = publicPort;
    this.localPort = localPort;
    this.allowedIps = allowedIps;
    this.protocol = protocol;
  };

  /**
   * Constructs a <code>NetworksnetworkIdappliancefirewallportForwardingRulesRules</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/NetworksnetworkIdappliancefirewallportForwardingRulesRules} obj Optional instance to populate.
   * @return {module:model/NetworksnetworkIdappliancefirewallportForwardingRulesRules} The populated <code>NetworksnetworkIdappliancefirewallportForwardingRulesRules</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('lanIp'))
        obj.lanIp = ApiClient.convertToType(data['lanIp'], 'String');
      if (data.hasOwnProperty('uplink'))
        obj.uplink = ApiClient.convertToType(data['uplink'], 'String');
      if (data.hasOwnProperty('publicPort'))
        obj.publicPort = ApiClient.convertToType(data['publicPort'], 'String');
      if (data.hasOwnProperty('localPort'))
        obj.localPort = ApiClient.convertToType(data['localPort'], 'String');
      if (data.hasOwnProperty('allowedIps'))
        obj.allowedIps = ApiClient.convertToType(data['allowedIps'], ['String']);
      if (data.hasOwnProperty('protocol'))
        obj.protocol = ApiClient.convertToType(data['protocol'], 'String');
    }
    return obj;
  }

  /**
   * A descriptive name for the rule
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN
   * @member {String} lanIp
   */
  exports.prototype.lanIp = undefined;

  /**
   * The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2' or 'both')
   * @member {module:model/NetworksnetworkIdappliancefirewallportForwardingRulesRules.UplinkEnum} uplink
   */
  exports.prototype.uplink = undefined;

  /**
   * A port or port ranges that will be forwarded to the host on the LAN
   * @member {String} publicPort
   */
  exports.prototype.publicPort = undefined;

  /**
   * A port or port ranges that will receive the forwarded traffic from the WAN
   * @member {String} localPort
   */
  exports.prototype.localPort = undefined;

  /**
   * An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges (or any)
   * @member {Array.<String>} allowedIps
   */
  exports.prototype.allowedIps = undefined;

  /**
   * TCP or UDP
   * @member {module:model/NetworksnetworkIdappliancefirewallportForwardingRulesRules.ProtocolEnum} protocol
   */
  exports.prototype.protocol = undefined;


  /**
   * Allowed values for the <code>uplink</code> property.
   * @enum {String}
   * @readonly
   */
  exports.UplinkEnum = {
    /**
     * value: "internet1"
     * @const
     */
    internet1: "internet1",

    /**
     * value: "internet2"
     * @const
     */
    internet2: "internet2",

    /**
     * value: "both"
     * @const
     */
    both: "both"
  };


  /**
   * Allowed values for the <code>protocol</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ProtocolEnum = {
    /**
     * value: "tcp"
     * @const
     */
    tcp: "tcp",

    /**
     * value: "udp"
     * @const
     */
    udp: "udp"
  };

  return exports;

}));
