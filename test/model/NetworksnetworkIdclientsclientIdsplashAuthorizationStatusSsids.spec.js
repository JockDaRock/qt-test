/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids', function() {
      beforeEach(function() {
        instance = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids();
      });

      it('should create an instance of NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids', function() {
        // TODO: update the code to test NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids
        expect(instance).to.be.a(MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids);
      });

      it('should have the property _0 (base name: "0")', function() {
        // TODO: update the code to test the property _0
        expect(instance).to.have.property('_0');
        // expect(instance._0).to.be(expectedValueLiteral);
      });

      it('should have the property _1 (base name: "1")', function() {
        // TODO: update the code to test the property _1
        expect(instance).to.have.property('_1');
        // expect(instance._1).to.be(expectedValueLiteral);
      });

      it('should have the property _2 (base name: "2")', function() {
        // TODO: update the code to test the property _2
        expect(instance).to.have.property('_2');
        // expect(instance._2).to.be(expectedValueLiteral);
      });

      it('should have the property _3 (base name: "3")', function() {
        // TODO: update the code to test the property _3
        expect(instance).to.have.property('_3');
        // expect(instance._3).to.be(expectedValueLiteral);
      });

      it('should have the property _4 (base name: "4")', function() {
        // TODO: update the code to test the property _4
        expect(instance).to.have.property('_4');
        // expect(instance._4).to.be(expectedValueLiteral);
      });

      it('should have the property _5 (base name: "5")', function() {
        // TODO: update the code to test the property _5
        expect(instance).to.have.property('_5');
        // expect(instance._5).to.be(expectedValueLiteral);
      });

      it('should have the property _6 (base name: "6")', function() {
        // TODO: update the code to test the property _6
        expect(instance).to.have.property('_6');
        // expect(instance._6).to.be(expectedValueLiteral);
      });

      it('should have the property _7 (base name: "7")', function() {
        // TODO: update the code to test the property _7
        expect(instance).to.have.property('_7');
        // expect(instance._7).to.be(expectedValueLiteral);
      });

      it('should have the property _8 (base name: "8")', function() {
        // TODO: update the code to test the property _8
        expect(instance).to.have.property('_8');
        // expect(instance._8).to.be(expectedValueLiteral);
      });

      it('should have the property _9 (base name: "9")', function() {
        // TODO: update the code to test the property _9
        expect(instance).to.have.property('_9');
        // expect(instance._9).to.be(expectedValueLiteral);
      });

      it('should have the property _10 (base name: "10")', function() {
        // TODO: update the code to test the property _10
        expect(instance).to.have.property('_10');
        // expect(instance._10).to.be(expectedValueLiteral);
      });

      it('should have the property _11 (base name: "11")', function() {
        // TODO: update the code to test the property _11
        expect(instance).to.have.property('_11');
        // expect(instance._11).to.be(expectedValueLiteral);
      });

      it('should have the property _12 (base name: "12")', function() {
        // TODO: update the code to test the property _12
        expect(instance).to.have.property('_12');
        // expect(instance._12).to.be(expectedValueLiteral);
      });

      it('should have the property _13 (base name: "13")', function() {
        // TODO: update the code to test the property _13
        expect(instance).to.have.property('_13');
        // expect(instance._13).to.be(expectedValueLiteral);
      });

      it('should have the property _14 (base name: "14")', function() {
        // TODO: update the code to test the property _14
        expect(instance).to.have.property('_14');
        // expect(instance._14).to.be(expectedValueLiteral);
      });

    });
  });

}));
