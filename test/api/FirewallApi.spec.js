/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.FirewallApi();
  });

  describe('(package)', function() {
    describe('FirewallApi', function() {
      describe('getNetworkApplianceFirewallCellularFirewallRules', function() {
        it('should call getNetworkApplianceFirewallCellularFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallCellularFirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallCellularFirewallRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallFirewalledService', function() {
        it('should call getNetworkApplianceFirewallFirewalledService successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallFirewalledService call and complete the assertions
          /*
          var networkId = "networkId_example";
          var service = "service_example";

          instance.getNetworkApplianceFirewallFirewalledService(networkId, service, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallFirewalledServices', function() {
        it('should call getNetworkApplianceFirewallFirewalledServices successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallFirewalledServices call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallFirewalledServices(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallInboundFirewallRules', function() {
        it('should call getNetworkApplianceFirewallInboundFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallInboundFirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallInboundFirewallRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallL3FirewallRules', function() {
        it('should call getNetworkApplianceFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallL3FirewallRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallL7FirewallRules', function() {
        it('should call getNetworkApplianceFirewallL7FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallL7FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallL7FirewallRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallL7FirewallRulesApplicationCategories', function() {
        it('should call getNetworkApplianceFirewallL7FirewallRulesApplicationCategories successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallL7FirewallRulesApplicationCategories call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallL7FirewallRulesApplicationCategories(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallOneToManyNatRules', function() {
        it('should call getNetworkApplianceFirewallOneToManyNatRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallOneToManyNatRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallOneToManyNatRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallOneToOneNatRules', function() {
        it('should call getNetworkApplianceFirewallOneToOneNatRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallOneToOneNatRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallOneToOneNatRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallPortForwardingRules', function() {
        it('should call getNetworkApplianceFirewallPortForwardingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallPortForwardingRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallPortForwardingRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidFirewallL3FirewallRules', function() {
        it('should call getNetworkWirelessSsidFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidFirewallL3FirewallRules(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidFirewallL7FirewallRules', function() {
        it('should call getNetworkWirelessSsidFirewallL7FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidFirewallL7FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidFirewallL7FirewallRules(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallCellularFirewallRules', function() {
        it('should call updateNetworkApplianceFirewallCellularFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallCellularFirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceFirewallCellularFirewallRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallCellularFirewallRules();
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewallcellularFirewallRulesRules()];
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].comment = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].policy = "allow";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].protocol = "tcp";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].srcPort = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].srcCidr = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].destPort = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].destCidr = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].syslogEnabled = false;

          instance.updateNetworkApplianceFirewallCellularFirewallRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallFirewalledService', function() {
        it('should call updateNetworkApplianceFirewallFirewalledService successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallFirewalledService call and complete the assertions
          /*
          var networkId = "networkId_example";
          var service = "service_example";
          var updateNetworkApplianceFirewallFirewalledService = new MerakiDashboardApi.UpdateNetworkApplianceFirewallFirewalledService();
          updateNetworkApplianceFirewallFirewalledService.access = "blocked";
          updateNetworkApplianceFirewallFirewalledService.allowedIps = [""];

          instance.updateNetworkApplianceFirewallFirewalledService(networkId, service, updateNetworkApplianceFirewallFirewalledService, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallInboundFirewallRules', function() {
        it('should call updateNetworkApplianceFirewallInboundFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallInboundFirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceFirewallInboundFirewallRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallInboundFirewallRules();
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewallcellularFirewallRulesRules()];
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].comment = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].policy = "allow";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].protocol = "tcp";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].srcPort = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].srcCidr = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].destPort = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].destCidr = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].syslogEnabled = false;
          opts.updateNetworkApplianceFirewallInboundFirewallRules.syslogDefaultRule = false;

          instance.updateNetworkApplianceFirewallInboundFirewallRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallL3FirewallRules', function() {
        it('should call updateNetworkApplianceFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceFirewallL3FirewallRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallL3FirewallRules();
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewallcellularFirewallRulesRules()];
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].comment = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].policy = "allow";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].protocol = "tcp";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].srcPort = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].srcCidr = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].destPort = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].destCidr = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].syslogEnabled = false;
          opts.updateNetworkApplianceFirewallL3FirewallRules.syslogDefaultRule = false;

          instance.updateNetworkApplianceFirewallL3FirewallRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallL7FirewallRules', function() {
        it('should call updateNetworkApplianceFirewallL7FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallL7FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceFirewallL7FirewallRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallL7FirewallRules();
          opts.updateNetworkApplianceFirewallL7FirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalll7FirewallRulesRules()];
          opts.updateNetworkApplianceFirewallL7FirewallRules.rules[0].policy = "deny";
          opts.updateNetworkApplianceFirewallL7FirewallRules.rules[0].type = "application";
          opts.updateNetworkApplianceFirewallL7FirewallRules.rules[0].value = "";

          instance.updateNetworkApplianceFirewallL7FirewallRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallOneToManyNatRules', function() {
        it('should call updateNetworkApplianceFirewallOneToManyNatRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallOneToManyNatRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceFirewallOneToManyNatRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallOneToManyNatRules();
          updateNetworkApplianceFirewallOneToManyNatRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalloneToManyNatRulesRules()];
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].publicIp = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].uplink = "internet1";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalloneToManyNatRulesPortRules()];
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].name = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].protocol = "tcp";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].publicPort = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].localIp = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].localPort = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].allowedIps = [""];

          instance.updateNetworkApplianceFirewallOneToManyNatRules(networkId, updateNetworkApplianceFirewallOneToManyNatRules, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallOneToOneNatRules', function() {
        it('should call updateNetworkApplianceFirewallOneToOneNatRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallOneToOneNatRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceFirewallOneToOneNatRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallOneToOneNatRules();
          updateNetworkApplianceFirewallOneToOneNatRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalloneToOneNatRulesRules()];
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].name = "";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].publicIp = "";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].lanIp = "";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].uplink = "internet1";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].allowedInbound = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalloneToOneNatRulesAllowedInbound()];
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].allowedInbound[0].protocol = "tcp";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].allowedInbound[0].destinationPorts = [""];
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].allowedInbound[0].allowedIps = [""];

          instance.updateNetworkApplianceFirewallOneToOneNatRules(networkId, updateNetworkApplianceFirewallOneToOneNatRules, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallPortForwardingRules', function() {
        it('should call updateNetworkApplianceFirewallPortForwardingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallPortForwardingRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceFirewallPortForwardingRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallPortForwardingRules();
          updateNetworkApplianceFirewallPortForwardingRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewallportForwardingRulesRules()];
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].name = "";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].lanIp = "";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].uplink = "internet1";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].publicPort = "";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].localPort = "";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].allowedIps = [""];
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].protocol = "tcp";

          instance.updateNetworkApplianceFirewallPortForwardingRules(networkId, updateNetworkApplianceFirewallPortForwardingRules, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidFirewallL3FirewallRules', function() {
        it('should call updateNetworkWirelessSsidFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var opts = {};
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules = new MerakiDashboardApi.UpdateNetworkWirelessSsidFirewallL3FirewallRules();
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumberfirewalll3FirewallRulesRules()];
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].comment = "";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].policy = "allow";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].protocol = "tcp";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].destPort = "";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].destCidr = "";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.allowLanAccess = false;

          instance.updateNetworkWirelessSsidFirewallL3FirewallRules(networkId, _number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidFirewallL7FirewallRules', function() {
        it('should call updateNetworkWirelessSsidFirewallL7FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidFirewallL7FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var opts = {};
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules = new MerakiDashboardApi.UpdateNetworkWirelessSsidFirewallL7FirewallRules();
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumberfirewalll7FirewallRulesRules()];
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules.rules[0].policy = "deny";
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules.rules[0].type = "application";
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules.rules[0].value = "";

          instance.updateNetworkWirelessSsidFirewallL7FirewallRules(networkId, _number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
