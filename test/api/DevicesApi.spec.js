/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.DevicesApi();
  });

  describe('(package)', function() {
    describe('DevicesApi', function() {
      describe('blinkDeviceLeds', function() {
        it('should call blinkDeviceLeds successfully', function(done) {
          // TODO: uncomment, update parameter values for blinkDeviceLeds call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.blinkDeviceLeds = new MerakiDashboardApi.BlinkDeviceLeds();
          opts.blinkDeviceLeds.duration = 0;
          opts.blinkDeviceLeds.period = 0;
          opts.blinkDeviceLeds.duty = 0;

          instance.blinkDeviceLeds(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('claimNetworkDevices', function() {
        it('should call claimNetworkDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for claimNetworkDevices call
          /*
          var networkId = "networkId_example";
          var claimNetworkDevices = new MerakiDashboardApi.ClaimNetworkDevices();
          claimNetworkDevices.serials = [""];

          instance.claimNetworkDevices(networkId, claimNetworkDevices, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDevice', function() {
        it('should call getDevice successfully', function(done) {
          // TODO: uncomment, update parameter values for getDevice call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDevice(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceClients', function() {
        it('should call getDeviceClients successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceClients call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;

          instance.getDeviceClients(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceLldpCdp', function() {
        it('should call getDeviceLldpCdp successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceLldpCdp call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceLldpCdp(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceLossAndLatencyHistory', function() {
        it('should call getDeviceLossAndLatencyHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceLossAndLatencyHistory call and complete the assertions
          /*
          var serial = "serial_example";
          var ip = "ip_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.resolution = 56;
          opts.uplink = "uplink_example";

          instance.getDeviceLossAndLatencyHistory(serial, ip, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceManagementInterface', function() {
        it('should call getDeviceManagementInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceManagementInterface call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceManagementInterface(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkDevices', function() {
        it('should call getNetworkDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkDevices call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkDevices(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceCellularUsageHistory', function() {
        it('should call getNetworkSmDeviceCellularUsageHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceCellularUsageHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceCellularUsageHistory(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceCerts', function() {
        it('should call getNetworkSmDeviceCerts successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceCerts call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceCerts(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceConnectivity', function() {
        it('should call getNetworkSmDeviceConnectivity successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceConnectivity call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkSmDeviceConnectivity(networkId, deviceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceDesktopLogs', function() {
        it('should call getNetworkSmDeviceDesktopLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceDesktopLogs call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkSmDeviceDesktopLogs(networkId, deviceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceDeviceCommandLogs', function() {
        it('should call getNetworkSmDeviceDeviceCommandLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceDeviceCommandLogs call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkSmDeviceDeviceCommandLogs(networkId, deviceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceDeviceProfiles', function() {
        it('should call getNetworkSmDeviceDeviceProfiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceDeviceProfiles call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceDeviceProfiles(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceNetworkAdapters', function() {
        it('should call getNetworkSmDeviceNetworkAdapters successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceNetworkAdapters call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceNetworkAdapters(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDevicePerformanceHistory', function() {
        it('should call getNetworkSmDevicePerformanceHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDevicePerformanceHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkSmDevicePerformanceHistory(networkId, deviceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceRestrictions', function() {
        it('should call getNetworkSmDeviceRestrictions successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceRestrictions call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceRestrictions(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceSecurityCenters', function() {
        it('should call getNetworkSmDeviceSecurityCenters successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceSecurityCenters call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceSecurityCenters(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceSoftwares', function() {
        it('should call getNetworkSmDeviceSoftwares successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceSoftwares call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceSoftwares(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceWlanLists', function() {
        it('should call getNetworkSmDeviceWlanLists successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceWlanLists call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceWlanLists(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessDevicesConnectionStats', function() {
        it('should call getNetworkWirelessDevicesConnectionStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessDevicesConnectionStats call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.band = "band_example";
          opts.ssid = 56;
          opts.vlan = 56;
          opts.apTag = "apTag_example";

          instance.getNetworkWirelessDevicesConnectionStats(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessDevicesLatencyStats', function() {
        it('should call getNetworkWirelessDevicesLatencyStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessDevicesLatencyStats call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.band = "band_example";
          opts.ssid = 56;
          opts.vlan = 56;
          opts.apTag = "apTag_example";
          opts.fields = "fields_example";

          instance.getNetworkWirelessDevicesLatencyStats(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationDevices', function() {
        it('should call getOrganizationDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationDevices call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.configurationUpdatedAfter = "configurationUpdatedAfter_example";

          instance.getOrganizationDevices(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationDevicesStatuses', function() {
        it('should call getOrganizationDevicesStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationDevicesStatuses call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getOrganizationDevicesStatuses(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationDevicesUplinksLossAndLatency', function() {
        it('should call getOrganizationDevicesUplinksLossAndLatency successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationDevicesUplinksLossAndLatency call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.uplink = "uplink_example";
          opts.ip = "ip_example";

          instance.getOrganizationDevicesUplinksLossAndLatency(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('rebootDevice', function() {
        it('should call rebootDevice successfully', function(done) {
          // TODO: uncomment, update parameter values for rebootDevice call and complete the assertions
          /*
          var serial = "serial_example";

          instance.rebootDevice(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('refreshNetworkSmDeviceDetails', function() {
        it('should call refreshNetworkSmDeviceDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for refreshNetworkSmDeviceDetails call
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.refreshNetworkSmDeviceDetails(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeNetworkDevices', function() {
        it('should call removeNetworkDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for removeNetworkDevices call
          /*
          var networkId = "networkId_example";
          var removeNetworkDevices = new MerakiDashboardApi.RemoveNetworkDevices();
          removeNetworkDevices.serial = "";

          instance.removeNetworkDevices(networkId, removeNetworkDevices, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unenrollNetworkSmDevice', function() {
        it('should call unenrollNetworkSmDevice successfully', function(done) {
          // TODO: uncomment, update parameter values for unenrollNetworkSmDevice call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.unenrollNetworkSmDevice(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDevice', function() {
        it('should call updateDevice successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDevice call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDevice = new MerakiDashboardApi.UpdateDevice();
          opts.updateDevice.name = "";
          opts.updateDevice.tags = [""];
          opts.updateDevice.lat = 0.0;
          opts.updateDevice.lng = 0.0;
          opts.updateDevice.address = "";
          opts.updateDevice.notes = "";
          opts.updateDevice.moveMapMarker = false;
          opts.updateDevice.switchProfileId = "";
          opts.updateDevice.floorPlanId = "";

          instance.updateDevice(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceManagementInterface', function() {
        it('should call updateDeviceManagementInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceManagementInterface call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDeviceManagementInterface = new MerakiDashboardApi.UpdateDeviceManagementInterface();
          opts.updateDeviceManagementInterface.wan1 = new MerakiDashboardApi.DevicesserialmanagementInterfaceWan1();
          opts.updateDeviceManagementInterface.wan1.wanEnabled = "enabled";
          opts.updateDeviceManagementInterface.wan1.usingStaticIp = false;
          opts.updateDeviceManagementInterface.wan1.staticIp = "";
          opts.updateDeviceManagementInterface.wan1.staticGatewayIp = "";
          opts.updateDeviceManagementInterface.wan1.staticSubnetMask = "";
          opts.updateDeviceManagementInterface.wan1.staticDns = [""];
          opts.updateDeviceManagementInterface.wan1.vlan = 0;
          opts.updateDeviceManagementInterface.wan2 = new MerakiDashboardApi.DevicesserialmanagementInterfaceWan2();
          opts.updateDeviceManagementInterface.wan2.wanEnabled = "enabled";
          opts.updateDeviceManagementInterface.wan2.usingStaticIp = false;
          opts.updateDeviceManagementInterface.wan2.staticIp = "";
          opts.updateDeviceManagementInterface.wan2.staticGatewayIp = "";
          opts.updateDeviceManagementInterface.wan2.staticSubnetMask = "";
          opts.updateDeviceManagementInterface.wan2.staticDns = [""];
          opts.updateDeviceManagementInterface.wan2.vlan = 0;

          instance.updateDeviceManagementInterface(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSmDevicesFields', function() {
        it('should call updateNetworkSmDevicesFields successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSmDevicesFields call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkSmDevicesFields = new MerakiDashboardApi.UpdateNetworkSmDevicesFields();
          updateNetworkSmDevicesFields.wifiMac = "";
          updateNetworkSmDevicesFields.id = "";
          updateNetworkSmDevicesFields.serial = "";
          updateNetworkSmDevicesFields.deviceFields = new MerakiDashboardApi.NetworksnetworkIdsmdevicesfieldsDeviceFields();
          updateNetworkSmDevicesFields.deviceFields.name = "";
          updateNetworkSmDevicesFields.deviceFields.notes = "";

          instance.updateNetworkSmDevicesFields(networkId, updateNetworkSmDevicesFields, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('wipeNetworkSmDevices', function() {
        it('should call wipeNetworkSmDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for wipeNetworkSmDevices call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.wipeNetworkSmDevices = new MerakiDashboardApi.WipeNetworkSmDevices();
          opts.wipeNetworkSmDevices.wifiMac = "";
          opts.wipeNetworkSmDevices.id = "";
          opts.wipeNetworkSmDevices.serial = "";
          opts.wipeNetworkSmDevices.pin = 0;

          instance.wipeNetworkSmDevices(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
