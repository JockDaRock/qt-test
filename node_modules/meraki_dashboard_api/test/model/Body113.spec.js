/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 August, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.Body113();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Body113', function() {
    it('should create an instance of Body113', function() {
      // uncomment below and update the code to test Body113
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be.a(MerakiDashboardApi.Body113);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property authMode (base name: "authMode")', function() {
      // uncomment below and update the code to test the property authMode
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property enterpriseAdminAccess (base name: "enterpriseAdminAccess")', function() {
      // uncomment below and update the code to test the property enterpriseAdminAccess
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property encryptionMode (base name: "encryptionMode")', function() {
      // uncomment below and update the code to test the property encryptionMode
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property psk (base name: "psk")', function() {
      // uncomment below and update the code to test the property psk
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property wpaEncryptionMode (base name: "wpaEncryptionMode")', function() {
      // uncomment below and update the code to test the property wpaEncryptionMode
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property splashPage (base name: "splashPage")', function() {
      // uncomment below and update the code to test the property splashPage
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property radiusServers (base name: "radiusServers")', function() {
      // uncomment below and update the code to test the property radiusServers
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property radiusProxyEnabled (base name: "radiusProxyEnabled")', function() {
      // uncomment below and update the code to test the property radiusProxyEnabled
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property radiusCoaEnabled (base name: "radiusCoaEnabled")', function() {
      // uncomment below and update the code to test the property radiusCoaEnabled
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property radiusFailoverPolicy (base name: "radiusFailoverPolicy")', function() {
      // uncomment below and update the code to test the property radiusFailoverPolicy
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property radiusLoadBalancingPolicy (base name: "radiusLoadBalancingPolicy")', function() {
      // uncomment below and update the code to test the property radiusLoadBalancingPolicy
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property radiusAccountingEnabled (base name: "radiusAccountingEnabled")', function() {
      // uncomment below and update the code to test the property radiusAccountingEnabled
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property radiusAccountingServers (base name: "radiusAccountingServers")', function() {
      // uncomment below and update the code to test the property radiusAccountingServers
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property radiusAttributeForGroupPolicies (base name: "radiusAttributeForGroupPolicies")', function() {
      // uncomment below and update the code to test the property radiusAttributeForGroupPolicies
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property ipAssignmentMode (base name: "ipAssignmentMode")', function() {
      // uncomment below and update the code to test the property ipAssignmentMode
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property useVlanTagging (base name: "useVlanTagging")', function() {
      // uncomment below and update the code to test the property useVlanTagging
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property concentratorNetworkId (base name: "concentratorNetworkId")', function() {
      // uncomment below and update the code to test the property concentratorNetworkId
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property vlanId (base name: "vlanId")', function() {
      // uncomment below and update the code to test the property vlanId
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property defaultVlanId (base name: "defaultVlanId")', function() {
      // uncomment below and update the code to test the property defaultVlanId
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property apTagsAndVlanIds (base name: "apTagsAndVlanIds")', function() {
      // uncomment below and update the code to test the property apTagsAndVlanIds
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property walledGardenEnabled (base name: "walledGardenEnabled")', function() {
      // uncomment below and update the code to test the property walledGardenEnabled
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property walledGardenRanges (base name: "walledGardenRanges")', function() {
      // uncomment below and update the code to test the property walledGardenRanges
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property radiusOverride (base name: "radiusOverride")', function() {
      // uncomment below and update the code to test the property radiusOverride
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property radiusGuestVlanEnabled (base name: "radiusGuestVlanEnabled")', function() {
      // uncomment below and update the code to test the property radiusGuestVlanEnabled
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property radiusGuestVlanId (base name: "radiusGuestVlanId")', function() {
      // uncomment below and update the code to test the property radiusGuestVlanId
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property minBitrate (base name: "minBitrate")', function() {
      // uncomment below and update the code to test the property minBitrate
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property bandSelection (base name: "bandSelection")', function() {
      // uncomment below and update the code to test the property bandSelection
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property perClientBandwidthLimitUp (base name: "perClientBandwidthLimitUp")', function() {
      // uncomment below and update the code to test the property perClientBandwidthLimitUp
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property perClientBandwidthLimitDown (base name: "perClientBandwidthLimitDown")', function() {
      // uncomment below and update the code to test the property perClientBandwidthLimitDown
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property perSsidBandwidthLimitUp (base name: "perSsidBandwidthLimitUp")', function() {
      // uncomment below and update the code to test the property perSsidBandwidthLimitUp
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property perSsidBandwidthLimitDown (base name: "perSsidBandwidthLimitDown")', function() {
      // uncomment below and update the code to test the property perSsidBandwidthLimitDown
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property lanIsolationEnabled (base name: "lanIsolationEnabled")', function() {
      // uncomment below and update the code to test the property lanIsolationEnabled
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property visible (base name: "visible")', function() {
      // uncomment below and update the code to test the property visible
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property availableOnAllAps (base name: "availableOnAllAps")', function() {
      // uncomment below and update the code to test the property availableOnAllAps
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

    it('should have the property availabilityTags (base name: "availabilityTags")', function() {
      // uncomment below and update the code to test the property availabilityTags
      //var instane = new MerakiDashboardApi.Body113();
      //expect(instance).to.be();
    });

  });

}));
