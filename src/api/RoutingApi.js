/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateDeviceSwitchRoutingInterface', 'model/CreateDeviceSwitchRoutingStaticRoute', 'model/CreateNetworkSwitchRoutingMulticastRendezvousPoint', 'model/CreateNetworkSwitchStackRoutingInterface', 'model/CreateNetworkSwitchStackRoutingStaticRoute', 'model/UpdateDeviceSwitchRoutingInterface', 'model/UpdateDeviceSwitchRoutingInterfaceDhcp', 'model/UpdateDeviceSwitchRoutingStaticRoute', 'model/UpdateNetworkSwitchRoutingMulticast', 'model/UpdateNetworkSwitchRoutingMulticastRendezvousPoint', 'model/UpdateNetworkSwitchRoutingOspf', 'model/UpdateNetworkSwitchStackRoutingInterface', 'model/UpdateNetworkSwitchStackRoutingInterfaceDhcp', 'model/UpdateNetworkSwitchStackRoutingStaticRoute'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateDeviceSwitchRoutingInterface'), require('../model/CreateDeviceSwitchRoutingStaticRoute'), require('../model/CreateNetworkSwitchRoutingMulticastRendezvousPoint'), require('../model/CreateNetworkSwitchStackRoutingInterface'), require('../model/CreateNetworkSwitchStackRoutingStaticRoute'), require('../model/UpdateDeviceSwitchRoutingInterface'), require('../model/UpdateDeviceSwitchRoutingInterfaceDhcp'), require('../model/UpdateDeviceSwitchRoutingStaticRoute'), require('../model/UpdateNetworkSwitchRoutingMulticast'), require('../model/UpdateNetworkSwitchRoutingMulticastRendezvousPoint'), require('../model/UpdateNetworkSwitchRoutingOspf'), require('../model/UpdateNetworkSwitchStackRoutingInterface'), require('../model/UpdateNetworkSwitchStackRoutingInterfaceDhcp'), require('../model/UpdateNetworkSwitchStackRoutingStaticRoute'));
  } else {
    // Browser globals (root is window)
    if (!root.MerakiDashboardApi) {
      root.MerakiDashboardApi = {};
    }
    root.MerakiDashboardApi.RoutingApi = factory(root.MerakiDashboardApi.ApiClient, root.MerakiDashboardApi.CreateDeviceSwitchRoutingInterface, root.MerakiDashboardApi.CreateDeviceSwitchRoutingStaticRoute, root.MerakiDashboardApi.CreateNetworkSwitchRoutingMulticastRendezvousPoint, root.MerakiDashboardApi.CreateNetworkSwitchStackRoutingInterface, root.MerakiDashboardApi.CreateNetworkSwitchStackRoutingStaticRoute, root.MerakiDashboardApi.UpdateDeviceSwitchRoutingInterface, root.MerakiDashboardApi.UpdateDeviceSwitchRoutingInterfaceDhcp, root.MerakiDashboardApi.UpdateDeviceSwitchRoutingStaticRoute, root.MerakiDashboardApi.UpdateNetworkSwitchRoutingMulticast, root.MerakiDashboardApi.UpdateNetworkSwitchRoutingMulticastRendezvousPoint, root.MerakiDashboardApi.UpdateNetworkSwitchRoutingOspf, root.MerakiDashboardApi.UpdateNetworkSwitchStackRoutingInterface, root.MerakiDashboardApi.UpdateNetworkSwitchStackRoutingInterfaceDhcp, root.MerakiDashboardApi.UpdateNetworkSwitchStackRoutingStaticRoute);
  }
}(this, function(ApiClient, CreateDeviceSwitchRoutingInterface, CreateDeviceSwitchRoutingStaticRoute, CreateNetworkSwitchRoutingMulticastRendezvousPoint, CreateNetworkSwitchStackRoutingInterface, CreateNetworkSwitchStackRoutingStaticRoute, UpdateDeviceSwitchRoutingInterface, UpdateDeviceSwitchRoutingInterfaceDhcp, UpdateDeviceSwitchRoutingStaticRoute, UpdateNetworkSwitchRoutingMulticast, UpdateNetworkSwitchRoutingMulticastRendezvousPoint, UpdateNetworkSwitchRoutingOspf, UpdateNetworkSwitchStackRoutingInterface, UpdateNetworkSwitchStackRoutingInterfaceDhcp, UpdateNetworkSwitchStackRoutingStaticRoute) {
  'use strict';

  /**
   * Routing service.
   * @module api/RoutingApi
   * @version 1.1.0
   */

  /**
   * Constructs a new RoutingApi. 
   * @alias module:api/RoutingApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createDeviceSwitchRoutingInterface operation.
     * @callback module:api/RoutingApi~createDeviceSwitchRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 interface for a switch
     * Create a layer 3 interface for a switch
     * @param {String} serial 
     * @param {module:model/CreateDeviceSwitchRoutingInterface} createDeviceSwitchRoutingInterface 
     * @param {module:api/RoutingApi~createDeviceSwitchRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createDeviceSwitchRoutingInterface = function(serial, createDeviceSwitchRoutingInterface, callback) {
      var postBody = createDeviceSwitchRoutingInterface;

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling createDeviceSwitchRoutingInterface");
      }

      // verify the required parameter 'createDeviceSwitchRoutingInterface' is set
      if (createDeviceSwitchRoutingInterface === undefined || createDeviceSwitchRoutingInterface === null) {
        throw new Error("Missing the required parameter 'createDeviceSwitchRoutingInterface' when calling createDeviceSwitchRoutingInterface");
      }


      var pathParams = {
        'serial': serial
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeviceSwitchRoutingStaticRoute operation.
     * @callback module:api/RoutingApi~createDeviceSwitchRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 static route for a switch
     * Create a layer 3 static route for a switch
     * @param {String} serial 
     * @param {module:model/CreateDeviceSwitchRoutingStaticRoute} createDeviceSwitchRoutingStaticRoute 
     * @param {module:api/RoutingApi~createDeviceSwitchRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createDeviceSwitchRoutingStaticRoute = function(serial, createDeviceSwitchRoutingStaticRoute, callback) {
      var postBody = createDeviceSwitchRoutingStaticRoute;

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling createDeviceSwitchRoutingStaticRoute");
      }

      // verify the required parameter 'createDeviceSwitchRoutingStaticRoute' is set
      if (createDeviceSwitchRoutingStaticRoute === undefined || createDeviceSwitchRoutingStaticRoute === null) {
        throw new Error("Missing the required parameter 'createDeviceSwitchRoutingStaticRoute' when calling createDeviceSwitchRoutingStaticRoute");
      }


      var pathParams = {
        'serial': serial
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchRoutingMulticastRendezvousPoint operation.
     * @callback module:api/RoutingApi~createNetworkSwitchRoutingMulticastRendezvousPointCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a multicast rendezvous point
     * Create a multicast rendezvous point
     * @param {String} networkId 
     * @param {module:model/CreateNetworkSwitchRoutingMulticastRendezvousPoint} createNetworkSwitchRoutingMulticastRendezvousPoint 
     * @param {module:api/RoutingApi~createNetworkSwitchRoutingMulticastRendezvousPointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createNetworkSwitchRoutingMulticastRendezvousPoint = function(networkId, createNetworkSwitchRoutingMulticastRendezvousPoint, callback) {
      var postBody = createNetworkSwitchRoutingMulticastRendezvousPoint;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchRoutingMulticastRendezvousPoint");
      }

      // verify the required parameter 'createNetworkSwitchRoutingMulticastRendezvousPoint' is set
      if (createNetworkSwitchRoutingMulticastRendezvousPoint === undefined || createNetworkSwitchRoutingMulticastRendezvousPoint === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchRoutingMulticastRendezvousPoint' when calling createNetworkSwitchRoutingMulticastRendezvousPoint");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchStackRoutingInterface operation.
     * @callback module:api/RoutingApi~createNetworkSwitchStackRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 interface for a switch stack
     * Create a layer 3 interface for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/CreateNetworkSwitchStackRoutingInterface} createNetworkSwitchStackRoutingInterface 
     * @param {module:api/RoutingApi~createNetworkSwitchStackRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createNetworkSwitchStackRoutingInterface = function(networkId, switchStackId, createNetworkSwitchStackRoutingInterface, callback) {
      var postBody = createNetworkSwitchStackRoutingInterface;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingInterface");
      }

      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingInterface");
      }

      // verify the required parameter 'createNetworkSwitchStackRoutingInterface' is set
      if (createNetworkSwitchStackRoutingInterface === undefined || createNetworkSwitchStackRoutingInterface === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchStackRoutingInterface' when calling createNetworkSwitchStackRoutingInterface");
      }


      var pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSwitchStackRoutingStaticRoute operation.
     * @callback module:api/RoutingApi~createNetworkSwitchStackRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer 3 static route for a switch stack
     * Create a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:model/CreateNetworkSwitchStackRoutingStaticRoute} createNetworkSwitchStackRoutingStaticRoute 
     * @param {module:api/RoutingApi~createNetworkSwitchStackRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createNetworkSwitchStackRoutingStaticRoute = function(networkId, switchStackId, createNetworkSwitchStackRoutingStaticRoute, callback) {
      var postBody = createNetworkSwitchStackRoutingStaticRoute;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling createNetworkSwitchStackRoutingStaticRoute");
      }

      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling createNetworkSwitchStackRoutingStaticRoute");
      }

      // verify the required parameter 'createNetworkSwitchStackRoutingStaticRoute' is set
      if (createNetworkSwitchStackRoutingStaticRoute === undefined || createNetworkSwitchStackRoutingStaticRoute === null) {
        throw new Error("Missing the required parameter 'createNetworkSwitchStackRoutingStaticRoute' when calling createNetworkSwitchStackRoutingStaticRoute");
      }


      var pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeviceSwitchRoutingInterface operation.
     * @callback module:api/RoutingApi~deleteDeviceSwitchRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 interface from the switch
     * Delete a layer 3 interface from the switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {module:api/RoutingApi~deleteDeviceSwitchRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDeviceSwitchRoutingInterface = function(serial, interfaceId, callback) {
      var postBody = null;

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling deleteDeviceSwitchRoutingInterface");
      }

      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling deleteDeviceSwitchRoutingInterface");
      }


      var pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeviceSwitchRoutingStaticRoute operation.
     * @callback module:api/RoutingApi~deleteDeviceSwitchRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 static route for a switch
     * Delete a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {module:api/RoutingApi~deleteDeviceSwitchRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDeviceSwitchRoutingStaticRoute = function(serial, staticRouteId, callback) {
      var postBody = null;

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling deleteDeviceSwitchRoutingStaticRoute");
      }

      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteDeviceSwitchRoutingStaticRoute");
      }


      var pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchRoutingMulticastRendezvousPoint operation.
     * @callback module:api/RoutingApi~deleteNetworkSwitchRoutingMulticastRendezvousPointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a multicast rendezvous point
     * Delete a multicast rendezvous point
     * @param {String} networkId 
     * @param {String} rendezvousPointId 
     * @param {module:api/RoutingApi~deleteNetworkSwitchRoutingMulticastRendezvousPointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNetworkSwitchRoutingMulticastRendezvousPoint = function(networkId, rendezvousPointId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchRoutingMulticastRendezvousPoint");
      }

      // verify the required parameter 'rendezvousPointId' is set
      if (rendezvousPointId === undefined || rendezvousPointId === null) {
        throw new Error("Missing the required parameter 'rendezvousPointId' when calling deleteNetworkSwitchRoutingMulticastRendezvousPoint");
      }


      var pathParams = {
        'networkId': networkId,
        'rendezvousPointId': rendezvousPointId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchStackRoutingInterface operation.
     * @callback module:api/RoutingApi~deleteNetworkSwitchStackRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 interface from a switch stack
     * Delete a layer 3 interface from a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/RoutingApi~deleteNetworkSwitchStackRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNetworkSwitchStackRoutingInterface = function(networkId, switchStackId, interfaceId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingInterface");
      }

      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingInterface");
      }

      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling deleteNetworkSwitchStackRoutingInterface");
      }


      var pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSwitchStackRoutingStaticRoute operation.
     * @callback module:api/RoutingApi~deleteNetworkSwitchStackRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer 3 static route for a switch stack
     * Delete a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {module:api/RoutingApi~deleteNetworkSwitchStackRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNetworkSwitchStackRoutingStaticRoute = function(networkId, switchStackId, staticRouteId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling deleteNetworkSwitchStackRoutingStaticRoute");
      }

      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling deleteNetworkSwitchStackRoutingStaticRoute");
      }

      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling deleteNetworkSwitchStackRoutingStaticRoute");
      }


      var pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingInterface operation.
     * @callback module:api/RoutingApi~getDeviceSwitchRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface for a switch
     * Return a layer 3 interface for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {module:api/RoutingApi~getDeviceSwitchRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getDeviceSwitchRoutingInterface = function(serial, interfaceId, callback) {
      var postBody = null;

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterface");
      }

      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getDeviceSwitchRoutingInterface");
      }


      var pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingInterfaceDhcp operation.
     * @callback module:api/RoutingApi~getDeviceSwitchRoutingInterfaceDhcpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface DHCP configuration for a switch
     * Return a layer 3 interface DHCP configuration for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {module:api/RoutingApi~getDeviceSwitchRoutingInterfaceDhcpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getDeviceSwitchRoutingInterfaceDhcp = function(serial, interfaceId, callback) {
      var postBody = null;

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterfaceDhcp");
      }

      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getDeviceSwitchRoutingInterfaceDhcp");
      }


      var pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingInterfaces operation.
     * @callback module:api/RoutingApi~getDeviceSwitchRoutingInterfacesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 interfaces for a switch
     * List layer 3 interfaces for a switch
     * @param {String} serial 
     * @param {module:api/RoutingApi~getDeviceSwitchRoutingInterfacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getDeviceSwitchRoutingInterfaces = function(serial, callback) {
      var postBody = null;

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingInterfaces");
      }


      var pathParams = {
        'serial': serial
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingStaticRoute operation.
     * @callback module:api/RoutingApi~getDeviceSwitchRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 static route for a switch
     * Return a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {module:api/RoutingApi~getDeviceSwitchRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getDeviceSwitchRoutingStaticRoute = function(serial, staticRouteId, callback) {
      var postBody = null;

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingStaticRoute");
      }

      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getDeviceSwitchRoutingStaticRoute");
      }


      var pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchRoutingStaticRoutes operation.
     * @callback module:api/RoutingApi~getDeviceSwitchRoutingStaticRoutesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 static routes for a switch
     * List layer 3 static routes for a switch
     * @param {String} serial 
     * @param {module:api/RoutingApi~getDeviceSwitchRoutingStaticRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getDeviceSwitchRoutingStaticRoutes = function(serial, callback) {
      var postBody = null;

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchRoutingStaticRoutes");
      }


      var pathParams = {
        'serial': serial
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingMulticast operation.
     * @callback module:api/RoutingApi~getNetworkSwitchRoutingMulticastCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return multicast settings for a network
     * Return multicast settings for a network
     * @param {String} networkId 
     * @param {module:api/RoutingApi~getNetworkSwitchRoutingMulticastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkSwitchRoutingMulticast = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticast");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingMulticastRendezvousPoint operation.
     * @callback module:api/RoutingApi~getNetworkSwitchRoutingMulticastRendezvousPointCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a multicast rendezvous point
     * Return a multicast rendezvous point
     * @param {String} networkId 
     * @param {String} rendezvousPointId 
     * @param {module:api/RoutingApi~getNetworkSwitchRoutingMulticastRendezvousPointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkSwitchRoutingMulticastRendezvousPoint = function(networkId, rendezvousPointId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticastRendezvousPoint");
      }

      // verify the required parameter 'rendezvousPointId' is set
      if (rendezvousPointId === undefined || rendezvousPointId === null) {
        throw new Error("Missing the required parameter 'rendezvousPointId' when calling getNetworkSwitchRoutingMulticastRendezvousPoint");
      }


      var pathParams = {
        'networkId': networkId,
        'rendezvousPointId': rendezvousPointId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingMulticastRendezvousPoints operation.
     * @callback module:api/RoutingApi~getNetworkSwitchRoutingMulticastRendezvousPointsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List multicast rendezvous points
     * List multicast rendezvous points
     * @param {String} networkId 
     * @param {module:api/RoutingApi~getNetworkSwitchRoutingMulticastRendezvousPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkSwitchRoutingMulticastRendezvousPoints = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingMulticastRendezvousPoints");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchRoutingOspf operation.
     * @callback module:api/RoutingApi~getNetworkSwitchRoutingOspfCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return layer 3 OSPF routing configuration
     * Return layer 3 OSPF routing configuration
     * @param {String} networkId 
     * @param {module:api/RoutingApi~getNetworkSwitchRoutingOspfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkSwitchRoutingOspf = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchRoutingOspf");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/ospf', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterface operation.
     * @callback module:api/RoutingApi~getNetworkSwitchStackRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface from a switch stack
     * Return a layer 3 interface from a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/RoutingApi~getNetworkSwitchStackRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkSwitchStackRoutingInterface = function(networkId, switchStackId, interfaceId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterface");
      }

      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterface");
      }

      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterface");
      }


      var pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterfaceDhcp operation.
     * @callback module:api/RoutingApi~getNetworkSwitchStackRoutingInterfaceDhcpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     * Return a layer 3 interface DHCP configuration for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {module:api/RoutingApi~getNetworkSwitchStackRoutingInterfaceDhcpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkSwitchStackRoutingInterfaceDhcp = function(networkId, switchStackId, interfaceId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaceDhcp");
      }

      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaceDhcp");
      }

      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling getNetworkSwitchStackRoutingInterfaceDhcp");
      }


      var pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingInterfaces operation.
     * @callback module:api/RoutingApi~getNetworkSwitchStackRoutingInterfacesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 interfaces for a switch stack
     * List layer 3 interfaces for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/RoutingApi~getNetworkSwitchStackRoutingInterfacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkSwitchStackRoutingInterfaces = function(networkId, switchStackId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingInterfaces");
      }

      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingInterfaces");
      }


      var pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingStaticRoute operation.
     * @callback module:api/RoutingApi~getNetworkSwitchStackRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a layer 3 static route for a switch stack
     * Return a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {module:api/RoutingApi~getNetworkSwitchStackRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkSwitchStackRoutingStaticRoute = function(networkId, switchStackId, staticRouteId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoute");
      }

      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoute");
      }

      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling getNetworkSwitchStackRoutingStaticRoute");
      }


      var pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSwitchStackRoutingStaticRoutes operation.
     * @callback module:api/RoutingApi~getNetworkSwitchStackRoutingStaticRoutesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer 3 static routes for a switch stack
     * List layer 3 static routes for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {module:api/RoutingApi~getNetworkSwitchStackRoutingStaticRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkSwitchStackRoutingStaticRoutes = function(networkId, switchStackId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkSwitchStackRoutingStaticRoutes");
      }

      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling getNetworkSwitchStackRoutingStaticRoutes");
      }


      var pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchRoutingInterface operation.
     * @callback module:api/RoutingApi~updateDeviceSwitchRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface for a switch
     * Update a layer 3 interface for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingInterface} opts.updateDeviceSwitchRoutingInterface 
     * @param {module:api/RoutingApi~updateDeviceSwitchRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateDeviceSwitchRoutingInterface = function(serial, interfaceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateDeviceSwitchRoutingInterface'];

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingInterface");
      }

      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateDeviceSwitchRoutingInterface");
      }


      var pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchRoutingInterfaceDhcp operation.
     * @callback module:api/RoutingApi~updateDeviceSwitchRoutingInterfaceDhcpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface DHCP configuration for a switch
     * Update a layer 3 interface DHCP configuration for a switch
     * @param {String} serial 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingInterfaceDhcp} opts.updateDeviceSwitchRoutingInterfaceDhcp 
     * @param {module:api/RoutingApi~updateDeviceSwitchRoutingInterfaceDhcpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateDeviceSwitchRoutingInterfaceDhcp = function(serial, interfaceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateDeviceSwitchRoutingInterfaceDhcp'];

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingInterfaceDhcp");
      }

      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateDeviceSwitchRoutingInterfaceDhcp");
      }


      var pathParams = {
        'serial': serial,
        'interfaceId': interfaceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchRoutingStaticRoute operation.
     * @callback module:api/RoutingApi~updateDeviceSwitchRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 static route for a switch
     * Update a layer 3 static route for a switch
     * @param {String} serial 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchRoutingStaticRoute} opts.updateDeviceSwitchRoutingStaticRoute 
     * @param {module:api/RoutingApi~updateDeviceSwitchRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateDeviceSwitchRoutingStaticRoute = function(serial, staticRouteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateDeviceSwitchRoutingStaticRoute'];

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchRoutingStaticRoute");
      }

      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateDeviceSwitchRoutingStaticRoute");
      }


      var pathParams = {
        'serial': serial,
        'staticRouteId': staticRouteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchRoutingMulticast operation.
     * @callback module:api/RoutingApi~updateNetworkSwitchRoutingMulticastCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update multicast settings for a network
     * Update multicast settings for a network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchRoutingMulticast} opts.updateNetworkSwitchRoutingMulticast 
     * @param {module:api/RoutingApi~updateNetworkSwitchRoutingMulticastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkSwitchRoutingMulticast = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkSwitchRoutingMulticast'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingMulticast");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchRoutingMulticastRendezvousPoint operation.
     * @callback module:api/RoutingApi~updateNetworkSwitchRoutingMulticastRendezvousPointCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a multicast rendezvous point
     * Update a multicast rendezvous point
     * @param {String} networkId 
     * @param {String} rendezvousPointId 
     * @param {module:model/UpdateNetworkSwitchRoutingMulticastRendezvousPoint} updateNetworkSwitchRoutingMulticastRendezvousPoint 
     * @param {module:api/RoutingApi~updateNetworkSwitchRoutingMulticastRendezvousPointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkSwitchRoutingMulticastRendezvousPoint = function(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPoint, callback) {
      var postBody = updateNetworkSwitchRoutingMulticastRendezvousPoint;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint");
      }

      // verify the required parameter 'rendezvousPointId' is set
      if (rendezvousPointId === undefined || rendezvousPointId === null) {
        throw new Error("Missing the required parameter 'rendezvousPointId' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint");
      }

      // verify the required parameter 'updateNetworkSwitchRoutingMulticastRendezvousPoint' is set
      if (updateNetworkSwitchRoutingMulticastRendezvousPoint === undefined || updateNetworkSwitchRoutingMulticastRendezvousPoint === null) {
        throw new Error("Missing the required parameter 'updateNetworkSwitchRoutingMulticastRendezvousPoint' when calling updateNetworkSwitchRoutingMulticastRendezvousPoint");
      }


      var pathParams = {
        'networkId': networkId,
        'rendezvousPointId': rendezvousPointId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchRoutingOspf operation.
     * @callback module:api/RoutingApi~updateNetworkSwitchRoutingOspfCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update layer 3 OSPF routing configuration
     * Update layer 3 OSPF routing configuration
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchRoutingOspf} opts.updateNetworkSwitchRoutingOspf 
     * @param {module:api/RoutingApi~updateNetworkSwitchRoutingOspfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkSwitchRoutingOspf = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkSwitchRoutingOspf'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchRoutingOspf");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/routing/ospf', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingInterface operation.
     * @callback module:api/RoutingApi~updateNetworkSwitchStackRoutingInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface for a switch stack
     * Update a layer 3 interface for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStackRoutingInterface} opts.updateNetworkSwitchStackRoutingInterface 
     * @param {module:api/RoutingApi~updateNetworkSwitchStackRoutingInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkSwitchStackRoutingInterface = function(networkId, switchStackId, interfaceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkSwitchStackRoutingInterface'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterface");
      }

      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterface");
      }

      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterface");
      }


      var pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingInterfaceDhcp operation.
     * @callback module:api/RoutingApi~updateNetworkSwitchStackRoutingInterfaceDhcpCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     * Update a layer 3 interface DHCP configuration for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} interfaceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStackRoutingInterfaceDhcp} opts.updateNetworkSwitchStackRoutingInterfaceDhcp 
     * @param {module:api/RoutingApi~updateNetworkSwitchStackRoutingInterfaceDhcpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkSwitchStackRoutingInterfaceDhcp = function(networkId, switchStackId, interfaceId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkSwitchStackRoutingInterfaceDhcp'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp");
      }

      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp");
      }

      // verify the required parameter 'interfaceId' is set
      if (interfaceId === undefined || interfaceId === null) {
        throw new Error("Missing the required parameter 'interfaceId' when calling updateNetworkSwitchStackRoutingInterfaceDhcp");
      }


      var pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'interfaceId': interfaceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSwitchStackRoutingStaticRoute operation.
     * @callback module:api/RoutingApi~updateNetworkSwitchStackRoutingStaticRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer 3 static route for a switch stack
     * Update a layer 3 static route for a switch stack
     * @param {String} networkId 
     * @param {String} switchStackId 
     * @param {String} staticRouteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkSwitchStackRoutingStaticRoute} opts.updateNetworkSwitchStackRoutingStaticRoute 
     * @param {module:api/RoutingApi~updateNetworkSwitchStackRoutingStaticRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkSwitchStackRoutingStaticRoute = function(networkId, switchStackId, staticRouteId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkSwitchStackRoutingStaticRoute'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkSwitchStackRoutingStaticRoute");
      }

      // verify the required parameter 'switchStackId' is set
      if (switchStackId === undefined || switchStackId === null) {
        throw new Error("Missing the required parameter 'switchStackId' when calling updateNetworkSwitchStackRoutingStaticRoute");
      }

      // verify the required parameter 'staticRouteId' is set
      if (staticRouteId === undefined || staticRouteId === null) {
        throw new Error("Missing the required parameter 'staticRouteId' when calling updateNetworkSwitchStackRoutingStaticRoute");
      }


      var pathParams = {
        'networkId': networkId,
        'switchStackId': switchStackId,
        'staticRouteId': staticRouteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
