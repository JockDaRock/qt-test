/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.SmApi();
  });

  describe('(package)', function() {
    describe('SmApi', function() {
      describe('createNetworkSmBypassActivationLockAttempt', function() {
        it('should call createNetworkSmBypassActivationLockAttempt successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSmBypassActivationLockAttempt call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkSmBypassActivationLockAttempt = new MerakiDashboardApi.CreateNetworkSmBypassActivationLockAttempt();
          createNetworkSmBypassActivationLockAttempt.ids = [""];

          instance.createNetworkSmBypassActivationLockAttempt(networkId, createNetworkSmBypassActivationLockAttempt, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSmTargetGroup', function() {
        it('should call createNetworkSmTargetGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSmTargetGroup call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.createNetworkSmTargetGroup = new MerakiDashboardApi.CreateNetworkSmTargetGroup();
          opts.createNetworkSmTargetGroup.name = "";
          opts.createNetworkSmTargetGroup.scope = "";

          instance.createNetworkSmTargetGroup(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSmTargetGroup', function() {
        it('should call deleteNetworkSmTargetGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSmTargetGroup call
          /*
          var networkId = "networkId_example";
          var targetGroupId = "targetGroupId_example";

          instance.deleteNetworkSmTargetGroup(networkId, targetGroupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmBypassActivationLockAttempt', function() {
        it('should call getNetworkSmBypassActivationLockAttempt successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmBypassActivationLockAttempt call and complete the assertions
          /*
          var networkId = "networkId_example";
          var attemptId = "attemptId_example";

          instance.getNetworkSmBypassActivationLockAttempt(networkId, attemptId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceCellularUsageHistory', function() {
        it('should call getNetworkSmDeviceCellularUsageHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceCellularUsageHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceCellularUsageHistory(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceCerts', function() {
        it('should call getNetworkSmDeviceCerts successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceCerts call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceCerts(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceConnectivity', function() {
        it('should call getNetworkSmDeviceConnectivity successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceConnectivity call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkSmDeviceConnectivity(networkId, deviceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceDesktopLogs', function() {
        it('should call getNetworkSmDeviceDesktopLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceDesktopLogs call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkSmDeviceDesktopLogs(networkId, deviceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceDeviceCommandLogs', function() {
        it('should call getNetworkSmDeviceDeviceCommandLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceDeviceCommandLogs call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkSmDeviceDeviceCommandLogs(networkId, deviceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceDeviceProfiles', function() {
        it('should call getNetworkSmDeviceDeviceProfiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceDeviceProfiles call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceDeviceProfiles(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceNetworkAdapters', function() {
        it('should call getNetworkSmDeviceNetworkAdapters successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceNetworkAdapters call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceNetworkAdapters(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDevicePerformanceHistory', function() {
        it('should call getNetworkSmDevicePerformanceHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDevicePerformanceHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkSmDevicePerformanceHistory(networkId, deviceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceRestrictions', function() {
        it('should call getNetworkSmDeviceRestrictions successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceRestrictions call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceRestrictions(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceSecurityCenters', function() {
        it('should call getNetworkSmDeviceSecurityCenters successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceSecurityCenters call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceSecurityCenters(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceSoftwares', function() {
        it('should call getNetworkSmDeviceSoftwares successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceSoftwares call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceSoftwares(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceWlanLists', function() {
        it('should call getNetworkSmDeviceWlanLists successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceWlanLists call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceWlanLists(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmProfiles', function() {
        it('should call getNetworkSmProfiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmProfiles call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSmProfiles(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmTargetGroup', function() {
        it('should call getNetworkSmTargetGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmTargetGroup call and complete the assertions
          /*
          var networkId = "networkId_example";
          var targetGroupId = "targetGroupId_example";
          var opts = {};
          opts.withDetails = true;

          instance.getNetworkSmTargetGroup(networkId, targetGroupId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmTargetGroups', function() {
        it('should call getNetworkSmTargetGroups successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmTargetGroups call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.withDetails = true;

          instance.getNetworkSmTargetGroups(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmUserDeviceProfiles', function() {
        it('should call getNetworkSmUserDeviceProfiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmUserDeviceProfiles call and complete the assertions
          /*
          var networkId = "networkId_example";
          var userId = "userId_example";

          instance.getNetworkSmUserDeviceProfiles(networkId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmUserSoftwares', function() {
        it('should call getNetworkSmUserSoftwares successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmUserSoftwares call and complete the assertions
          /*
          var networkId = "networkId_example";
          var userId = "userId_example";

          instance.getNetworkSmUserSoftwares(networkId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSmApnsCert', function() {
        it('should call getOrganizationSmApnsCert successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSmApnsCert call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationSmApnsCert(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSmVppAccount', function() {
        it('should call getOrganizationSmVppAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSmVppAccount call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var vppAccountId = "vppAccountId_example";

          instance.getOrganizationSmVppAccount(organizationId, vppAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSmVppAccounts', function() {
        it('should call getOrganizationSmVppAccounts successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSmVppAccounts call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationSmVppAccounts(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('refreshNetworkSmDeviceDetails', function() {
        it('should call refreshNetworkSmDeviceDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for refreshNetworkSmDeviceDetails call
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.refreshNetworkSmDeviceDetails(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unenrollNetworkSmDevice', function() {
        it('should call unenrollNetworkSmDevice successfully', function(done) {
          // TODO: uncomment, update parameter values for unenrollNetworkSmDevice call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.unenrollNetworkSmDevice(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSmDevicesFields', function() {
        it('should call updateNetworkSmDevicesFields successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSmDevicesFields call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkSmDevicesFields = new MerakiDashboardApi.UpdateNetworkSmDevicesFields();
          updateNetworkSmDevicesFields.wifiMac = "";
          updateNetworkSmDevicesFields.id = "";
          updateNetworkSmDevicesFields.serial = "";
          updateNetworkSmDevicesFields.deviceFields = new MerakiDashboardApi.NetworksnetworkIdsmdevicesfieldsDeviceFields();
          updateNetworkSmDevicesFields.deviceFields.name = "";
          updateNetworkSmDevicesFields.deviceFields.notes = "";

          instance.updateNetworkSmDevicesFields(networkId, updateNetworkSmDevicesFields, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSmTargetGroup', function() {
        it('should call updateNetworkSmTargetGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSmTargetGroup call and complete the assertions
          /*
          var networkId = "networkId_example";
          var targetGroupId = "targetGroupId_example";
          var opts = {};
          opts.updateNetworkSmTargetGroup = new MerakiDashboardApi.UpdateNetworkSmTargetGroup();
          opts.updateNetworkSmTargetGroup.name = "";
          opts.updateNetworkSmTargetGroup.scope = "";

          instance.updateNetworkSmTargetGroup(networkId, targetGroupId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('wipeNetworkSmDevices', function() {
        it('should call wipeNetworkSmDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for wipeNetworkSmDevices call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.wipeNetworkSmDevices = new MerakiDashboardApi.WipeNetworkSmDevices();
          opts.wipeNetworkSmDevices.wifiMac = "";
          opts.wipeNetworkSmDevices.id = "";
          opts.wipeNetworkSmDevices.serial = "";
          opts.wipeNetworkSmDevices.pin = 0;

          instance.wipeNetworkSmDevices(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
