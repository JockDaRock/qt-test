/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.CellularGatewayApi();
  });

  describe('(package)', function() {
    describe('CellularGatewayApi', function() {
      describe('getDeviceCellularGatewayLan', function() {
        it('should call getDeviceCellularGatewayLan successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCellularGatewayLan call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceCellularGatewayLan(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceCellularGatewayPortForwardingRules', function() {
        it('should call getDeviceCellularGatewayPortForwardingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCellularGatewayPortForwardingRules call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceCellularGatewayPortForwardingRules(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkCellularGatewayConnectivityMonitoringDestinations', function() {
        it('should call getNetworkCellularGatewayConnectivityMonitoringDestinations successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkCellularGatewayConnectivityMonitoringDestinations call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkCellularGatewayConnectivityMonitoringDestinations(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkCellularGatewayDhcp', function() {
        it('should call getNetworkCellularGatewayDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkCellularGatewayDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkCellularGatewayDhcp(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkCellularGatewaySubnetPool', function() {
        it('should call getNetworkCellularGatewaySubnetPool successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkCellularGatewaySubnetPool call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkCellularGatewaySubnetPool(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkCellularGatewayUplink', function() {
        it('should call getNetworkCellularGatewayUplink successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkCellularGatewayUplink call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkCellularGatewayUplink(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceCellularGatewayLan', function() {
        it('should call updateDeviceCellularGatewayLan successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceCellularGatewayLan call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDeviceCellularGatewayLan = new MerakiDashboardApi.UpdateDeviceCellularGatewayLan();
          opts.updateDeviceCellularGatewayLan.reservedIpRanges = [new MerakiDashboardApi.DevicesserialcellularGatewaylanReservedIpRanges()];
          opts.updateDeviceCellularGatewayLan.reservedIpRanges[0].start = "";
          opts.updateDeviceCellularGatewayLan.reservedIpRanges[0].end = "";
          opts.updateDeviceCellularGatewayLan.reservedIpRanges[0].comment = "";
          opts.updateDeviceCellularGatewayLan.fixedIpAssignments = [new MerakiDashboardApi.DevicesserialcellularGatewaylanFixedIpAssignments()];
          opts.updateDeviceCellularGatewayLan.fixedIpAssignments[0].name = "";
          opts.updateDeviceCellularGatewayLan.fixedIpAssignments[0].ip = "";
          opts.updateDeviceCellularGatewayLan.fixedIpAssignments[0].mac = "";

          instance.updateDeviceCellularGatewayLan(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceCellularGatewayPortForwardingRules', function() {
        it('should call updateDeviceCellularGatewayPortForwardingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceCellularGatewayPortForwardingRules call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDeviceCellularGatewayPortForwardingRules = new MerakiDashboardApi.UpdateDeviceCellularGatewayPortForwardingRules();
          opts.updateDeviceCellularGatewayPortForwardingRules.rules = [new MerakiDashboardApi.DevicesserialcellularGatewayportForwardingRulesRules()];
          opts.updateDeviceCellularGatewayPortForwardingRules.rules[0].name = "";
          opts.updateDeviceCellularGatewayPortForwardingRules.rules[0].lanIp = "";
          opts.updateDeviceCellularGatewayPortForwardingRules.rules[0].publicPort = "";
          opts.updateDeviceCellularGatewayPortForwardingRules.rules[0].localPort = "";
          opts.updateDeviceCellularGatewayPortForwardingRules.rules[0].allowedIps = [""];
          opts.updateDeviceCellularGatewayPortForwardingRules.rules[0].protocol = "";
          opts.updateDeviceCellularGatewayPortForwardingRules.rules[0].access = "";

          instance.updateDeviceCellularGatewayPortForwardingRules(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkCellularGatewayConnectivityMonitoringDestinations', function() {
        it('should call updateNetworkCellularGatewayConnectivityMonitoringDestinations successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkCellularGatewayConnectivityMonitoringDestinations call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkCellularGatewayConnectivityMonitoringDestinations = new MerakiDashboardApi.UpdateNetworkCellularGatewayConnectivityMonitoringDestinations();
          opts.updateNetworkCellularGatewayConnectivityMonitoringDestinations.destinations = [new MerakiDashboardApi.NetworksnetworkIdcellularGatewayconnectivityMonitoringDestinationsDestinations()];
          opts.updateNetworkCellularGatewayConnectivityMonitoringDestinations.destinations[0].ip = "";
          opts.updateNetworkCellularGatewayConnectivityMonitoringDestinations.destinations[0].description = "";
          opts.updateNetworkCellularGatewayConnectivityMonitoringDestinations.destinations[0]._default = false;

          instance.updateNetworkCellularGatewayConnectivityMonitoringDestinations(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkCellularGatewayDhcp', function() {
        it('should call updateNetworkCellularGatewayDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkCellularGatewayDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkCellularGatewayDhcp = new MerakiDashboardApi.UpdateNetworkCellularGatewayDhcp();
          opts.updateNetworkCellularGatewayDhcp.dhcpLeaseTime = "";
          opts.updateNetworkCellularGatewayDhcp.dnsNameservers = "";
          opts.updateNetworkCellularGatewayDhcp.dnsCustomNameservers = [""];

          instance.updateNetworkCellularGatewayDhcp(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkCellularGatewaySubnetPool', function() {
        it('should call updateNetworkCellularGatewaySubnetPool successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkCellularGatewaySubnetPool call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkCellularGatewaySubnetPool = new MerakiDashboardApi.UpdateNetworkCellularGatewaySubnetPool();
          opts.updateNetworkCellularGatewaySubnetPool.mask = 0;
          opts.updateNetworkCellularGatewaySubnetPool.cidr = "";

          instance.updateNetworkCellularGatewaySubnetPool(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkCellularGatewayUplink', function() {
        it('should call updateNetworkCellularGatewayUplink successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkCellularGatewayUplink call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkCellularGatewayUplink = new MerakiDashboardApi.UpdateNetworkCellularGatewayUplink();
          opts.updateNetworkCellularGatewayUplink.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkBandwidthBandwidthLimitsCellular();
          opts.updateNetworkCellularGatewayUplink.bandwidthLimits.limitUp = 0;
          opts.updateNetworkCellularGatewayUplink.bandwidthLimits.limitDown = 0;

          instance.updateNetworkCellularGatewayUplink(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
