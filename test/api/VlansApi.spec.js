/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.VlansApi();
  });

  describe('(package)', function() {
    describe('VlansApi', function() {
      describe('createNetworkApplianceVlan', function() {
        it('should call createNetworkApplianceVlan successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkApplianceVlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkApplianceVlan = new MerakiDashboardApi.CreateNetworkApplianceVlan();
          createNetworkApplianceVlan.id = "";
          createNetworkApplianceVlan.name = "";
          createNetworkApplianceVlan.subnet = "";
          createNetworkApplianceVlan.applianceIp = "";
          createNetworkApplianceVlan.groupPolicyId = "";

          instance.createNetworkApplianceVlan(networkId, createNetworkApplianceVlan, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkApplianceVlan', function() {
        it('should call deleteNetworkApplianceVlan successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkApplianceVlan call
          /*
          var networkId = "networkId_example";
          var vlanId = "vlanId_example";

          instance.deleteNetworkApplianceVlan(networkId, vlanId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceVlan', function() {
        it('should call getNetworkApplianceVlan successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceVlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var vlanId = "vlanId_example";

          instance.getNetworkApplianceVlan(networkId, vlanId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceVlans', function() {
        it('should call getNetworkApplianceVlans successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceVlans call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceVlans(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceVlansSettings', function() {
        it('should call getNetworkApplianceVlansSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceVlansSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceVlansSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceVlan', function() {
        it('should call updateNetworkApplianceVlan successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceVlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var vlanId = "vlanId_example";
          var opts = {};
          opts.updateNetworkApplianceVlan = new MerakiDashboardApi.UpdateNetworkApplianceVlan();
          opts.updateNetworkApplianceVlan.name = "";
          opts.updateNetworkApplianceVlan.subnet = "";
          opts.updateNetworkApplianceVlan.applianceIp = "";
          opts.updateNetworkApplianceVlan.groupPolicyId = "";
          opts.updateNetworkApplianceVlan.vpnNatSubnet = "";
          opts.updateNetworkApplianceVlan.dhcpHandling = "Run a DHCP server";
          opts.updateNetworkApplianceVlan.dhcpRelayServerIps = [""];
          opts.updateNetworkApplianceVlan.dhcpLeaseTime = "30 minutes";
          opts.updateNetworkApplianceVlan.dhcpBootOptionsEnabled = false;
          opts.updateNetworkApplianceVlan.dhcpBootNextServer = "";
          opts.updateNetworkApplianceVlan.dhcpBootFilename = "";
          opts.updateNetworkApplianceVlan.fixedIpAssignments = ;
          opts.updateNetworkApplianceVlan.reservedIpRanges = [new MerakiDashboardApi.NetworksnetworkIdappliancestaticRoutesstaticRouteIdReservedIpRanges()];
          opts.updateNetworkApplianceVlan.reservedIpRanges[0].start = "";
          opts.updateNetworkApplianceVlan.reservedIpRanges[0].end = "";
          opts.updateNetworkApplianceVlan.reservedIpRanges[0].comment = "";
          opts.updateNetworkApplianceVlan.dnsNameservers = "";
          opts.updateNetworkApplianceVlan.dhcpOptions = [new MerakiDashboardApi.NetworksnetworkIdappliancevlansvlanIdDhcpOptions()];
          opts.updateNetworkApplianceVlan.dhcpOptions[0].code = "";
          opts.updateNetworkApplianceVlan.dhcpOptions[0].type = "text";
          opts.updateNetworkApplianceVlan.dhcpOptions[0].value = "";

          instance.updateNetworkApplianceVlan(networkId, vlanId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceVlansSettings', function() {
        it('should call updateNetworkApplianceVlansSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceVlansSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceVlansSettings = new MerakiDashboardApi.UpdateNetworkApplianceVlansSettings();
          opts.updateNetworkApplianceVlansSettings.vlansEnabled = false;

          instance.updateNetworkApplianceVlansSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
