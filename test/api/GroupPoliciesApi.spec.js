/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.GroupPoliciesApi();
  });

  describe('(package)', function() {
    describe('GroupPoliciesApi', function() {
      describe('createNetworkGroupPolicy', function() {
        it('should call createNetworkGroupPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkGroupPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkGroupPolicy = new MerakiDashboardApi.CreateNetworkGroupPolicy();
          createNetworkGroupPolicy.name = "";
          createNetworkGroupPolicy.scheduling = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesScheduling();
          createNetworkGroupPolicy.scheduling.enabled = false;
          createNetworkGroupPolicy.scheduling.monday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingMonday();
          createNetworkGroupPolicy.scheduling.monday.active = false;
          createNetworkGroupPolicy.scheduling.monday.from = "";
          createNetworkGroupPolicy.scheduling.monday.to = "";
          createNetworkGroupPolicy.scheduling.tuesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingTuesday();
          createNetworkGroupPolicy.scheduling.tuesday.active = false;
          createNetworkGroupPolicy.scheduling.tuesday.from = "";
          createNetworkGroupPolicy.scheduling.tuesday.to = "";
          createNetworkGroupPolicy.scheduling.wednesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingWednesday();
          createNetworkGroupPolicy.scheduling.wednesday.active = false;
          createNetworkGroupPolicy.scheduling.wednesday.from = "";
          createNetworkGroupPolicy.scheduling.wednesday.to = "";
          createNetworkGroupPolicy.scheduling.thursday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingThursday();
          createNetworkGroupPolicy.scheduling.thursday.active = false;
          createNetworkGroupPolicy.scheduling.thursday.from = "";
          createNetworkGroupPolicy.scheduling.thursday.to = "";
          createNetworkGroupPolicy.scheduling.friday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingFriday();
          createNetworkGroupPolicy.scheduling.friday.active = false;
          createNetworkGroupPolicy.scheduling.friday.from = "";
          createNetworkGroupPolicy.scheduling.friday.to = "";
          createNetworkGroupPolicy.scheduling.saturday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSaturday();
          createNetworkGroupPolicy.scheduling.saturday.active = false;
          createNetworkGroupPolicy.scheduling.saturday.from = "";
          createNetworkGroupPolicy.scheduling.saturday.to = "";
          createNetworkGroupPolicy.scheduling.sunday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSunday();
          createNetworkGroupPolicy.scheduling.sunday.active = false;
          createNetworkGroupPolicy.scheduling.sunday.from = "";
          createNetworkGroupPolicy.scheduling.sunday.to = "";
          createNetworkGroupPolicy.bandwidth = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBandwidth();
          createNetworkGroupPolicy.bandwidth.settings = "network default";
          createNetworkGroupPolicy.bandwidth.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBandwidthBandwidthLimits();
          createNetworkGroupPolicy.bandwidth.bandwidthLimits.limitUp = 0;
          createNetworkGroupPolicy.bandwidth.bandwidthLimits.limitDown = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShaping();
          createNetworkGroupPolicy.firewallAndTrafficShaping.settings = "network default";
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingTrafficShapingRules()];
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesDefinitions()];
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions[0].type = "application";
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions[0].value = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimits();
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.settings = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimitsBandwidthLimits();
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits.limitUp = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits.limitDown = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].dscpTagValue = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].pcpTagValue = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].priority = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules()];
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].comment = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].policy = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].protocol = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].destPort = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].destCidr = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL7FirewallRules()];
          createNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].policy = "deny";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].type = "application";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].value = "";
          createNetworkGroupPolicy.contentFiltering = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFiltering();
          createNetworkGroupPolicy.contentFiltering.allowedUrlPatterns = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringAllowedUrlPatterns();
          createNetworkGroupPolicy.contentFiltering.allowedUrlPatterns.settings = "network default";
          createNetworkGroupPolicy.contentFiltering.allowedUrlPatterns.patterns = [""];
          createNetworkGroupPolicy.contentFiltering.blockedUrlPatterns = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringBlockedUrlPatterns();
          createNetworkGroupPolicy.contentFiltering.blockedUrlPatterns.settings = "network default";
          createNetworkGroupPolicy.contentFiltering.blockedUrlPatterns.patterns = [""];
          createNetworkGroupPolicy.contentFiltering.blockedUrlCategories = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringBlockedUrlCategories();
          createNetworkGroupPolicy.contentFiltering.blockedUrlCategories.settings = "network default";
          createNetworkGroupPolicy.contentFiltering.blockedUrlCategories.categories = [""];
          createNetworkGroupPolicy.splashAuthSettings = "network default";
          createNetworkGroupPolicy.vlanTagging = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesVlanTagging();
          createNetworkGroupPolicy.vlanTagging.settings = "network default";
          createNetworkGroupPolicy.vlanTagging.vlanId = "";
          createNetworkGroupPolicy.bonjourForwarding = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBonjourForwarding();
          createNetworkGroupPolicy.bonjourForwarding.settings = "network default";
          createNetworkGroupPolicy.bonjourForwarding.rules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBonjourForwardingRules()];
          createNetworkGroupPolicy.bonjourForwarding.rules[0].description = "";
          createNetworkGroupPolicy.bonjourForwarding.rules[0].vlanId = "";
          createNetworkGroupPolicy.bonjourForwarding.rules[0].services = ["All Services"]"All Services";

          instance.createNetworkGroupPolicy(networkId, createNetworkGroupPolicy, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkGroupPolicy', function() {
        it('should call deleteNetworkGroupPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkGroupPolicy call
          /*
          var networkId = "networkId_example";
          var groupPolicyId = "groupPolicyId_example";

          instance.deleteNetworkGroupPolicy(networkId, groupPolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkGroupPolicies', function() {
        it('should call getNetworkGroupPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkGroupPolicies call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkGroupPolicies(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkGroupPolicy', function() {
        it('should call getNetworkGroupPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkGroupPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var groupPolicyId = "groupPolicyId_example";

          instance.getNetworkGroupPolicy(networkId, groupPolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkGroupPolicy', function() {
        it('should call updateNetworkGroupPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkGroupPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var groupPolicyId = "groupPolicyId_example";
          var opts = {};
          opts.updateNetworkGroupPolicy = new MerakiDashboardApi.UpdateNetworkGroupPolicy();
          opts.updateNetworkGroupPolicy.name = "";
          opts.updateNetworkGroupPolicy.scheduling = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesScheduling();
          opts.updateNetworkGroupPolicy.scheduling.enabled = false;
          opts.updateNetworkGroupPolicy.scheduling.monday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingMonday();
          opts.updateNetworkGroupPolicy.scheduling.monday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.monday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.monday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.tuesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingTuesday();
          opts.updateNetworkGroupPolicy.scheduling.tuesday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.tuesday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.tuesday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.wednesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingWednesday();
          opts.updateNetworkGroupPolicy.scheduling.wednesday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.wednesday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.wednesday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.thursday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingThursday();
          opts.updateNetworkGroupPolicy.scheduling.thursday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.thursday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.thursday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.friday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingFriday();
          opts.updateNetworkGroupPolicy.scheduling.friday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.friday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.friday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.saturday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSaturday();
          opts.updateNetworkGroupPolicy.scheduling.saturday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.saturday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.saturday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.sunday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSunday();
          opts.updateNetworkGroupPolicy.scheduling.sunday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.sunday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.sunday.to = "";
          opts.updateNetworkGroupPolicy.bandwidth = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBandwidth();
          opts.updateNetworkGroupPolicy.bandwidth.settings = "network default";
          opts.updateNetworkGroupPolicy.bandwidth.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBandwidthBandwidthLimits();
          opts.updateNetworkGroupPolicy.bandwidth.bandwidthLimits.limitUp = 0;
          opts.updateNetworkGroupPolicy.bandwidth.bandwidthLimits.limitDown = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShaping();
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.settings = "network default";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingTrafficShapingRules()];
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesDefinitions()];
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions[0].type = "application";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions[0].value = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimits();
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.settings = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimitsBandwidthLimits();
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits.limitUp = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits.limitDown = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].dscpTagValue = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].pcpTagValue = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].priority = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules()];
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].comment = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].policy = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].protocol = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].destPort = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].destCidr = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL7FirewallRules()];
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].policy = "deny";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].type = "application";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].value = "";
          opts.updateNetworkGroupPolicy.contentFiltering = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFiltering();
          opts.updateNetworkGroupPolicy.contentFiltering.allowedUrlPatterns = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringAllowedUrlPatterns();
          opts.updateNetworkGroupPolicy.contentFiltering.allowedUrlPatterns.settings = "network default";
          opts.updateNetworkGroupPolicy.contentFiltering.allowedUrlPatterns.patterns = [""];
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlPatterns = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringBlockedUrlPatterns();
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlPatterns.settings = "network default";
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlPatterns.patterns = [""];
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlCategories = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringBlockedUrlCategories();
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlCategories.settings = "network default";
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlCategories.categories = [""];
          opts.updateNetworkGroupPolicy.splashAuthSettings = "network default";
          opts.updateNetworkGroupPolicy.vlanTagging = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesVlanTagging();
          opts.updateNetworkGroupPolicy.vlanTagging.settings = "network default";
          opts.updateNetworkGroupPolicy.vlanTagging.vlanId = "";
          opts.updateNetworkGroupPolicy.bonjourForwarding = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBonjourForwarding();
          opts.updateNetworkGroupPolicy.bonjourForwarding.settings = "network default";
          opts.updateNetworkGroupPolicy.bonjourForwarding.rules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBonjourForwardingRules()];
          opts.updateNetworkGroupPolicy.bonjourForwarding.rules[0].description = "";
          opts.updateNetworkGroupPolicy.bonjourForwarding.rules[0].vlanId = "";
          opts.updateNetworkGroupPolicy.bonjourForwarding.rules[0].services = ["All Services"]"All Services";

          instance.updateNetworkGroupPolicy(networkId, groupPolicyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
