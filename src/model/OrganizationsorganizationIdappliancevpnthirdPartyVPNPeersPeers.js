/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies'));
  } else {
    // Browser globals (root is window)
    if (!root.MerakiDashboardApi) {
      root.MerakiDashboardApi = {};
    }
    root.MerakiDashboardApi.OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers = factory(root.MerakiDashboardApi.ApiClient, root.MerakiDashboardApi.OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies);
  }
}(this, function(ApiClient, OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies) {
  'use strict';

  /**
   * The OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers model module.
   * @module model/OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers
   * @version 1.1.0
   */

  /**
   * Constructs a new <code>OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers</code>.
   * @alias module:model/OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers
   * @class
   * @param name {String} The name of the VPN peer
   * @param publicIp {String} The public IP of the VPN peer
   * @param privateSubnets {Array.<String>} The list of the private subnets of the VPN peer
   * @param secret {String} The shared secret with the VPN peer
   */
  var exports = function(name, publicIp, privateSubnets, secret) {
    this.name = name;
    this.publicIp = publicIp;
    this.privateSubnets = privateSubnets;
    this.secret = secret;
  };

  /**
   * Constructs a <code>OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers} obj Optional instance to populate.
   * @return {module:model/OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers} The populated <code>OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('publicIp'))
        obj.publicIp = ApiClient.convertToType(data['publicIp'], 'String');
      if (data.hasOwnProperty('remoteId'))
        obj.remoteId = ApiClient.convertToType(data['remoteId'], 'String');
      if (data.hasOwnProperty('privateSubnets'))
        obj.privateSubnets = ApiClient.convertToType(data['privateSubnets'], ['String']);
      if (data.hasOwnProperty('ipsecPolicies'))
        obj.ipsecPolicies = OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies.constructFromObject(data['ipsecPolicies']);
      if (data.hasOwnProperty('ipsecPoliciesPreset'))
        obj.ipsecPoliciesPreset = ApiClient.convertToType(data['ipsecPoliciesPreset'], 'String');
      if (data.hasOwnProperty('secret'))
        obj.secret = ApiClient.convertToType(data['secret'], 'String');
      if (data.hasOwnProperty('ikeVersion'))
        obj.ikeVersion = ApiClient.convertToType(data['ikeVersion'], 'String');
      if (data.hasOwnProperty('networkTags'))
        obj.networkTags = ApiClient.convertToType(data['networkTags'], ['String']);
    }
    return obj;
  }

  /**
   * The name of the VPN peer
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * The public IP of the VPN peer
   * @member {String} publicIp
   */
  exports.prototype.publicIp = undefined;

  /**
   * [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
   * @member {String} remoteId
   */
  exports.prototype.remoteId = undefined;

  /**
   * The list of the private subnets of the VPN peer
   * @member {Array.<String>} privateSubnets
   */
  exports.prototype.privateSubnets = undefined;

  /**
   * @member {module:model/OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies} ipsecPolicies
   */
  exports.prototype.ipsecPolicies = undefined;

  /**
   * One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
   * @member {String} ipsecPoliciesPreset
   */
  exports.prototype.ipsecPoliciesPreset = undefined;

  /**
   * The shared secret with the VPN peer
   * @member {String} secret
   */
  exports.prototype.secret = undefined;

  /**
   * [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
   * @member {module:model/OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers.IkeVersionEnum} ikeVersion
   * @default '1'
   */
  exports.prototype.ikeVersion = '1';

  /**
   * A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
   * @member {Array.<String>} networkTags
   */
  exports.prototype.networkTags = undefined;


  /**
   * Allowed values for the <code>ikeVersion</code> property.
   * @enum {String}
   * @readonly
   */
  exports.IkeVersionEnum = {
    /**
     * value: "1"
     * @const
     */
    _1: "1",

    /**
     * value: "2"
     * @const
     */
    _2: "2"
  };

  return exports;

}));
