/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UpdateDeviceSwitchPort', function() {
      beforeEach(function() {
        instance = new MerakiDashboardApi.UpdateDeviceSwitchPort();
      });

      it('should create an instance of UpdateDeviceSwitchPort', function() {
        // TODO: update the code to test UpdateDeviceSwitchPort
        expect(instance).to.be.a(MerakiDashboardApi.UpdateDeviceSwitchPort);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

      it('should have the property enabled (base name: "enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property vlan (base name: "vlan")', function() {
        // TODO: update the code to test the property vlan
        expect(instance).to.have.property('vlan');
        // expect(instance.vlan).to.be(expectedValueLiteral);
      });

      it('should have the property voiceVlan (base name: "voiceVlan")', function() {
        // TODO: update the code to test the property voiceVlan
        expect(instance).to.have.property('voiceVlan');
        // expect(instance.voiceVlan).to.be(expectedValueLiteral);
      });

      it('should have the property allowedVlans (base name: "allowedVlans")', function() {
        // TODO: update the code to test the property allowedVlans
        expect(instance).to.have.property('allowedVlans');
        // expect(instance.allowedVlans).to.be(expectedValueLiteral);
      });

      it('should have the property poeEnabled (base name: "poeEnabled")', function() {
        // TODO: update the code to test the property poeEnabled
        expect(instance).to.have.property('poeEnabled');
        // expect(instance.poeEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property isolationEnabled (base name: "isolationEnabled")', function() {
        // TODO: update the code to test the property isolationEnabled
        expect(instance).to.have.property('isolationEnabled');
        // expect(instance.isolationEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property rstpEnabled (base name: "rstpEnabled")', function() {
        // TODO: update the code to test the property rstpEnabled
        expect(instance).to.have.property('rstpEnabled');
        // expect(instance.rstpEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property stpGuard (base name: "stpGuard")', function() {
        // TODO: update the code to test the property stpGuard
        expect(instance).to.have.property('stpGuard');
        // expect(instance.stpGuard).to.be(expectedValueLiteral);
      });

      it('should have the property linkNegotiation (base name: "linkNegotiation")', function() {
        // TODO: update the code to test the property linkNegotiation
        expect(instance).to.have.property('linkNegotiation');
        // expect(instance.linkNegotiation).to.be(expectedValueLiteral);
      });

      it('should have the property portScheduleId (base name: "portScheduleId")', function() {
        // TODO: update the code to test the property portScheduleId
        expect(instance).to.have.property('portScheduleId');
        // expect(instance.portScheduleId).to.be(expectedValueLiteral);
      });

      it('should have the property udld (base name: "udld")', function() {
        // TODO: update the code to test the property udld
        expect(instance).to.have.property('udld');
        // expect(instance.udld).to.be(expectedValueLiteral);
      });

      it('should have the property accessPolicyType (base name: "accessPolicyType")', function() {
        // TODO: update the code to test the property accessPolicyType
        expect(instance).to.have.property('accessPolicyType');
        // expect(instance.accessPolicyType).to.be(expectedValueLiteral);
      });

      it('should have the property accessPolicyNumber (base name: "accessPolicyNumber")', function() {
        // TODO: update the code to test the property accessPolicyNumber
        expect(instance).to.have.property('accessPolicyNumber');
        // expect(instance.accessPolicyNumber).to.be(expectedValueLiteral);
      });

      it('should have the property macAllowList (base name: "macAllowList")', function() {
        // TODO: update the code to test the property macAllowList
        expect(instance).to.have.property('macAllowList');
        // expect(instance.macAllowList).to.be(expectedValueLiteral);
      });

      it('should have the property stickyMacAllowList (base name: "stickyMacAllowList")', function() {
        // TODO: update the code to test the property stickyMacAllowList
        expect(instance).to.have.property('stickyMacAllowList');
        // expect(instance.stickyMacAllowList).to.be(expectedValueLiteral);
      });

      it('should have the property stickyMacAllowListLimit (base name: "stickyMacAllowListLimit")', function() {
        // TODO: update the code to test the property stickyMacAllowListLimit
        expect(instance).to.have.property('stickyMacAllowListLimit');
        // expect(instance.stickyMacAllowListLimit).to.be(expectedValueLiteral);
      });

      it('should have the property stormControlEnabled (base name: "stormControlEnabled")', function() {
        // TODO: update the code to test the property stormControlEnabled
        expect(instance).to.have.property('stormControlEnabled');
        // expect(instance.stormControlEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property flexibleStackingEnabled (base name: "flexibleStackingEnabled")', function() {
        // TODO: update the code to test the property flexibleStackingEnabled
        expect(instance).to.have.property('flexibleStackingEnabled');
        // expect(instance.flexibleStackingEnabled).to.be(expectedValueLiteral);
      });

    });
  });

}));
