/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 August, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
* The NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules model module.
* @module model/NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules
* @version 1.0.0
*/
export default class NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules {
    /**
    * Constructs a new <code>NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules</code>.
    * @alias module:model/NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules
    * @class
    * @param policy {String} 'allow' or 'deny' traffic specified by this rule
    * @param protocol {String} The type of protocol (must be 'tcp', 'udp', 'icmp' or 'any')
    * @param destCidr {String} Destination IP address (in IP or CIDR notation), a fully-qualified domain name (FQDN, if your network supports it) or 'any'.
    */

    constructor(policy, protocol, destCidr) {
        
        
        this['policy'] = policy;
        this['protocol'] = protocol;
        this['destCidr'] = destCidr;
        
    }

    /**
    * Constructs a <code>NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules} obj Optional instance to populate.
    * @return {module:model/NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules} The populated <code>NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules();
                        
            
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = ApiClient.convertToType(data['policy'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('destPort')) {
                obj['destPort'] = ApiClient.convertToType(data['destPort'], 'String');
            }
            if (data.hasOwnProperty('destCidr')) {
                obj['destCidr'] = ApiClient.convertToType(data['destCidr'], 'String');
            }
        }
        return obj;
    }

    /**
    * Description of the rule (optional)
    * @member {String} comment
    */
    'comment' = undefined;
    /**
    * 'allow' or 'deny' traffic specified by this rule
    * @member {String} policy
    */
    'policy' = undefined;
    /**
    * The type of protocol (must be 'tcp', 'udp', 'icmp' or 'any')
    * @member {String} protocol
    */
    'protocol' = undefined;
    /**
    * Destination port (integer in the range 1-65535), a port range (e.g. 8080-9090), or 'any'
    * @member {String} destPort
    */
    'destPort' = undefined;
    /**
    * Destination IP address (in IP or CIDR notation), a fully-qualified domain name (FQDN, if your network supports it) or 'any'.
    * @member {String} destCidr
    */
    'destCidr' = undefined;




}
