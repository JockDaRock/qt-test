/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.RoutingApi();
  });

  describe('(package)', function() {
    describe('RoutingApi', function() {
      describe('createDeviceSwitchRoutingInterface', function() {
        it('should call createDeviceSwitchRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for createDeviceSwitchRoutingInterface call and complete the assertions
          /*
          var serial = "serial_example";
          var createDeviceSwitchRoutingInterface = new MerakiDashboardApi.CreateDeviceSwitchRoutingInterface();
          createDeviceSwitchRoutingInterface.name = "";
          createDeviceSwitchRoutingInterface.subnet = "";
          createDeviceSwitchRoutingInterface.interfaceIp = "";
          createDeviceSwitchRoutingInterface.multicastRouting = "disabled";
          createDeviceSwitchRoutingInterface.vlanId = 0;
          createDeviceSwitchRoutingInterface.defaultGateway = "";
          createDeviceSwitchRoutingInterface.ospfSettings = new MerakiDashboardApi.DevicesserialswitchroutinginterfacesOspfSettings();
          createDeviceSwitchRoutingInterface.ospfSettings.area = "";
          createDeviceSwitchRoutingInterface.ospfSettings.cost = 0;
          createDeviceSwitchRoutingInterface.ospfSettings.isPassiveEnabled = false;

          instance.createDeviceSwitchRoutingInterface(serial, createDeviceSwitchRoutingInterface, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDeviceSwitchRoutingStaticRoute', function() {
        it('should call createDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for createDeviceSwitchRoutingStaticRoute call and complete the assertions
          /*
          var serial = "serial_example";
          var createDeviceSwitchRoutingStaticRoute = new MerakiDashboardApi.CreateDeviceSwitchRoutingStaticRoute();
          createDeviceSwitchRoutingStaticRoute.name = "";
          createDeviceSwitchRoutingStaticRoute.subnet = "";
          createDeviceSwitchRoutingStaticRoute.nextHopIp = "";
          createDeviceSwitchRoutingStaticRoute.advertiseViaOspfEnabled = false;
          createDeviceSwitchRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.createDeviceSwitchRoutingStaticRoute(serial, createDeviceSwitchRoutingStaticRoute, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchRoutingMulticastRendezvousPoint', function() {
        it('should call createNetworkSwitchRoutingMulticastRendezvousPoint successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchRoutingMulticastRendezvousPoint call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkSwitchRoutingMulticastRendezvousPoint = new MerakiDashboardApi.CreateNetworkSwitchRoutingMulticastRendezvousPoint();
          createNetworkSwitchRoutingMulticastRendezvousPoint.interfaceIp = "";
          createNetworkSwitchRoutingMulticastRendezvousPoint.multicastGroup = "";

          instance.createNetworkSwitchRoutingMulticastRendezvousPoint(networkId, createNetworkSwitchRoutingMulticastRendezvousPoint, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchStackRoutingInterface', function() {
        it('should call createNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchStackRoutingInterface call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var createNetworkSwitchStackRoutingInterface = new MerakiDashboardApi.CreateNetworkSwitchStackRoutingInterface();
          createNetworkSwitchStackRoutingInterface.name = "";
          createNetworkSwitchStackRoutingInterface.subnet = "";
          createNetworkSwitchStackRoutingInterface.interfaceIp = "";
          createNetworkSwitchStackRoutingInterface.multicastRouting = "disabled";
          createNetworkSwitchStackRoutingInterface.vlanId = 0;
          createNetworkSwitchStackRoutingInterface.defaultGateway = "";
          createNetworkSwitchStackRoutingInterface.ospfSettings = new MerakiDashboardApi.DevicesserialswitchroutinginterfacesOspfSettings();
          createNetworkSwitchStackRoutingInterface.ospfSettings.area = "";
          createNetworkSwitchStackRoutingInterface.ospfSettings.cost = 0;
          createNetworkSwitchStackRoutingInterface.ospfSettings.isPassiveEnabled = false;

          instance.createNetworkSwitchStackRoutingInterface(networkId, switchStackId, createNetworkSwitchStackRoutingInterface, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call createNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var createNetworkSwitchStackRoutingStaticRoute = new MerakiDashboardApi.CreateNetworkSwitchStackRoutingStaticRoute();
          createNetworkSwitchStackRoutingStaticRoute.name = "";
          createNetworkSwitchStackRoutingStaticRoute.subnet = "";
          createNetworkSwitchStackRoutingStaticRoute.nextHopIp = "";
          createNetworkSwitchStackRoutingStaticRoute.advertiseViaOspfEnabled = false;
          createNetworkSwitchStackRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.createNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, createNetworkSwitchStackRoutingStaticRoute, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDeviceSwitchRoutingInterface', function() {
        it('should call deleteDeviceSwitchRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDeviceSwitchRoutingInterface call
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";

          instance.deleteDeviceSwitchRoutingInterface(serial, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDeviceSwitchRoutingStaticRoute', function() {
        it('should call deleteDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDeviceSwitchRoutingStaticRoute call
          /*
          var serial = "serial_example";
          var staticRouteId = "staticRouteId_example";

          instance.deleteDeviceSwitchRoutingStaticRoute(serial, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchRoutingMulticastRendezvousPoint', function() {
        it('should call deleteNetworkSwitchRoutingMulticastRendezvousPoint successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchRoutingMulticastRendezvousPoint call
          /*
          var networkId = "networkId_example";
          var rendezvousPointId = "rendezvousPointId_example";

          instance.deleteNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchStackRoutingInterface', function() {
        it('should call deleteNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchStackRoutingInterface call
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";

          instance.deleteNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call deleteNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchStackRoutingStaticRoute call
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";

          instance.deleteNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingInterface', function() {
        it('should call getDeviceSwitchRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingInterface call and complete the assertions
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";

          instance.getDeviceSwitchRoutingInterface(serial, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingInterfaceDhcp', function() {
        it('should call getDeviceSwitchRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingInterfaceDhcp call and complete the assertions
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";

          instance.getDeviceSwitchRoutingInterfaceDhcp(serial, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingInterfaces', function() {
        it('should call getDeviceSwitchRoutingInterfaces successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingInterfaces call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceSwitchRoutingInterfaces(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingStaticRoute', function() {
        it('should call getDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingStaticRoute call and complete the assertions
          /*
          var serial = "serial_example";
          var staticRouteId = "staticRouteId_example";

          instance.getDeviceSwitchRoutingStaticRoute(serial, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingStaticRoutes', function() {
        it('should call getDeviceSwitchRoutingStaticRoutes successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingStaticRoutes call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceSwitchRoutingStaticRoutes(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchRoutingMulticast', function() {
        it('should call getNetworkSwitchRoutingMulticast successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchRoutingMulticast call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchRoutingMulticast(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchRoutingMulticastRendezvousPoint', function() {
        it('should call getNetworkSwitchRoutingMulticastRendezvousPoint successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchRoutingMulticastRendezvousPoint call and complete the assertions
          /*
          var networkId = "networkId_example";
          var rendezvousPointId = "rendezvousPointId_example";

          instance.getNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchRoutingMulticastRendezvousPoints', function() {
        it('should call getNetworkSwitchRoutingMulticastRendezvousPoints successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchRoutingMulticastRendezvousPoints call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchRoutingMulticastRendezvousPoints(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchRoutingOspf', function() {
        it('should call getNetworkSwitchRoutingOspf successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchRoutingOspf call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchRoutingOspf(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingInterface', function() {
        it('should call getNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingInterface call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";

          instance.getNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingInterfaceDhcp', function() {
        it('should call getNetworkSwitchStackRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingInterfaceDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";

          instance.getNetworkSwitchStackRoutingInterfaceDhcp(networkId, switchStackId, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingInterfaces', function() {
        it('should call getNetworkSwitchStackRoutingInterfaces successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingInterfaces call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.getNetworkSwitchStackRoutingInterfaces(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call getNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";

          instance.getNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingStaticRoutes', function() {
        it('should call getNetworkSwitchStackRoutingStaticRoutes successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingStaticRoutes call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.getNetworkSwitchStackRoutingStaticRoutes(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchRoutingInterface', function() {
        it('should call updateDeviceSwitchRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchRoutingInterface call and complete the assertions
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateDeviceSwitchRoutingInterface = new MerakiDashboardApi.UpdateDeviceSwitchRoutingInterface();
          opts.updateDeviceSwitchRoutingInterface.name = "";
          opts.updateDeviceSwitchRoutingInterface.subnet = "";
          opts.updateDeviceSwitchRoutingInterface.interfaceIp = "";
          opts.updateDeviceSwitchRoutingInterface.multicastRouting = "disabled";
          opts.updateDeviceSwitchRoutingInterface.vlanId = 0;
          opts.updateDeviceSwitchRoutingInterface.ospfSettings = new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIdOspfSettings();
          opts.updateDeviceSwitchRoutingInterface.ospfSettings.area = "";
          opts.updateDeviceSwitchRoutingInterface.ospfSettings.cost = 0;
          opts.updateDeviceSwitchRoutingInterface.ospfSettings.isPassiveEnabled = false;

          instance.updateDeviceSwitchRoutingInterface(serial, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchRoutingInterfaceDhcp', function() {
        it('should call updateDeviceSwitchRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchRoutingInterfaceDhcp call and complete the assertions
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateDeviceSwitchRoutingInterfaceDhcp = new MerakiDashboardApi.UpdateDeviceSwitchRoutingInterfaceDhcp();
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpMode = "dhcpDisabled";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpRelayServerIps = [""];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpLeaseTime = "30 minutes";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dnsNameserversOption = "googlePublicDns";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dnsCustomNameservers = [""];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.bootOptionsEnabled = false;
          opts.updateDeviceSwitchRoutingInterfaceDhcp.bootNextServer = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.bootFileName = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions()];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions[0].code = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions[0].type = "text";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions[0].value = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges()];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges[0].start = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges[0].end = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges[0].comment = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments()];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments[0].name = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments[0].mac = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments[0].ip = "";

          instance.updateDeviceSwitchRoutingInterfaceDhcp(serial, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchRoutingStaticRoute', function() {
        it('should call updateDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchRoutingStaticRoute call and complete the assertions
          /*
          var serial = "serial_example";
          var staticRouteId = "staticRouteId_example";
          var opts = {};
          opts.updateDeviceSwitchRoutingStaticRoute = new MerakiDashboardApi.UpdateDeviceSwitchRoutingStaticRoute();
          opts.updateDeviceSwitchRoutingStaticRoute.name = "";
          opts.updateDeviceSwitchRoutingStaticRoute.subnet = "";
          opts.updateDeviceSwitchRoutingStaticRoute.nextHopIp = "";
          opts.updateDeviceSwitchRoutingStaticRoute.advertiseViaOspfEnabled = false;
          opts.updateDeviceSwitchRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.updateDeviceSwitchRoutingStaticRoute(serial, staticRouteId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchRoutingMulticast', function() {
        it('should call updateNetworkSwitchRoutingMulticast successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchRoutingMulticast call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchRoutingMulticast = new MerakiDashboardApi.UpdateNetworkSwitchRoutingMulticast();
          opts.updateNetworkSwitchRoutingMulticast.defaultSettings = new MerakiDashboardApi.NetworksnetworkIdswitchroutingmulticastDefaultSettings();
          opts.updateNetworkSwitchRoutingMulticast.defaultSettings.igmpSnoopingEnabled = false;
          opts.updateNetworkSwitchRoutingMulticast.defaultSettings.floodUnknownMulticastTrafficEnabled = false;
          opts.updateNetworkSwitchRoutingMulticast.overrides = [new MerakiDashboardApi.NetworksnetworkIdswitchroutingmulticastOverrides()];
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].switchProfiles = [""];
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].switches = [""];
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].stacks = [""];
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].igmpSnoopingEnabled = false;
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].floodUnknownMulticastTrafficEnabled = false;

          instance.updateNetworkSwitchRoutingMulticast(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchRoutingMulticastRendezvousPoint', function() {
        it('should call updateNetworkSwitchRoutingMulticastRendezvousPoint successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchRoutingMulticastRendezvousPoint call and complete the assertions
          /*
          var networkId = "networkId_example";
          var rendezvousPointId = "rendezvousPointId_example";
          var updateNetworkSwitchRoutingMulticastRendezvousPoint = new MerakiDashboardApi.UpdateNetworkSwitchRoutingMulticastRendezvousPoint();
          updateNetworkSwitchRoutingMulticastRendezvousPoint.interfaceIp = "";
          updateNetworkSwitchRoutingMulticastRendezvousPoint.multicastGroup = "";

          instance.updateNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPoint, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchRoutingOspf', function() {
        it('should call updateNetworkSwitchRoutingOspf successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchRoutingOspf call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchRoutingOspf = new MerakiDashboardApi.UpdateNetworkSwitchRoutingOspf();
          opts.updateNetworkSwitchRoutingOspf.enabled = false;
          opts.updateNetworkSwitchRoutingOspf.helloTimerInSeconds = 0;
          opts.updateNetworkSwitchRoutingOspf.deadTimerInSeconds = 0;
          opts.updateNetworkSwitchRoutingOspf.areas = [new MerakiDashboardApi.NetworksnetworkIdswitchroutingospfAreas()];
          opts.updateNetworkSwitchRoutingOspf.areas[0].areaId = 0;
          opts.updateNetworkSwitchRoutingOspf.areas[0].areaName = "";
          opts.updateNetworkSwitchRoutingOspf.areas[0].areaType = "normal";
          opts.updateNetworkSwitchRoutingOspf.md5AuthenticationEnabled = false;
          opts.updateNetworkSwitchRoutingOspf.md5AuthenticationKey = new MerakiDashboardApi.NetworksnetworkIdswitchroutingospfMd5AuthenticationKey();
          opts.updateNetworkSwitchRoutingOspf.md5AuthenticationKey.id = 0;
          opts.updateNetworkSwitchRoutingOspf.md5AuthenticationKey.passphrase = "";

          instance.updateNetworkSwitchRoutingOspf(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStackRoutingInterface', function() {
        it('should call updateNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStackRoutingInterface call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateNetworkSwitchStackRoutingInterface = new MerakiDashboardApi.UpdateNetworkSwitchStackRoutingInterface();
          opts.updateNetworkSwitchStackRoutingInterface.name = "";
          opts.updateNetworkSwitchStackRoutingInterface.subnet = "";
          opts.updateNetworkSwitchStackRoutingInterface.interfaceIp = "";
          opts.updateNetworkSwitchStackRoutingInterface.multicastRouting = "disabled";
          opts.updateNetworkSwitchStackRoutingInterface.vlanId = 0;
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings = new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIdOspfSettings();
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings.area = "";
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings.cost = 0;
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings.isPassiveEnabled = false;

          instance.updateNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStackRoutingInterfaceDhcp', function() {
        it('should call updateNetworkSwitchStackRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStackRoutingInterfaceDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp = new MerakiDashboardApi.UpdateNetworkSwitchStackRoutingInterfaceDhcp();
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpMode = "dhcpDisabled";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpRelayServerIps = [""];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpLeaseTime = "30 minutes";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dnsNameserversOption = "googlePublicDns";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dnsCustomNameservers = [""];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootOptionsEnabled = false;
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootNextServer = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootFileName = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].code = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].type = "text";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].value = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].start = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].end = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].comment = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].name = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].mac = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].ip = "";

          instance.updateNetworkSwitchStackRoutingInterfaceDhcp(networkId, switchStackId, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call updateNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";
          var opts = {};
          opts.updateNetworkSwitchStackRoutingStaticRoute = new MerakiDashboardApi.UpdateNetworkSwitchStackRoutingStaticRoute();
          opts.updateNetworkSwitchStackRoutingStaticRoute.name = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.subnet = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.nextHopIp = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.advertiseViaOspfEnabled = false;
          opts.updateNetworkSwitchStackRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.updateNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
