/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.ApplianceApi();
  });

  describe('(package)', function() {
    describe('ApplianceApi', function() {
      describe('createNetworkApplianceStaticRoute', function() {
        it('should call createNetworkApplianceStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkApplianceStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkApplianceStaticRoute = new MerakiDashboardApi.CreateNetworkApplianceStaticRoute();
          createNetworkApplianceStaticRoute.name = "";
          createNetworkApplianceStaticRoute.subnet = "";
          createNetworkApplianceStaticRoute.gatewayIp = "";

          instance.createNetworkApplianceStaticRoute(networkId, createNetworkApplianceStaticRoute, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkApplianceTrafficShapingCustomPerformanceClass', function() {
        it('should call createNetworkApplianceTrafficShapingCustomPerformanceClass successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkApplianceTrafficShapingCustomPerformanceClass call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkApplianceTrafficShapingCustomPerformanceClass = new MerakiDashboardApi.CreateNetworkApplianceTrafficShapingCustomPerformanceClass();
          createNetworkApplianceTrafficShapingCustomPerformanceClass.name = "";
          createNetworkApplianceTrafficShapingCustomPerformanceClass.maxLatency = 0;
          createNetworkApplianceTrafficShapingCustomPerformanceClass.maxJitter = 0;
          createNetworkApplianceTrafficShapingCustomPerformanceClass.maxLossPercentage = 0;

          instance.createNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, createNetworkApplianceTrafficShapingCustomPerformanceClass, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkApplianceVlan', function() {
        it('should call createNetworkApplianceVlan successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkApplianceVlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkApplianceVlan = new MerakiDashboardApi.CreateNetworkApplianceVlan();
          createNetworkApplianceVlan.id = "";
          createNetworkApplianceVlan.name = "";
          createNetworkApplianceVlan.subnet = "";
          createNetworkApplianceVlan.applianceIp = "";
          createNetworkApplianceVlan.groupPolicyId = "";

          instance.createNetworkApplianceVlan(networkId, createNetworkApplianceVlan, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkApplianceStaticRoute', function() {
        it('should call deleteNetworkApplianceStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkApplianceStaticRoute call
          /*
          var networkId = "networkId_example";
          var staticRouteId = "staticRouteId_example";

          instance.deleteNetworkApplianceStaticRoute(networkId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkApplianceTrafficShapingCustomPerformanceClass', function() {
        it('should call deleteNetworkApplianceTrafficShapingCustomPerformanceClass successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkApplianceTrafficShapingCustomPerformanceClass call
          /*
          var networkId = "networkId_example";
          var customPerformanceClassId = "customPerformanceClassId_example";

          instance.deleteNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, customPerformanceClassId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkApplianceVlan', function() {
        it('should call deleteNetworkApplianceVlan successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkApplianceVlan call
          /*
          var networkId = "networkId_example";
          var vlanId = "vlanId_example";

          instance.deleteNetworkApplianceVlan(networkId, vlanId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceApplianceDhcpSubnets', function() {
        it('should call getDeviceApplianceDhcpSubnets successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceApplianceDhcpSubnets call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceApplianceDhcpSubnets(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceAppliancePerformance', function() {
        it('should call getDeviceAppliancePerformance successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceAppliancePerformance call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceAppliancePerformance(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceClientSecurityEvents', function() {
        it('should call getNetworkApplianceClientSecurityEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceClientSecurityEvents call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.sortOrder = "sortOrder_example";

          instance.getNetworkApplianceClientSecurityEvents(networkId, clientId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceConnectivityMonitoringDestinations', function() {
        it('should call getNetworkApplianceConnectivityMonitoringDestinations successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceConnectivityMonitoringDestinations call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceConnectivityMonitoringDestinations(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceContentFiltering', function() {
        it('should call getNetworkApplianceContentFiltering successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceContentFiltering call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceContentFiltering(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceContentFilteringCategories', function() {
        it('should call getNetworkApplianceContentFilteringCategories successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceContentFilteringCategories call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceContentFilteringCategories(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallCellularFirewallRules', function() {
        it('should call getNetworkApplianceFirewallCellularFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallCellularFirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallCellularFirewallRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallFirewalledService', function() {
        it('should call getNetworkApplianceFirewallFirewalledService successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallFirewalledService call and complete the assertions
          /*
          var networkId = "networkId_example";
          var service = "service_example";

          instance.getNetworkApplianceFirewallFirewalledService(networkId, service, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallFirewalledServices', function() {
        it('should call getNetworkApplianceFirewallFirewalledServices successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallFirewalledServices call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallFirewalledServices(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallInboundFirewallRules', function() {
        it('should call getNetworkApplianceFirewallInboundFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallInboundFirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallInboundFirewallRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallL3FirewallRules', function() {
        it('should call getNetworkApplianceFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallL3FirewallRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallL7FirewallRules', function() {
        it('should call getNetworkApplianceFirewallL7FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallL7FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallL7FirewallRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallL7FirewallRulesApplicationCategories', function() {
        it('should call getNetworkApplianceFirewallL7FirewallRulesApplicationCategories successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallL7FirewallRulesApplicationCategories call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallL7FirewallRulesApplicationCategories(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallOneToManyNatRules', function() {
        it('should call getNetworkApplianceFirewallOneToManyNatRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallOneToManyNatRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallOneToManyNatRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallOneToOneNatRules', function() {
        it('should call getNetworkApplianceFirewallOneToOneNatRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallOneToOneNatRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallOneToOneNatRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallPortForwardingRules', function() {
        it('should call getNetworkApplianceFirewallPortForwardingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallPortForwardingRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallPortForwardingRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkAppliancePort', function() {
        it('should call getNetworkAppliancePort successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkAppliancePort call and complete the assertions
          /*
          var networkId = "networkId_example";
          var portId = "portId_example";

          instance.getNetworkAppliancePort(networkId, portId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkAppliancePorts', function() {
        it('should call getNetworkAppliancePorts successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkAppliancePorts call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkAppliancePorts(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceSecurityEvents', function() {
        it('should call getNetworkApplianceSecurityEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceSecurityEvents call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.sortOrder = "sortOrder_example";

          instance.getNetworkApplianceSecurityEvents(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceSecurityIntrusion', function() {
        it('should call getNetworkApplianceSecurityIntrusion successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceSecurityIntrusion call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceSecurityIntrusion(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceSecurityMalware', function() {
        it('should call getNetworkApplianceSecurityMalware successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceSecurityMalware call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceSecurityMalware(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceSingleLan', function() {
        it('should call getNetworkApplianceSingleLan successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceSingleLan call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceSingleLan(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceStaticRoute', function() {
        it('should call getNetworkApplianceStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var staticRouteId = "staticRouteId_example";

          instance.getNetworkApplianceStaticRoute(networkId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceStaticRoutes', function() {
        it('should call getNetworkApplianceStaticRoutes successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceStaticRoutes call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceStaticRoutes(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceTrafficShaping', function() {
        it('should call getNetworkApplianceTrafficShaping successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceTrafficShaping call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceTrafficShaping(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceTrafficShapingCustomPerformanceClass', function() {
        it('should call getNetworkApplianceTrafficShapingCustomPerformanceClass successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceTrafficShapingCustomPerformanceClass call and complete the assertions
          /*
          var networkId = "networkId_example";
          var customPerformanceClassId = "customPerformanceClassId_example";

          instance.getNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, customPerformanceClassId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceTrafficShapingCustomPerformanceClasses', function() {
        it('should call getNetworkApplianceTrafficShapingCustomPerformanceClasses successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceTrafficShapingCustomPerformanceClasses call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceTrafficShapingCustomPerformanceClasses(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceTrafficShapingRules', function() {
        it('should call getNetworkApplianceTrafficShapingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceTrafficShapingRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceTrafficShapingRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceTrafficShapingUplinkBandwidth', function() {
        it('should call getNetworkApplianceTrafficShapingUplinkBandwidth successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceTrafficShapingUplinkBandwidth call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceTrafficShapingUplinkBandwidth(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceTrafficShapingUplinkSelection', function() {
        it('should call getNetworkApplianceTrafficShapingUplinkSelection successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceTrafficShapingUplinkSelection call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceTrafficShapingUplinkSelection(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceVlan', function() {
        it('should call getNetworkApplianceVlan successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceVlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var vlanId = "vlanId_example";

          instance.getNetworkApplianceVlan(networkId, vlanId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceVlans', function() {
        it('should call getNetworkApplianceVlans successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceVlans call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceVlans(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceVlansSettings', function() {
        it('should call getNetworkApplianceVlansSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceVlansSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceVlansSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceVpnSiteToSiteVpn', function() {
        it('should call getNetworkApplianceVpnSiteToSiteVpn successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceVpnSiteToSiteVpn call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceVpnSiteToSiteVpn(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceWarmSpare', function() {
        it('should call getNetworkApplianceWarmSpare successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceWarmSpare call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceWarmSpare(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceSecurityEvents', function() {
        it('should call getOrganizationApplianceSecurityEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceSecurityEvents call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.sortOrder = "sortOrder_example";

          instance.getOrganizationApplianceSecurityEvents(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceSecurityIntrusion', function() {
        it('should call getOrganizationApplianceSecurityIntrusion successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceSecurityIntrusion call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationApplianceSecurityIntrusion(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceUplinkStatuses', function() {
        it('should call getOrganizationApplianceUplinkStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceUplinkStatuses call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getOrganizationApplianceUplinkStatuses(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceVpnStats', function() {
        it('should call getOrganizationApplianceVpnStats successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceVpnStats call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.networkIds = ["networkIds_example"];
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;

          instance.getOrganizationApplianceVpnStats(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceVpnStatuses', function() {
        it('should call getOrganizationApplianceVpnStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceVpnStatuses call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.networkIds = ["networkIds_example"];

          instance.getOrganizationApplianceVpnStatuses(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceVpnThirdPartyVPNPeers', function() {
        it('should call getOrganizationApplianceVpnThirdPartyVPNPeers successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceVpnThirdPartyVPNPeers call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationApplianceVpnThirdPartyVPNPeers(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceVpnVpnFirewallRules', function() {
        it('should call getOrganizationApplianceVpnVpnFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceVpnVpnFirewallRules call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationApplianceVpnVpnFirewallRules(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('swapNetworkApplianceWarmSpare', function() {
        it('should call swapNetworkApplianceWarmSpare successfully', function(done) {
          // TODO: uncomment, update parameter values for swapNetworkApplianceWarmSpare call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.swapNetworkApplianceWarmSpare(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceConnectivityMonitoringDestinations', function() {
        it('should call updateNetworkApplianceConnectivityMonitoringDestinations successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceConnectivityMonitoringDestinations call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceConnectivityMonitoringDestinations = new MerakiDashboardApi.UpdateNetworkApplianceConnectivityMonitoringDestinations();
          opts.updateNetworkApplianceConnectivityMonitoringDestinations.destinations = [new MerakiDashboardApi.NetworksnetworkIdapplianceconnectivityMonitoringDestinationsDestinations()];
          opts.updateNetworkApplianceConnectivityMonitoringDestinations.destinations[0].ip = "";
          opts.updateNetworkApplianceConnectivityMonitoringDestinations.destinations[0].description = "";
          opts.updateNetworkApplianceConnectivityMonitoringDestinations.destinations[0]._default = false;

          instance.updateNetworkApplianceConnectivityMonitoringDestinations(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceContentFiltering', function() {
        it('should call updateNetworkApplianceContentFiltering successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceContentFiltering call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceContentFiltering = new MerakiDashboardApi.UpdateNetworkApplianceContentFiltering();
          opts.updateNetworkApplianceContentFiltering.allowedUrlPatterns = [""];
          opts.updateNetworkApplianceContentFiltering.blockedUrlPatterns = [""];
          opts.updateNetworkApplianceContentFiltering.blockedUrlCategories = [""];
          opts.updateNetworkApplianceContentFiltering.urlCategoryListSize = "topSites";

          instance.updateNetworkApplianceContentFiltering(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallCellularFirewallRules', function() {
        it('should call updateNetworkApplianceFirewallCellularFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallCellularFirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceFirewallCellularFirewallRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallCellularFirewallRules();
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewallcellularFirewallRulesRules()];
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].comment = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].policy = "allow";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].protocol = "tcp";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].srcPort = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].srcCidr = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].destPort = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].destCidr = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].syslogEnabled = false;

          instance.updateNetworkApplianceFirewallCellularFirewallRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallFirewalledService', function() {
        it('should call updateNetworkApplianceFirewallFirewalledService successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallFirewalledService call and complete the assertions
          /*
          var networkId = "networkId_example";
          var service = "service_example";
          var updateNetworkApplianceFirewallFirewalledService = new MerakiDashboardApi.UpdateNetworkApplianceFirewallFirewalledService();
          updateNetworkApplianceFirewallFirewalledService.access = "blocked";
          updateNetworkApplianceFirewallFirewalledService.allowedIps = [""];

          instance.updateNetworkApplianceFirewallFirewalledService(networkId, service, updateNetworkApplianceFirewallFirewalledService, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallInboundFirewallRules', function() {
        it('should call updateNetworkApplianceFirewallInboundFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallInboundFirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceFirewallInboundFirewallRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallInboundFirewallRules();
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewallcellularFirewallRulesRules()];
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].comment = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].policy = "allow";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].protocol = "tcp";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].srcPort = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].srcCidr = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].destPort = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].destCidr = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].syslogEnabled = false;
          opts.updateNetworkApplianceFirewallInboundFirewallRules.syslogDefaultRule = false;

          instance.updateNetworkApplianceFirewallInboundFirewallRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallL3FirewallRules', function() {
        it('should call updateNetworkApplianceFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceFirewallL3FirewallRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallL3FirewallRules();
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewallcellularFirewallRulesRules()];
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].comment = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].policy = "allow";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].protocol = "tcp";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].srcPort = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].srcCidr = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].destPort = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].destCidr = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].syslogEnabled = false;
          opts.updateNetworkApplianceFirewallL3FirewallRules.syslogDefaultRule = false;

          instance.updateNetworkApplianceFirewallL3FirewallRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallL7FirewallRules', function() {
        it('should call updateNetworkApplianceFirewallL7FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallL7FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceFirewallL7FirewallRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallL7FirewallRules();
          opts.updateNetworkApplianceFirewallL7FirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalll7FirewallRulesRules()];
          opts.updateNetworkApplianceFirewallL7FirewallRules.rules[0].policy = "deny";
          opts.updateNetworkApplianceFirewallL7FirewallRules.rules[0].type = "application";
          opts.updateNetworkApplianceFirewallL7FirewallRules.rules[0].value = "";

          instance.updateNetworkApplianceFirewallL7FirewallRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallOneToManyNatRules', function() {
        it('should call updateNetworkApplianceFirewallOneToManyNatRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallOneToManyNatRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceFirewallOneToManyNatRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallOneToManyNatRules();
          updateNetworkApplianceFirewallOneToManyNatRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalloneToManyNatRulesRules()];
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].publicIp = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].uplink = "internet1";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalloneToManyNatRulesPortRules()];
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].name = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].protocol = "tcp";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].publicPort = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].localIp = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].localPort = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].allowedIps = [""];

          instance.updateNetworkApplianceFirewallOneToManyNatRules(networkId, updateNetworkApplianceFirewallOneToManyNatRules, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallOneToOneNatRules', function() {
        it('should call updateNetworkApplianceFirewallOneToOneNatRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallOneToOneNatRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceFirewallOneToOneNatRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallOneToOneNatRules();
          updateNetworkApplianceFirewallOneToOneNatRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalloneToOneNatRulesRules()];
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].name = "";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].publicIp = "";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].lanIp = "";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].uplink = "internet1";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].allowedInbound = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalloneToOneNatRulesAllowedInbound()];
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].allowedInbound[0].protocol = "tcp";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].allowedInbound[0].destinationPorts = [""];
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].allowedInbound[0].allowedIps = [""];

          instance.updateNetworkApplianceFirewallOneToOneNatRules(networkId, updateNetworkApplianceFirewallOneToOneNatRules, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallPortForwardingRules', function() {
        it('should call updateNetworkApplianceFirewallPortForwardingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallPortForwardingRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceFirewallPortForwardingRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallPortForwardingRules();
          updateNetworkApplianceFirewallPortForwardingRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewallportForwardingRulesRules()];
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].name = "";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].lanIp = "";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].uplink = "internet1";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].publicPort = "";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].localPort = "";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].allowedIps = [""];
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].protocol = "tcp";

          instance.updateNetworkApplianceFirewallPortForwardingRules(networkId, updateNetworkApplianceFirewallPortForwardingRules, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkAppliancePort', function() {
        it('should call updateNetworkAppliancePort successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkAppliancePort call and complete the assertions
          /*
          var networkId = "networkId_example";
          var portId = "portId_example";
          var opts = {};
          opts.updateNetworkAppliancePort = new MerakiDashboardApi.UpdateNetworkAppliancePort();
          opts.updateNetworkAppliancePort.enabled = false;
          opts.updateNetworkAppliancePort.dropUntaggedTraffic = false;
          opts.updateNetworkAppliancePort.type = "";
          opts.updateNetworkAppliancePort.vlan = 0;
          opts.updateNetworkAppliancePort.allowedVlans = "";
          opts.updateNetworkAppliancePort.accessPolicy = "";

          instance.updateNetworkAppliancePort(networkId, portId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceSecurityIntrusion', function() {
        it('should call updateNetworkApplianceSecurityIntrusion successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceSecurityIntrusion call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceSecurityIntrusion = new MerakiDashboardApi.UpdateNetworkApplianceSecurityIntrusion();
          opts.updateNetworkApplianceSecurityIntrusion.mode = "prevention";
          opts.updateNetworkApplianceSecurityIntrusion.idsRulesets = "connectivity";
          opts.updateNetworkApplianceSecurityIntrusion.protectedNetworks = new MerakiDashboardApi.NetworksnetworkIdappliancesecurityintrusionProtectedNetworks();
          opts.updateNetworkApplianceSecurityIntrusion.protectedNetworks.useDefault = false;
          opts.updateNetworkApplianceSecurityIntrusion.protectedNetworks.includedCidr = [""];
          opts.updateNetworkApplianceSecurityIntrusion.protectedNetworks.excludedCidr = [""];

          instance.updateNetworkApplianceSecurityIntrusion(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceSecurityMalware', function() {
        it('should call updateNetworkApplianceSecurityMalware successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceSecurityMalware call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceSecurityMalware = new MerakiDashboardApi.UpdateNetworkApplianceSecurityMalware();
          updateNetworkApplianceSecurityMalware.mode = "enabled";
          updateNetworkApplianceSecurityMalware.allowedUrls = [new MerakiDashboardApi.NetworksnetworkIdappliancesecuritymalwareAllowedUrls()];
          updateNetworkApplianceSecurityMalware.allowedUrls[0].url = "";
          updateNetworkApplianceSecurityMalware.allowedUrls[0].comment = "";
          updateNetworkApplianceSecurityMalware.allowedFiles = [new MerakiDashboardApi.NetworksnetworkIdappliancesecuritymalwareAllowedFiles()];
          updateNetworkApplianceSecurityMalware.allowedFiles[0].sha256 = "";
          updateNetworkApplianceSecurityMalware.allowedFiles[0].comment = "";

          instance.updateNetworkApplianceSecurityMalware(networkId, updateNetworkApplianceSecurityMalware, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceSingleLan', function() {
        it('should call updateNetworkApplianceSingleLan successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceSingleLan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceSingleLan = new MerakiDashboardApi.UpdateNetworkApplianceSingleLan();
          opts.updateNetworkApplianceSingleLan.subnet = "";
          opts.updateNetworkApplianceSingleLan.applianceIp = "";

          instance.updateNetworkApplianceSingleLan(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceStaticRoute', function() {
        it('should call updateNetworkApplianceStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var staticRouteId = "staticRouteId_example";
          var opts = {};
          opts.updateNetworkApplianceStaticRoute = new MerakiDashboardApi.UpdateNetworkApplianceStaticRoute();
          opts.updateNetworkApplianceStaticRoute.name = "";
          opts.updateNetworkApplianceStaticRoute.subnet = "";
          opts.updateNetworkApplianceStaticRoute.gatewayIp = "";
          opts.updateNetworkApplianceStaticRoute.enabled = false;
          opts.updateNetworkApplianceStaticRoute.fixedIpAssignments = ;
          opts.updateNetworkApplianceStaticRoute.reservedIpRanges = [new MerakiDashboardApi.NetworksnetworkIdappliancestaticRoutesstaticRouteIdReservedIpRanges()];
          opts.updateNetworkApplianceStaticRoute.reservedIpRanges[0].start = "";
          opts.updateNetworkApplianceStaticRoute.reservedIpRanges[0].end = "";
          opts.updateNetworkApplianceStaticRoute.reservedIpRanges[0].comment = "";

          instance.updateNetworkApplianceStaticRoute(networkId, staticRouteId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceTrafficShaping', function() {
        it('should call updateNetworkApplianceTrafficShaping successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceTrafficShaping call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceTrafficShaping = new MerakiDashboardApi.UpdateNetworkApplianceTrafficShaping();
          opts.updateNetworkApplianceTrafficShaping.globalBandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingGlobalBandwidthLimits();
          opts.updateNetworkApplianceTrafficShaping.globalBandwidthLimits.limitUp = 0;
          opts.updateNetworkApplianceTrafficShaping.globalBandwidthLimits.limitDown = 0;

          instance.updateNetworkApplianceTrafficShaping(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceTrafficShapingCustomPerformanceClass', function() {
        it('should call updateNetworkApplianceTrafficShapingCustomPerformanceClass successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceTrafficShapingCustomPerformanceClass call and complete the assertions
          /*
          var networkId = "networkId_example";
          var customPerformanceClassId = "customPerformanceClassId_example";
          var opts = {};
          opts.updateNetworkApplianceTrafficShapingCustomPerformanceClass = new MerakiDashboardApi.UpdateNetworkApplianceTrafficShapingCustomPerformanceClass();
          opts.updateNetworkApplianceTrafficShapingCustomPerformanceClass.name = "";
          opts.updateNetworkApplianceTrafficShapingCustomPerformanceClass.maxLatency = 0;
          opts.updateNetworkApplianceTrafficShapingCustomPerformanceClass.maxJitter = 0;
          opts.updateNetworkApplianceTrafficShapingCustomPerformanceClass.maxLossPercentage = 0;

          instance.updateNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, customPerformanceClassId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceTrafficShapingRules', function() {
        it('should call updateNetworkApplianceTrafficShapingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceTrafficShapingRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceTrafficShapingRules = new MerakiDashboardApi.UpdateNetworkApplianceTrafficShapingRules();
          opts.updateNetworkApplianceTrafficShapingRules.defaultRulesEnabled = false;
          opts.updateNetworkApplianceTrafficShapingRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesRules()];
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].definitions = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesDefinitions()];
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].definitions[0].type = "application";
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].definitions[0].value = "";
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].perClientBandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimits();
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].perClientBandwidthLimits.settings = "";
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].perClientBandwidthLimits.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimitsBandwidthLimits();
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].perClientBandwidthLimits.bandwidthLimits.limitUp = 0;
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].perClientBandwidthLimits.bandwidthLimits.limitDown = 0;
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].dscpTagValue = 0;
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].priority = "";

          instance.updateNetworkApplianceTrafficShapingRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceTrafficShapingUplinkBandwidth', function() {
        it('should call updateNetworkApplianceTrafficShapingUplinkBandwidth successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceTrafficShapingUplinkBandwidth call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth = new MerakiDashboardApi.UpdateNetworkApplianceTrafficShapingUplinkBandwidth();
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkBandwidthBandwidthLimits();
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.wan1 = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkBandwidthBandwidthLimitsWan1();
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.wan1.limitUp = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.wan1.limitDown = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.wan2 = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkBandwidthBandwidthLimitsWan2();
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.wan2.limitUp = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.wan2.limitDown = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.cellular = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkBandwidthBandwidthLimitsCellular();
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.cellular.limitUp = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.cellular.limitDown = 0;

          instance.updateNetworkApplianceTrafficShapingUplinkBandwidth(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceTrafficShapingUplinkSelection', function() {
        it('should call updateNetworkApplianceTrafficShapingUplinkSelection successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceTrafficShapingUplinkSelection call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceTrafficShapingUplinkSelection = new MerakiDashboardApi.UpdateNetworkApplianceTrafficShapingUplinkSelection();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.activeActiveAutoVpnEnabled = false;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.defaultUplink = "wan1";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.loadBalancingEnabled = false;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionWanTrafficUplinkPreferences()];
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionTrafficFilters()];
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].type = "custom";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionValue();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.protocol = "tcp";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.source = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionValueSource();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.source.port = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.source.cidr = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.source.vlan = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.source.host = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.destination = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionValueDestination();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.destination.port = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.destination.cidr = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].preferredUplink = "wan1";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionVpnTrafficUplinkPreferences()];
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionTrafficFilters1()];
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].type = "applicationCategory";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionValue1();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.id = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.protocol = "tcp";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.source = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionValue1Source();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.source.port = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.source.cidr = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.source.network = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.source.vlan = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.source.host = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.destination = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionValue1Destination();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.destination.port = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.destination.cidr = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.destination.network = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.destination.vlan = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.destination.host = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.destination.fqdn = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].preferredUplink = "wan1";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].failOverCriterion = "poorPerformance";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].performanceClass = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionPerformanceClass();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].performanceClass.type = "builtin";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].performanceClass.builtinPerformanceClassName = "VoIP";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].performanceClass.customPerformanceClassId = "";

          instance.updateNetworkApplianceTrafficShapingUplinkSelection(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceVlan', function() {
        it('should call updateNetworkApplianceVlan successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceVlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var vlanId = "vlanId_example";
          var opts = {};
          opts.updateNetworkApplianceVlan = new MerakiDashboardApi.UpdateNetworkApplianceVlan();
          opts.updateNetworkApplianceVlan.name = "";
          opts.updateNetworkApplianceVlan.subnet = "";
          opts.updateNetworkApplianceVlan.applianceIp = "";
          opts.updateNetworkApplianceVlan.groupPolicyId = "";
          opts.updateNetworkApplianceVlan.vpnNatSubnet = "";
          opts.updateNetworkApplianceVlan.dhcpHandling = "Run a DHCP server";
          opts.updateNetworkApplianceVlan.dhcpRelayServerIps = [""];
          opts.updateNetworkApplianceVlan.dhcpLeaseTime = "30 minutes";
          opts.updateNetworkApplianceVlan.dhcpBootOptionsEnabled = false;
          opts.updateNetworkApplianceVlan.dhcpBootNextServer = "";
          opts.updateNetworkApplianceVlan.dhcpBootFilename = "";
          opts.updateNetworkApplianceVlan.fixedIpAssignments = ;
          opts.updateNetworkApplianceVlan.reservedIpRanges = [new MerakiDashboardApi.NetworksnetworkIdappliancestaticRoutesstaticRouteIdReservedIpRanges()];
          opts.updateNetworkApplianceVlan.reservedIpRanges[0].start = "";
          opts.updateNetworkApplianceVlan.reservedIpRanges[0].end = "";
          opts.updateNetworkApplianceVlan.reservedIpRanges[0].comment = "";
          opts.updateNetworkApplianceVlan.dnsNameservers = "";
          opts.updateNetworkApplianceVlan.dhcpOptions = [new MerakiDashboardApi.NetworksnetworkIdappliancevlansvlanIdDhcpOptions()];
          opts.updateNetworkApplianceVlan.dhcpOptions[0].code = "";
          opts.updateNetworkApplianceVlan.dhcpOptions[0].type = "text";
          opts.updateNetworkApplianceVlan.dhcpOptions[0].value = "";

          instance.updateNetworkApplianceVlan(networkId, vlanId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceVlansSettings', function() {
        it('should call updateNetworkApplianceVlansSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceVlansSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceVlansSettings = new MerakiDashboardApi.UpdateNetworkApplianceVlansSettings();
          opts.updateNetworkApplianceVlansSettings.vlansEnabled = false;

          instance.updateNetworkApplianceVlansSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceVpnSiteToSiteVpn', function() {
        it('should call updateNetworkApplianceVpnSiteToSiteVpn successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceVpnSiteToSiteVpn call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceVpnSiteToSiteVpn = new MerakiDashboardApi.UpdateNetworkApplianceVpnSiteToSiteVpn();
          updateNetworkApplianceVpnSiteToSiteVpn.mode = "none";
          updateNetworkApplianceVpnSiteToSiteVpn.hubs = [new MerakiDashboardApi.NetworksnetworkIdappliancevpnsiteToSiteVpnHubs()];
          updateNetworkApplianceVpnSiteToSiteVpn.hubs[0].hubId = "";
          updateNetworkApplianceVpnSiteToSiteVpn.hubs[0].useDefaultRoute = false;
          updateNetworkApplianceVpnSiteToSiteVpn.subnets = [new MerakiDashboardApi.NetworksnetworkIdappliancevpnsiteToSiteVpnSubnets()];
          updateNetworkApplianceVpnSiteToSiteVpn.subnets[0].localSubnet = "";
          updateNetworkApplianceVpnSiteToSiteVpn.subnets[0].useVpn = false;

          instance.updateNetworkApplianceVpnSiteToSiteVpn(networkId, updateNetworkApplianceVpnSiteToSiteVpn, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceWarmSpare', function() {
        it('should call updateNetworkApplianceWarmSpare successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceWarmSpare call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceWarmSpare = new MerakiDashboardApi.UpdateNetworkApplianceWarmSpare();
          updateNetworkApplianceWarmSpare.enabled = false;
          updateNetworkApplianceWarmSpare.spareSerial = "";
          updateNetworkApplianceWarmSpare.uplinkMode = "";
          updateNetworkApplianceWarmSpare.virtualIp1 = "";
          updateNetworkApplianceWarmSpare.virtualIp2 = "";

          instance.updateNetworkApplianceWarmSpare(networkId, updateNetworkApplianceWarmSpare, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationApplianceSecurityIntrusion', function() {
        it('should call updateOrganizationApplianceSecurityIntrusion successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationApplianceSecurityIntrusion call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var updateOrganizationApplianceSecurityIntrusion = new MerakiDashboardApi.UpdateOrganizationApplianceSecurityIntrusion();
          updateOrganizationApplianceSecurityIntrusion.allowedRules = [new MerakiDashboardApi.OrganizationsorganizationIdappliancesecurityintrusionAllowedRules()];
          updateOrganizationApplianceSecurityIntrusion.allowedRules[0].ruleId = "";
          updateOrganizationApplianceSecurityIntrusion.allowedRules[0].message = "";

          instance.updateOrganizationApplianceSecurityIntrusion(organizationId, updateOrganizationApplianceSecurityIntrusion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationApplianceVpnThirdPartyVPNPeers', function() {
        it('should call updateOrganizationApplianceVpnThirdPartyVPNPeers successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationApplianceVpnThirdPartyVPNPeers call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var updateOrganizationApplianceVpnThirdPartyVPNPeers = new MerakiDashboardApi.UpdateOrganizationApplianceVpnThirdPartyVPNPeers();
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers = [new MerakiDashboardApi.OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers()];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].name = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].publicIp = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].remoteId = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].privateSubnets = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies = new MerakiDashboardApi.OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies();
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikeCipherAlgo = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikeAuthAlgo = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikePrfAlgo = ["prfsha256"]"prfsha256";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikeDiffieHellmanGroup = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikeLifetime = 0;
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.childCipherAlgo = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.childAuthAlgo = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.childPfsGroup = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.childLifetime = 0;
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPoliciesPreset = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].secret = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ikeVersion = "1";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].networkTags = [""];

          instance.updateOrganizationApplianceVpnThirdPartyVPNPeers(organizationId, updateOrganizationApplianceVpnThirdPartyVPNPeers, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationApplianceVpnVpnFirewallRules', function() {
        it('should call updateOrganizationApplianceVpnVpnFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationApplianceVpnVpnFirewallRules call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.updateOrganizationApplianceVpnVpnFirewallRules = new MerakiDashboardApi.UpdateOrganizationApplianceVpnVpnFirewallRules();
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules = [new MerakiDashboardApi.OrganizationsorganizationIdappliancevpnvpnFirewallRulesRules()];
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].comment = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].policy = "allow";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].protocol = "tcp";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].srcPort = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].srcCidr = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].destPort = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].destCidr = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].syslogEnabled = false;
          opts.updateOrganizationApplianceVpnVpnFirewallRules.syslogDefaultRule = false;

          instance.updateOrganizationApplianceVpnVpnFirewallRules(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
