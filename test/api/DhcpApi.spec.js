/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.DhcpApi();
  });

  describe('(package)', function() {
    describe('DhcpApi', function() {
      describe('getDeviceApplianceDhcpSubnets', function() {
        it('should call getDeviceApplianceDhcpSubnets successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceApplianceDhcpSubnets call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceApplianceDhcpSubnets(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingInterfaceDhcp', function() {
        it('should call getDeviceSwitchRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingInterfaceDhcp call and complete the assertions
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";

          instance.getDeviceSwitchRoutingInterfaceDhcp(serial, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkCellularGatewayDhcp', function() {
        it('should call getNetworkCellularGatewayDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkCellularGatewayDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkCellularGatewayDhcp(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingInterfaceDhcp', function() {
        it('should call getNetworkSwitchStackRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingInterfaceDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";

          instance.getNetworkSwitchStackRoutingInterfaceDhcp(networkId, switchStackId, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchRoutingInterfaceDhcp', function() {
        it('should call updateDeviceSwitchRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchRoutingInterfaceDhcp call and complete the assertions
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateDeviceSwitchRoutingInterfaceDhcp = new MerakiDashboardApi.UpdateDeviceSwitchRoutingInterfaceDhcp();
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpMode = "dhcpDisabled";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpRelayServerIps = [""];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpLeaseTime = "30 minutes";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dnsNameserversOption = "googlePublicDns";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dnsCustomNameservers = [""];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.bootOptionsEnabled = false;
          opts.updateDeviceSwitchRoutingInterfaceDhcp.bootNextServer = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.bootFileName = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions()];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions[0].code = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions[0].type = "text";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions[0].value = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges()];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges[0].start = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges[0].end = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges[0].comment = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments()];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments[0].name = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments[0].mac = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments[0].ip = "";

          instance.updateDeviceSwitchRoutingInterfaceDhcp(serial, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkCellularGatewayDhcp', function() {
        it('should call updateNetworkCellularGatewayDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkCellularGatewayDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkCellularGatewayDhcp = new MerakiDashboardApi.UpdateNetworkCellularGatewayDhcp();
          opts.updateNetworkCellularGatewayDhcp.dhcpLeaseTime = "";
          opts.updateNetworkCellularGatewayDhcp.dnsNameservers = "";
          opts.updateNetworkCellularGatewayDhcp.dnsCustomNameservers = [""];

          instance.updateNetworkCellularGatewayDhcp(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStackRoutingInterfaceDhcp', function() {
        it('should call updateNetworkSwitchStackRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStackRoutingInterfaceDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp = new MerakiDashboardApi.UpdateNetworkSwitchStackRoutingInterfaceDhcp();
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpMode = "dhcpDisabled";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpRelayServerIps = [""];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpLeaseTime = "30 minutes";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dnsNameserversOption = "googlePublicDns";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dnsCustomNameservers = [""];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootOptionsEnabled = false;
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootNextServer = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootFileName = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].code = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].type = "text";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].value = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].start = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].end = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].comment = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].name = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].mac = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].ip = "";

          instance.updateNetworkSwitchStackRoutingInterfaceDhcp(networkId, switchStackId, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
