/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.RfProfilesApi();
  });

  describe('(package)', function() {
    describe('RfProfilesApi', function() {
      describe('createNetworkWirelessRfProfile', function() {
        it('should call createNetworkWirelessRfProfile successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkWirelessRfProfile call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkWirelessRfProfile = new MerakiDashboardApi.CreateNetworkWirelessRfProfile();
          createNetworkWirelessRfProfile.name = "";
          createNetworkWirelessRfProfile.clientBalancingEnabled = false;
          createNetworkWirelessRfProfile.minBitrateType = "band";
          createNetworkWirelessRfProfile.bandSelectionType = "ssid";
          createNetworkWirelessRfProfile.apBandSettings = new MerakiDashboardApi.NetworksnetworkIdwirelessrfProfilesApBandSettings();
          createNetworkWirelessRfProfile.apBandSettings.bandOperationMode = "dual";
          createNetworkWirelessRfProfile.apBandSettings.bandSteeringEnabled = false;
          createNetworkWirelessRfProfile.twoFourGhzSettings = new MerakiDashboardApi.NetworksnetworkIdwirelessrfProfilesTwoFourGhzSettings();
          createNetworkWirelessRfProfile.twoFourGhzSettings.maxPower = 0;
          createNetworkWirelessRfProfile.twoFourGhzSettings.minPower = 0;
          createNetworkWirelessRfProfile.twoFourGhzSettings.minBitrate = 0.0;
          createNetworkWirelessRfProfile.twoFourGhzSettings.validAutoChannels = [0];
          createNetworkWirelessRfProfile.twoFourGhzSettings.axEnabled = false;
          createNetworkWirelessRfProfile.twoFourGhzSettings.rxsop = 0;
          createNetworkWirelessRfProfile.fiveGhzSettings = new MerakiDashboardApi.NetworksnetworkIdwirelessrfProfilesFiveGhzSettings();
          createNetworkWirelessRfProfile.fiveGhzSettings.maxPower = 0;
          createNetworkWirelessRfProfile.fiveGhzSettings.minPower = 0;
          createNetworkWirelessRfProfile.fiveGhzSettings.minBitrate = 0;
          createNetworkWirelessRfProfile.fiveGhzSettings.validAutoChannels = [0];
          createNetworkWirelessRfProfile.fiveGhzSettings.channelWidth = "";
          createNetworkWirelessRfProfile.fiveGhzSettings.rxsop = 0;

          instance.createNetworkWirelessRfProfile(networkId, createNetworkWirelessRfProfile, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkWirelessRfProfile', function() {
        it('should call deleteNetworkWirelessRfProfile successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkWirelessRfProfile call
          /*
          var networkId = "networkId_example";
          var rfProfileId = "rfProfileId_example";

          instance.deleteNetworkWirelessRfProfile(networkId, rfProfileId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessRfProfile', function() {
        it('should call getNetworkWirelessRfProfile successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessRfProfile call and complete the assertions
          /*
          var networkId = "networkId_example";
          var rfProfileId = "rfProfileId_example";

          instance.getNetworkWirelessRfProfile(networkId, rfProfileId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessRfProfiles', function() {
        it('should call getNetworkWirelessRfProfiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessRfProfiles call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.includeTemplateProfiles = true;

          instance.getNetworkWirelessRfProfiles(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessRfProfile', function() {
        it('should call updateNetworkWirelessRfProfile successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessRfProfile call and complete the assertions
          /*
          var networkId = "networkId_example";
          var rfProfileId = "rfProfileId_example";
          var opts = {};
          opts.updateNetworkWirelessRfProfile = new MerakiDashboardApi.UpdateNetworkWirelessRfProfile();
          opts.updateNetworkWirelessRfProfile.name = "";
          opts.updateNetworkWirelessRfProfile.clientBalancingEnabled = false;
          opts.updateNetworkWirelessRfProfile.minBitrateType = "band";
          opts.updateNetworkWirelessRfProfile.bandSelectionType = "ssid";
          opts.updateNetworkWirelessRfProfile.apBandSettings = new MerakiDashboardApi.NetworksnetworkIdwirelessrfProfilesrfProfileIdApBandSettings();
          opts.updateNetworkWirelessRfProfile.apBandSettings.bandOperationMode = "dual";
          opts.updateNetworkWirelessRfProfile.apBandSettings.bandSteeringEnabled = false;
          opts.updateNetworkWirelessRfProfile.twoFourGhzSettings = new MerakiDashboardApi.NetworksnetworkIdwirelessrfProfilesrfProfileIdTwoFourGhzSettings();
          opts.updateNetworkWirelessRfProfile.twoFourGhzSettings.maxPower = 0;
          opts.updateNetworkWirelessRfProfile.twoFourGhzSettings.minPower = 0;
          opts.updateNetworkWirelessRfProfile.twoFourGhzSettings.minBitrate = 0.0;
          opts.updateNetworkWirelessRfProfile.twoFourGhzSettings.validAutoChannels = [0];
          opts.updateNetworkWirelessRfProfile.twoFourGhzSettings.axEnabled = false;
          opts.updateNetworkWirelessRfProfile.twoFourGhzSettings.rxsop = 0;
          opts.updateNetworkWirelessRfProfile.fiveGhzSettings = new MerakiDashboardApi.NetworksnetworkIdwirelessrfProfilesrfProfileIdFiveGhzSettings();
          opts.updateNetworkWirelessRfProfile.fiveGhzSettings.maxPower = 0;
          opts.updateNetworkWirelessRfProfile.fiveGhzSettings.minPower = 0;
          opts.updateNetworkWirelessRfProfile.fiveGhzSettings.minBitrate = 0;
          opts.updateNetworkWirelessRfProfile.fiveGhzSettings.validAutoChannels = [0];
          opts.updateNetworkWirelessRfProfile.fiveGhzSettings.channelWidth = "";
          opts.updateNetworkWirelessRfProfile.fiveGhzSettings.rxsop = 0;

          instance.updateNetworkWirelessRfProfile(networkId, rfProfileId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
