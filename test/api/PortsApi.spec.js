/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.PortsApi();
  });

  describe('(package)', function() {
    describe('PortsApi', function() {
      describe('cycleDeviceSwitchPorts', function() {
        it('should call cycleDeviceSwitchPorts successfully', function(done) {
          // TODO: uncomment, update parameter values for cycleDeviceSwitchPorts call and complete the assertions
          /*
          var serial = "serial_example";
          var cycleDeviceSwitchPorts = new MerakiDashboardApi.CycleDeviceSwitchPorts();
          cycleDeviceSwitchPorts.ports = [""];

          instance.cycleDeviceSwitchPorts(serial, cycleDeviceSwitchPorts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchPort', function() {
        it('should call getDeviceSwitchPort successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchPort call and complete the assertions
          /*
          var serial = "serial_example";
          var portId = "portId_example";

          instance.getDeviceSwitchPort(serial, portId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchPorts', function() {
        it('should call getDeviceSwitchPorts successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchPorts call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceSwitchPorts(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchPortsStatuses', function() {
        it('should call getDeviceSwitchPortsStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchPortsStatuses call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;

          instance.getDeviceSwitchPortsStatuses(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchPortsStatusesPackets', function() {
        it('should call getDeviceSwitchPortsStatusesPackets successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchPortsStatusesPackets call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;

          instance.getDeviceSwitchPortsStatusesPackets(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkAppliancePort', function() {
        it('should call getNetworkAppliancePort successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkAppliancePort call and complete the assertions
          /*
          var networkId = "networkId_example";
          var portId = "portId_example";

          instance.getNetworkAppliancePort(networkId, portId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkAppliancePorts', function() {
        it('should call getNetworkAppliancePorts successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkAppliancePorts call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkAppliancePorts(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplateSwitchProfilePort', function() {
        it('should call getOrganizationConfigTemplateSwitchProfilePort successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplateSwitchProfilePort call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var profileId = "profileId_example";
          var portId = "portId_example";

          instance.getOrganizationConfigTemplateSwitchProfilePort(organizationId, configTemplateId, profileId, portId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplateSwitchProfilePorts', function() {
        it('should call getOrganizationConfigTemplateSwitchProfilePorts successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplateSwitchProfilePorts call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var profileId = "profileId_example";

          instance.getOrganizationConfigTemplateSwitchProfilePorts(organizationId, configTemplateId, profileId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchPort', function() {
        it('should call updateDeviceSwitchPort successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchPort call and complete the assertions
          /*
          var serial = "serial_example";
          var portId = "portId_example";
          var opts = {};
          opts.updateDeviceSwitchPort = new MerakiDashboardApi.UpdateDeviceSwitchPort();
          opts.updateDeviceSwitchPort.name = "";
          opts.updateDeviceSwitchPort.tags = [""];
          opts.updateDeviceSwitchPort.enabled = false;
          opts.updateDeviceSwitchPort.type = "trunk";
          opts.updateDeviceSwitchPort.vlan = 0;
          opts.updateDeviceSwitchPort.voiceVlan = 0;
          opts.updateDeviceSwitchPort.allowedVlans = "";
          opts.updateDeviceSwitchPort.poeEnabled = false;
          opts.updateDeviceSwitchPort.isolationEnabled = false;
          opts.updateDeviceSwitchPort.rstpEnabled = false;
          opts.updateDeviceSwitchPort.stpGuard = "disabled";
          opts.updateDeviceSwitchPort.linkNegotiation = "";
          opts.updateDeviceSwitchPort.portScheduleId = "";
          opts.updateDeviceSwitchPort.udld = "Alert only";
          opts.updateDeviceSwitchPort.accessPolicyType = "Open";
          opts.updateDeviceSwitchPort.accessPolicyNumber = 0;
          opts.updateDeviceSwitchPort.macAllowList = [""];
          opts.updateDeviceSwitchPort.stickyMacAllowList = [""];
          opts.updateDeviceSwitchPort.stickyMacAllowListLimit = 0;
          opts.updateDeviceSwitchPort.stormControlEnabled = false;
          opts.updateDeviceSwitchPort.flexibleStackingEnabled = false;

          instance.updateDeviceSwitchPort(serial, portId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkAppliancePort', function() {
        it('should call updateNetworkAppliancePort successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkAppliancePort call and complete the assertions
          /*
          var networkId = "networkId_example";
          var portId = "portId_example";
          var opts = {};
          opts.updateNetworkAppliancePort = new MerakiDashboardApi.UpdateNetworkAppliancePort();
          opts.updateNetworkAppliancePort.enabled = false;
          opts.updateNetworkAppliancePort.dropUntaggedTraffic = false;
          opts.updateNetworkAppliancePort.type = "";
          opts.updateNetworkAppliancePort.vlan = 0;
          opts.updateNetworkAppliancePort.allowedVlans = "";
          opts.updateNetworkAppliancePort.accessPolicy = "";

          instance.updateNetworkAppliancePort(networkId, portId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationConfigTemplateSwitchProfilePort', function() {
        it('should call updateOrganizationConfigTemplateSwitchProfilePort successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationConfigTemplateSwitchProfilePort call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var profileId = "profileId_example";
          var portId = "portId_example";
          var opts = {};
          opts.updateOrganizationConfigTemplateSwitchProfilePort = new MerakiDashboardApi.UpdateOrganizationConfigTemplateSwitchProfilePort();
          opts.updateOrganizationConfigTemplateSwitchProfilePort.name = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.tags = [""];
          opts.updateOrganizationConfigTemplateSwitchProfilePort.enabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.type = "trunk";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.vlan = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.voiceVlan = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.allowedVlans = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.poeEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.isolationEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.rstpEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stpGuard = "disabled";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.linkNegotiation = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.portScheduleId = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.udld = "Alert only";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.accessPolicyType = "Open";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.accessPolicyNumber = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.macAllowList = [""];
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stickyMacAllowList = [""];
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stickyMacAllowListLimit = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stormControlEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.flexibleStackingEnabled = false;

          instance.updateOrganizationConfigTemplateSwitchProfilePort(organizationId, configTemplateId, profileId, portId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
