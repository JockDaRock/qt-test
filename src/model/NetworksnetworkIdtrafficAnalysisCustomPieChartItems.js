/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.MerakiDashboardApi) {
      root.MerakiDashboardApi = {};
    }
    root.MerakiDashboardApi.NetworksnetworkIdtrafficAnalysisCustomPieChartItems = factory(root.MerakiDashboardApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The NetworksnetworkIdtrafficAnalysisCustomPieChartItems model module.
   * @module model/NetworksnetworkIdtrafficAnalysisCustomPieChartItems
   * @version 1.1.0
   */

  /**
   * Constructs a new <code>NetworksnetworkIdtrafficAnalysisCustomPieChartItems</code>.
   * @alias module:model/NetworksnetworkIdtrafficAnalysisCustomPieChartItems
   * @class
   * @param name {String} The name of the custom pie chart item.
   * @param type {module:model/NetworksnetworkIdtrafficAnalysisCustomPieChartItems.TypeEnum}     The signature type for the custom pie chart item. Can be one of 'host', 'port' or 'ipRange'. 
   * @param value {String}     The value of the custom pie chart item. Valid syntax depends on the signature type of the chart item     (see sample request/response for more details). 
   */
  var exports = function(name, type, value) {
    this.name = name;
    this.type = type;
    this.value = value;
  };

  /**
   * Constructs a <code>NetworksnetworkIdtrafficAnalysisCustomPieChartItems</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/NetworksnetworkIdtrafficAnalysisCustomPieChartItems} obj Optional instance to populate.
   * @return {module:model/NetworksnetworkIdtrafficAnalysisCustomPieChartItems} The populated <code>NetworksnetworkIdtrafficAnalysisCustomPieChartItems</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('value'))
        obj.value = ApiClient.convertToType(data['value'], 'String');
    }
    return obj;
  }

  /**
   * The name of the custom pie chart item.
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   *     The signature type for the custom pie chart item. Can be one of 'host', 'port' or 'ipRange'. 
   * @member {module:model/NetworksnetworkIdtrafficAnalysisCustomPieChartItems.TypeEnum} type
   */
  exports.prototype.type = undefined;

  /**
   *     The value of the custom pie chart item. Valid syntax depends on the signature type of the chart item     (see sample request/response for more details). 
   * @member {String} value
   */
  exports.prototype.value = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "host"
     * @const
     */
    host: "host",

    /**
     * value: "port"
     * @const
     */
    port: "port",

    /**
     * value: "ipRange"
     * @const
     */
    ipRange: "ipRange"
  };

  return exports;

}));
