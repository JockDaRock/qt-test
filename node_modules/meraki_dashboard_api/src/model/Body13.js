/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 August, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions from './DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions';
import DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments from './DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments';
import DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges from './DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges';

/**
* The Body13 model module.
* @module model/Body13
* @version 1.0.0
*/
export default class Body13 {
    /**
    * Constructs a new <code>Body13</code>.
    * @alias module:model/Body13
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>Body13</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Body13} obj Optional instance to populate.
    * @return {module:model/Body13} The populated <code>Body13</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Body13();
                        
            
            if (data.hasOwnProperty('dhcpMode')) {
                obj['dhcpMode'] = ApiClient.convertToType(data['dhcpMode'], 'String');
            }
            if (data.hasOwnProperty('dhcpRelayServerIps')) {
                obj['dhcpRelayServerIps'] = ApiClient.convertToType(data['dhcpRelayServerIps'], ['String']);
            }
            if (data.hasOwnProperty('dhcpLeaseTime')) {
                obj['dhcpLeaseTime'] = ApiClient.convertToType(data['dhcpLeaseTime'], 'String');
            }
            if (data.hasOwnProperty('dnsNameserversOption')) {
                obj['dnsNameserversOption'] = ApiClient.convertToType(data['dnsNameserversOption'], 'String');
            }
            if (data.hasOwnProperty('dnsCustomNameservers')) {
                obj['dnsCustomNameservers'] = ApiClient.convertToType(data['dnsCustomNameservers'], ['String']);
            }
            if (data.hasOwnProperty('bootOptionsEnabled')) {
                obj['bootOptionsEnabled'] = ApiClient.convertToType(data['bootOptionsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('bootNextServer')) {
                obj['bootNextServer'] = ApiClient.convertToType(data['bootNextServer'], 'String');
            }
            if (data.hasOwnProperty('bootFileName')) {
                obj['bootFileName'] = ApiClient.convertToType(data['bootFileName'], 'String');
            }
            if (data.hasOwnProperty('dhcpOptions')) {
                obj['dhcpOptions'] = ApiClient.convertToType(data['dhcpOptions'], [DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions]);
            }
            if (data.hasOwnProperty('reservedIpRanges')) {
                obj['reservedIpRanges'] = ApiClient.convertToType(data['reservedIpRanges'], [DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges]);
            }
            if (data.hasOwnProperty('fixedIpAssignments')) {
                obj['fixedIpAssignments'] = ApiClient.convertToType(data['fixedIpAssignments'], [DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments]);
            }
        }
        return obj;
    }

    /**
    * The DHCP mode options for the switch interface ('dhcpDisabled', 'dhcpRelay' or 'dhcpServer')
    * @member {module:model/Body13.DhcpModeEnum} dhcpMode
    */
    'dhcpMode' = undefined;
    /**
    * The DHCP relay server IPs to which DHCP packets would get relayed for the switch interface
    * @member {Array.<String>} dhcpRelayServerIps
    */
    'dhcpRelayServerIps' = undefined;
    /**
    * The DHCP lease time config for the dhcp server running on switch interface ('30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week')
    * @member {module:model/Body13.DhcpLeaseTimeEnum} dhcpLeaseTime
    */
    'dhcpLeaseTime' = undefined;
    /**
    * The DHCP name server option for the dhcp server running on the switch interface ('googlePublicDns', 'openDns' or 'custom')
    * @member {module:model/Body13.DnsNameserversOptionEnum} dnsNameserversOption
    */
    'dnsNameserversOption' = undefined;
    /**
    * The DHCP name server IPs when DHCP name server option is 'custom'
    * @member {Array.<String>} dnsCustomNameservers
    */
    'dnsCustomNameservers' = undefined;
    /**
    * Enable DHCP boot options to provide PXE boot options configs for the dhcp server running on the switch interface
    * @member {Boolean} bootOptionsEnabled
    */
    'bootOptionsEnabled' = undefined;
    /**
    * The PXE boot server IP for the DHCP server running on the switch interface
    * @member {String} bootNextServer
    */
    'bootNextServer' = undefined;
    /**
    * The PXE boot server filename for the DHCP server running on the switch interface
    * @member {String} bootFileName
    */
    'bootFileName' = undefined;
    /**
    * Array of DHCP options consisting of code, type and value for the DHCP server running on the switch interface
    * @member {Array.<module:model/DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions>} dhcpOptions
    */
    'dhcpOptions' = undefined;
    /**
    * Array of DHCP reserved IP assignments for the DHCP server running on the switch interface
    * @member {Array.<module:model/DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges>} reservedIpRanges
    */
    'reservedIpRanges' = undefined;
    /**
    * Array of DHCP fixed IP assignments for the DHCP server running on the switch interface
    * @member {Array.<module:model/DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments>} fixedIpAssignments
    */
    'fixedIpAssignments' = undefined;



    /**
    * Allowed values for the <code>dhcpMode</code> property.
    * @enum {String}
    * @readonly
    */
    static DhcpModeEnum = {
        /**
         * value: "dhcpDisabled"
         * @const
         */
        "dhcpDisabled": "dhcpDisabled",
        /**
         * value: "dhcpRelay"
         * @const
         */
        "dhcpRelay": "dhcpRelay",
        /**
         * value: "dhcpServer"
         * @const
         */
        "dhcpServer": "dhcpServer"    };
    /**
    * Allowed values for the <code>dhcpLeaseTime</code> property.
    * @enum {String}
    * @readonly
    */
    static DhcpLeaseTimeEnum = {
        /**
         * value: "30 minutes"
         * @const
         */
        "30 minutes": "30 minutes",
        /**
         * value: "1 hour"
         * @const
         */
        "1 hour": "1 hour",
        /**
         * value: "4 hours"
         * @const
         */
        "4 hours": "4 hours",
        /**
         * value: "12 hours"
         * @const
         */
        "12 hours": "12 hours",
        /**
         * value: "1 day"
         * @const
         */
        "1 day": "1 day",
        /**
         * value: "1 week"
         * @const
         */
        "1 week": "1 week"    };
    /**
    * Allowed values for the <code>dnsNameserversOption</code> property.
    * @enum {String}
    * @readonly
    */
    static DnsNameserversOptionEnum = {
        /**
         * value: "googlePublicDns"
         * @const
         */
        "googlePublicDns": "googlePublicDns",
        /**
         * value: "openDns"
         * @const
         */
        "openDns": "openDns",
        /**
         * value: "custom"
         * @const
         */
        "custom": "custom"    };

}
