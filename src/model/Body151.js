/**
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 05 August, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
* The Body151 model module.
* @module model/Body151
* @version 1.0.0
*/
export default class Body151 {
    /**
    * Constructs a new <code>Body151</code>.
    * @alias module:model/Body151
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>Body151</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Body151} obj Optional instance to populate.
    * @return {module:model/Body151} The populated <code>Body151</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Body151();
                        
            
            if (data.hasOwnProperty('v2cEnabled')) {
                obj['v2cEnabled'] = ApiClient.convertToType(data['v2cEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('v3Enabled')) {
                obj['v3Enabled'] = ApiClient.convertToType(data['v3Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('v3AuthMode')) {
                obj['v3AuthMode'] = ApiClient.convertToType(data['v3AuthMode'], 'String');
            }
            if (data.hasOwnProperty('v3AuthPass')) {
                obj['v3AuthPass'] = ApiClient.convertToType(data['v3AuthPass'], 'String');
            }
            if (data.hasOwnProperty('v3PrivMode')) {
                obj['v3PrivMode'] = ApiClient.convertToType(data['v3PrivMode'], 'String');
            }
            if (data.hasOwnProperty('v3PrivPass')) {
                obj['v3PrivPass'] = ApiClient.convertToType(data['v3PrivPass'], 'String');
            }
            if (data.hasOwnProperty('peerIps')) {
                obj['peerIps'] = ApiClient.convertToType(data['peerIps'], ['String']);
            }
        }
        return obj;
    }

    /**
    * Boolean indicating whether SNMP version 2c is enabled for the organization.
    * @member {Boolean} v2cEnabled
    */
    'v2cEnabled' = undefined;
    /**
    * Boolean indicating whether SNMP version 3 is enabled for the organization.
    * @member {Boolean} v3Enabled
    */
    'v3Enabled' = undefined;
    /**
    * The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'.
    * @member {module:model/Body151.V3AuthModeEnum} v3AuthMode
    */
    'v3AuthMode' = undefined;
    /**
    * The SNMP version 3 authentication password. Must be at least 8 characters if specified.
    * @member {String} v3AuthPass
    */
    'v3AuthPass' = undefined;
    /**
    * The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'.
    * @member {module:model/Body151.V3PrivModeEnum} v3PrivMode
    */
    'v3PrivMode' = undefined;
    /**
    * The SNMP version 3 privacy password. Must be at least 8 characters if specified.
    * @member {String} v3PrivPass
    */
    'v3PrivPass' = undefined;
    /**
    * The list of IPv4 addresses that are allowed to access the SNMP server.
    * @member {Array.<String>} peerIps
    */
    'peerIps' = undefined;



    /**
    * Allowed values for the <code>v3AuthMode</code> property.
    * @enum {String}
    * @readonly
    */
    static V3AuthModeEnum = {
        /**
         * value: "MD5"
         * @const
         */
        "MD5": "MD5",
        /**
         * value: "SHA"
         * @const
         */
        "SHA": "SHA"    };
    /**
    * Allowed values for the <code>v3PrivMode</code> property.
    * @enum {String}
    * @readonly
    */
    static V3PrivModeEnum = {
        /**
         * value: "DES"
         * @const
         */
        "DES": "DES",
        /**
         * value: "AES128"
         * @const
         */
        "AES128": "AES128"    };

}
