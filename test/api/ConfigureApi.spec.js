/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.ConfigureApi();
  });

  describe('(package)', function() {
    describe('ConfigureApi', function() {
      describe('addNetworkSwitchStack', function() {
        it('should call addNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for addNetworkSwitchStack call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var addNetworkSwitchStack = new MerakiDashboardApi.AddNetworkSwitchStack();
          addNetworkSwitchStack.serial = "";

          instance.addNetworkSwitchStack(networkId, switchStackId, addNetworkSwitchStack, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('assignOrganizationLicensesSeats', function() {
        it('should call assignOrganizationLicensesSeats successfully', function(done) {
          // TODO: uncomment, update parameter values for assignOrganizationLicensesSeats call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var assignOrganizationLicensesSeats = new MerakiDashboardApi.AssignOrganizationLicensesSeats();
          assignOrganizationLicensesSeats.licenseId = "";
          assignOrganizationLicensesSeats.networkId = "";
          assignOrganizationLicensesSeats.seatCount = 0;

          instance.assignOrganizationLicensesSeats(organizationId, assignOrganizationLicensesSeats, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bindNetwork', function() {
        it('should call bindNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for bindNetwork call and complete the assertions
          /*
          var networkId = "networkId_example";
          var bindNetwork = new MerakiDashboardApi.BindNetwork();
          bindNetwork.configTemplateId = "";
          bindNetwork.autoBind = false;

          instance.bindNetwork(networkId, bindNetwork, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('claimIntoOrganization', function() {
        it('should call claimIntoOrganization successfully', function(done) {
          // TODO: uncomment, update parameter values for claimIntoOrganization call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.claimIntoOrganization = new MerakiDashboardApi.ClaimIntoOrganization();
          opts.claimIntoOrganization.orders = [""];
          opts.claimIntoOrganization.serials = [""];
          opts.claimIntoOrganization.licenses = [new MerakiDashboardApi.OrganizationsorganizationIdclaimLicenses()];
          opts.claimIntoOrganization.licenses[0].key = "";
          opts.claimIntoOrganization.licenses[0].mode = "addDevices";

          instance.claimIntoOrganization(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('claimNetworkDevices', function() {
        it('should call claimNetworkDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for claimNetworkDevices call
          /*
          var networkId = "networkId_example";
          var claimNetworkDevices = new MerakiDashboardApi.ClaimNetworkDevices();
          claimNetworkDevices.serials = [""];

          instance.claimNetworkDevices(networkId, claimNetworkDevices, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cloneOrganization', function() {
        it('should call cloneOrganization successfully', function(done) {
          // TODO: uncomment, update parameter values for cloneOrganization call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var cloneOrganization = new MerakiDashboardApi.CloneOrganization();
          cloneOrganization.name = "";

          instance.cloneOrganization(organizationId, cloneOrganization, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('combineOrganizationNetworks', function() {
        it('should call combineOrganizationNetworks successfully', function(done) {
          // TODO: uncomment, update parameter values for combineOrganizationNetworks call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var combineOrganizationNetworks = new MerakiDashboardApi.CombineOrganizationNetworks();
          combineOrganizationNetworks.name = "";
          combineOrganizationNetworks.networkIds = [""];
          combineOrganizationNetworks.enrollmentString = "";

          instance.combineOrganizationNetworks(organizationId, combineOrganizationNetworks, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDeviceSwitchRoutingInterface', function() {
        it('should call createDeviceSwitchRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for createDeviceSwitchRoutingInterface call and complete the assertions
          /*
          var serial = "serial_example";
          var createDeviceSwitchRoutingInterface = new MerakiDashboardApi.CreateDeviceSwitchRoutingInterface();
          createDeviceSwitchRoutingInterface.name = "";
          createDeviceSwitchRoutingInterface.subnet = "";
          createDeviceSwitchRoutingInterface.interfaceIp = "";
          createDeviceSwitchRoutingInterface.multicastRouting = "disabled";
          createDeviceSwitchRoutingInterface.vlanId = 0;
          createDeviceSwitchRoutingInterface.defaultGateway = "";
          createDeviceSwitchRoutingInterface.ospfSettings = new MerakiDashboardApi.DevicesserialswitchroutinginterfacesOspfSettings();
          createDeviceSwitchRoutingInterface.ospfSettings.area = "";
          createDeviceSwitchRoutingInterface.ospfSettings.cost = 0;
          createDeviceSwitchRoutingInterface.ospfSettings.isPassiveEnabled = false;

          instance.createDeviceSwitchRoutingInterface(serial, createDeviceSwitchRoutingInterface, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDeviceSwitchRoutingStaticRoute', function() {
        it('should call createDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for createDeviceSwitchRoutingStaticRoute call and complete the assertions
          /*
          var serial = "serial_example";
          var createDeviceSwitchRoutingStaticRoute = new MerakiDashboardApi.CreateDeviceSwitchRoutingStaticRoute();
          createDeviceSwitchRoutingStaticRoute.name = "";
          createDeviceSwitchRoutingStaticRoute.subnet = "";
          createDeviceSwitchRoutingStaticRoute.nextHopIp = "";
          createDeviceSwitchRoutingStaticRoute.advertiseViaOspfEnabled = false;
          createDeviceSwitchRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.createDeviceSwitchRoutingStaticRoute(serial, createDeviceSwitchRoutingStaticRoute, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkApplianceStaticRoute', function() {
        it('should call createNetworkApplianceStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkApplianceStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkApplianceStaticRoute = new MerakiDashboardApi.CreateNetworkApplianceStaticRoute();
          createNetworkApplianceStaticRoute.name = "";
          createNetworkApplianceStaticRoute.subnet = "";
          createNetworkApplianceStaticRoute.gatewayIp = "";

          instance.createNetworkApplianceStaticRoute(networkId, createNetworkApplianceStaticRoute, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkApplianceTrafficShapingCustomPerformanceClass', function() {
        it('should call createNetworkApplianceTrafficShapingCustomPerformanceClass successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkApplianceTrafficShapingCustomPerformanceClass call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkApplianceTrafficShapingCustomPerformanceClass = new MerakiDashboardApi.CreateNetworkApplianceTrafficShapingCustomPerformanceClass();
          createNetworkApplianceTrafficShapingCustomPerformanceClass.name = "";
          createNetworkApplianceTrafficShapingCustomPerformanceClass.maxLatency = 0;
          createNetworkApplianceTrafficShapingCustomPerformanceClass.maxJitter = 0;
          createNetworkApplianceTrafficShapingCustomPerformanceClass.maxLossPercentage = 0;

          instance.createNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, createNetworkApplianceTrafficShapingCustomPerformanceClass, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkApplianceVlan', function() {
        it('should call createNetworkApplianceVlan successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkApplianceVlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkApplianceVlan = new MerakiDashboardApi.CreateNetworkApplianceVlan();
          createNetworkApplianceVlan.id = "";
          createNetworkApplianceVlan.name = "";
          createNetworkApplianceVlan.subnet = "";
          createNetworkApplianceVlan.applianceIp = "";
          createNetworkApplianceVlan.groupPolicyId = "";

          instance.createNetworkApplianceVlan(networkId, createNetworkApplianceVlan, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkCameraQualityRetentionProfile', function() {
        it('should call createNetworkCameraQualityRetentionProfile successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkCameraQualityRetentionProfile call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkCameraQualityRetentionProfile = new MerakiDashboardApi.CreateNetworkCameraQualityRetentionProfile();
          createNetworkCameraQualityRetentionProfile.name = "";
          createNetworkCameraQualityRetentionProfile.motionBasedRetentionEnabled = false;
          createNetworkCameraQualityRetentionProfile.restrictedBandwidthModeEnabled = false;
          createNetworkCameraQualityRetentionProfile.audioRecordingEnabled = false;
          createNetworkCameraQualityRetentionProfile.cloudArchiveEnabled = false;
          createNetworkCameraQualityRetentionProfile.motionDetectorVersion = 0;
          createNetworkCameraQualityRetentionProfile.scheduleId = "";
          createNetworkCameraQualityRetentionProfile.maxRetentionDays = 0;
          createNetworkCameraQualityRetentionProfile.videoSettings = new MerakiDashboardApi.NetworksnetworkIdcameraqualityRetentionProfilesVideoSettings();
          createNetworkCameraQualityRetentionProfile.videoSettings.mV21MV71 = new MerakiDashboardApi.NetworksnetworkIdcameraqualityRetentionProfilesVideoSettingsMV21MV71();
          createNetworkCameraQualityRetentionProfile.videoSettings.mV21MV71.quality = "Standard";
          createNetworkCameraQualityRetentionProfile.videoSettings.mV21MV71.resolution = "1280x720";
          createNetworkCameraQualityRetentionProfile.videoSettings.mV12MV22MV72 = new MerakiDashboardApi.NetworksnetworkIdcameraqualityRetentionProfilesVideoSettingsMV12MV22MV72();
          createNetworkCameraQualityRetentionProfile.videoSettings.mV12MV22MV72.quality = "Standard";
          createNetworkCameraQualityRetentionProfile.videoSettings.mV12MV22MV72.resolution = "1280x720";
          createNetworkCameraQualityRetentionProfile.videoSettings.mV32 = new MerakiDashboardApi.NetworksnetworkIdcameraqualityRetentionProfilesVideoSettingsMV32();
          createNetworkCameraQualityRetentionProfile.videoSettings.mV32.quality = "Standard";
          createNetworkCameraQualityRetentionProfile.videoSettings.mV32.resolution = "1080x1080";
          createNetworkCameraQualityRetentionProfile.videoSettings.mV12WE = new MerakiDashboardApi.NetworksnetworkIdcameraqualityRetentionProfilesVideoSettingsMV12WE();
          createNetworkCameraQualityRetentionProfile.videoSettings.mV12WE.quality = "Standard";
          createNetworkCameraQualityRetentionProfile.videoSettings.mV12WE.resolution = "1280x720";
          createNetworkCameraQualityRetentionProfile.videoSettings.mV22XMV72X = new MerakiDashboardApi.NetworksnetworkIdcameraqualityRetentionProfilesVideoSettingsMV22XMV72X();
          createNetworkCameraQualityRetentionProfile.videoSettings.mV22XMV72X.quality = "Standard";
          createNetworkCameraQualityRetentionProfile.videoSettings.mV22XMV72X.resolution = "1280x720";

          instance.createNetworkCameraQualityRetentionProfile(networkId, createNetworkCameraQualityRetentionProfile, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkFloorPlan', function() {
        it('should call createNetworkFloorPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkFloorPlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkFloorPlan = new MerakiDashboardApi.CreateNetworkFloorPlan();
          createNetworkFloorPlan.name = "";
          createNetworkFloorPlan.center = new MerakiDashboardApi.NetworksnetworkIdfloorPlansCenter();
          createNetworkFloorPlan.center.lat = 0.0;
          createNetworkFloorPlan.center.lng = 0.0;
          createNetworkFloorPlan.bottomLeftCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansBottomLeftCorner();
          createNetworkFloorPlan.bottomLeftCorner.lat = 0.0;
          createNetworkFloorPlan.bottomLeftCorner.lng = 0.0;
          createNetworkFloorPlan.bottomRightCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansBottomRightCorner();
          createNetworkFloorPlan.bottomRightCorner.lat = 0.0;
          createNetworkFloorPlan.bottomRightCorner.lng = 0.0;
          createNetworkFloorPlan.topLeftCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansTopLeftCorner();
          createNetworkFloorPlan.topLeftCorner.lat = 0.0;
          createNetworkFloorPlan.topLeftCorner.lng = 0.0;
          createNetworkFloorPlan.topRightCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansTopRightCorner();
          createNetworkFloorPlan.topRightCorner.lat = 0.0;
          createNetworkFloorPlan.topRightCorner.lng = 0.0;
          createNetworkFloorPlan.imageContents = ""undefined;

          instance.createNetworkFloorPlan(networkId, createNetworkFloorPlan, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkGroupPolicy', function() {
        it('should call createNetworkGroupPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkGroupPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkGroupPolicy = new MerakiDashboardApi.CreateNetworkGroupPolicy();
          createNetworkGroupPolicy.name = "";
          createNetworkGroupPolicy.scheduling = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesScheduling();
          createNetworkGroupPolicy.scheduling.enabled = false;
          createNetworkGroupPolicy.scheduling.monday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingMonday();
          createNetworkGroupPolicy.scheduling.monday.active = false;
          createNetworkGroupPolicy.scheduling.monday.from = "";
          createNetworkGroupPolicy.scheduling.monday.to = "";
          createNetworkGroupPolicy.scheduling.tuesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingTuesday();
          createNetworkGroupPolicy.scheduling.tuesday.active = false;
          createNetworkGroupPolicy.scheduling.tuesday.from = "";
          createNetworkGroupPolicy.scheduling.tuesday.to = "";
          createNetworkGroupPolicy.scheduling.wednesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingWednesday();
          createNetworkGroupPolicy.scheduling.wednesday.active = false;
          createNetworkGroupPolicy.scheduling.wednesday.from = "";
          createNetworkGroupPolicy.scheduling.wednesday.to = "";
          createNetworkGroupPolicy.scheduling.thursday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingThursday();
          createNetworkGroupPolicy.scheduling.thursday.active = false;
          createNetworkGroupPolicy.scheduling.thursday.from = "";
          createNetworkGroupPolicy.scheduling.thursday.to = "";
          createNetworkGroupPolicy.scheduling.friday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingFriday();
          createNetworkGroupPolicy.scheduling.friday.active = false;
          createNetworkGroupPolicy.scheduling.friday.from = "";
          createNetworkGroupPolicy.scheduling.friday.to = "";
          createNetworkGroupPolicy.scheduling.saturday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSaturday();
          createNetworkGroupPolicy.scheduling.saturday.active = false;
          createNetworkGroupPolicy.scheduling.saturday.from = "";
          createNetworkGroupPolicy.scheduling.saturday.to = "";
          createNetworkGroupPolicy.scheduling.sunday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSunday();
          createNetworkGroupPolicy.scheduling.sunday.active = false;
          createNetworkGroupPolicy.scheduling.sunday.from = "";
          createNetworkGroupPolicy.scheduling.sunday.to = "";
          createNetworkGroupPolicy.bandwidth = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBandwidth();
          createNetworkGroupPolicy.bandwidth.settings = "network default";
          createNetworkGroupPolicy.bandwidth.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBandwidthBandwidthLimits();
          createNetworkGroupPolicy.bandwidth.bandwidthLimits.limitUp = 0;
          createNetworkGroupPolicy.bandwidth.bandwidthLimits.limitDown = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShaping();
          createNetworkGroupPolicy.firewallAndTrafficShaping.settings = "network default";
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingTrafficShapingRules()];
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesDefinitions()];
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions[0].type = "application";
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions[0].value = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimits();
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.settings = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimitsBandwidthLimits();
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits.limitUp = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits.limitDown = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].dscpTagValue = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].pcpTagValue = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].priority = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules()];
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].comment = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].policy = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].protocol = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].destPort = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].destCidr = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL7FirewallRules()];
          createNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].policy = "deny";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].type = "application";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].value = "";
          createNetworkGroupPolicy.contentFiltering = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFiltering();
          createNetworkGroupPolicy.contentFiltering.allowedUrlPatterns = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringAllowedUrlPatterns();
          createNetworkGroupPolicy.contentFiltering.allowedUrlPatterns.settings = "network default";
          createNetworkGroupPolicy.contentFiltering.allowedUrlPatterns.patterns = [""];
          createNetworkGroupPolicy.contentFiltering.blockedUrlPatterns = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringBlockedUrlPatterns();
          createNetworkGroupPolicy.contentFiltering.blockedUrlPatterns.settings = "network default";
          createNetworkGroupPolicy.contentFiltering.blockedUrlPatterns.patterns = [""];
          createNetworkGroupPolicy.contentFiltering.blockedUrlCategories = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringBlockedUrlCategories();
          createNetworkGroupPolicy.contentFiltering.blockedUrlCategories.settings = "network default";
          createNetworkGroupPolicy.contentFiltering.blockedUrlCategories.categories = [""];
          createNetworkGroupPolicy.splashAuthSettings = "network default";
          createNetworkGroupPolicy.vlanTagging = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesVlanTagging();
          createNetworkGroupPolicy.vlanTagging.settings = "network default";
          createNetworkGroupPolicy.vlanTagging.vlanId = "";
          createNetworkGroupPolicy.bonjourForwarding = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBonjourForwarding();
          createNetworkGroupPolicy.bonjourForwarding.settings = "network default";
          createNetworkGroupPolicy.bonjourForwarding.rules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBonjourForwardingRules()];
          createNetworkGroupPolicy.bonjourForwarding.rules[0].description = "";
          createNetworkGroupPolicy.bonjourForwarding.rules[0].vlanId = "";
          createNetworkGroupPolicy.bonjourForwarding.rules[0].services = ["All Services"]"All Services";

          instance.createNetworkGroupPolicy(networkId, createNetworkGroupPolicy, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkMerakiAuthUser', function() {
        it('should call createNetworkMerakiAuthUser successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkMerakiAuthUser call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkMerakiAuthUser = new MerakiDashboardApi.CreateNetworkMerakiAuthUser();
          createNetworkMerakiAuthUser.email = "";
          createNetworkMerakiAuthUser.name = "";
          createNetworkMerakiAuthUser.password = "";
          createNetworkMerakiAuthUser.accountType = "Guest";
          createNetworkMerakiAuthUser.emailPasswordToUser = false;
          createNetworkMerakiAuthUser.authorizations = [new MerakiDashboardApi.NetworksnetworkIdmerakiAuthUsersAuthorizations()];
          createNetworkMerakiAuthUser.authorizations[0].ssidNumber = 0;
          createNetworkMerakiAuthUser.authorizations[0].expiresAt = "";

          instance.createNetworkMerakiAuthUser(networkId, createNetworkMerakiAuthUser, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkMqttBroker', function() {
        it('should call createNetworkMqttBroker successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkMqttBroker call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkMqttBroker = new MerakiDashboardApi.CreateNetworkMqttBroker();
          createNetworkMqttBroker.name = "";
          createNetworkMqttBroker.host = "";
          createNetworkMqttBroker.port = 0;

          instance.createNetworkMqttBroker(networkId, createNetworkMqttBroker, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkPiiRequest', function() {
        it('should call createNetworkPiiRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkPiiRequest call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.createNetworkPiiRequest = new MerakiDashboardApi.CreateNetworkPiiRequest();
          opts.createNetworkPiiRequest.type = "delete";
          opts.createNetworkPiiRequest.datasets = [""];
          opts.createNetworkPiiRequest.username = "";
          opts.createNetworkPiiRequest.email = "";
          opts.createNetworkPiiRequest.mac = "";
          opts.createNetworkPiiRequest.smDeviceId = "";
          opts.createNetworkPiiRequest.smUserId = "";

          instance.createNetworkPiiRequest(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSmBypassActivationLockAttempt', function() {
        it('should call createNetworkSmBypassActivationLockAttempt successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSmBypassActivationLockAttempt call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkSmBypassActivationLockAttempt = new MerakiDashboardApi.CreateNetworkSmBypassActivationLockAttempt();
          createNetworkSmBypassActivationLockAttempt.ids = [""];

          instance.createNetworkSmBypassActivationLockAttempt(networkId, createNetworkSmBypassActivationLockAttempt, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSmTargetGroup', function() {
        it('should call createNetworkSmTargetGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSmTargetGroup call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.createNetworkSmTargetGroup = new MerakiDashboardApi.CreateNetworkSmTargetGroup();
          opts.createNetworkSmTargetGroup.name = "";
          opts.createNetworkSmTargetGroup.scope = "";

          instance.createNetworkSmTargetGroup(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchLinkAggregation', function() {
        it('should call createNetworkSwitchLinkAggregation successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchLinkAggregation call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.createNetworkSwitchLinkAggregation = new MerakiDashboardApi.CreateNetworkSwitchLinkAggregation();
          opts.createNetworkSwitchLinkAggregation.switchPorts = [new MerakiDashboardApi.NetworksnetworkIdswitchlinkAggregationsSwitchPorts()];
          opts.createNetworkSwitchLinkAggregation.switchPorts[0].serial = "";
          opts.createNetworkSwitchLinkAggregation.switchPorts[0].portId = "";
          opts.createNetworkSwitchLinkAggregation.switchProfilePorts = [new MerakiDashboardApi.NetworksnetworkIdswitchlinkAggregationsSwitchProfilePorts()];
          opts.createNetworkSwitchLinkAggregation.switchProfilePorts[0].profile = "";
          opts.createNetworkSwitchLinkAggregation.switchProfilePorts[0].portId = "";

          instance.createNetworkSwitchLinkAggregation(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchPortSchedule', function() {
        it('should call createNetworkSwitchPortSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchPortSchedule call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkSwitchPortSchedule = new MerakiDashboardApi.CreateNetworkSwitchPortSchedule();
          createNetworkSwitchPortSchedule.name = "";
          createNetworkSwitchPortSchedule.portSchedule = new MerakiDashboardApi.NetworksnetworkIdswitchportSchedulesPortSchedule();
          createNetworkSwitchPortSchedule.portSchedule.monday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingMonday();
          createNetworkSwitchPortSchedule.portSchedule.monday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.monday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.monday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.tuesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingTuesday();
          createNetworkSwitchPortSchedule.portSchedule.tuesday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.tuesday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.tuesday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.wednesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingWednesday();
          createNetworkSwitchPortSchedule.portSchedule.wednesday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.wednesday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.wednesday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.thursday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingThursday();
          createNetworkSwitchPortSchedule.portSchedule.thursday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.thursday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.thursday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.friday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingFriday();
          createNetworkSwitchPortSchedule.portSchedule.friday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.friday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.friday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.saturday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSaturday();
          createNetworkSwitchPortSchedule.portSchedule.saturday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.saturday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.saturday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.sunday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSunday();
          createNetworkSwitchPortSchedule.portSchedule.sunday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.sunday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.sunday.to = "";

          instance.createNetworkSwitchPortSchedule(networkId, createNetworkSwitchPortSchedule, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchQosRule', function() {
        it('should call createNetworkSwitchQosRule successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchQosRule call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkSwitchQosRule = new MerakiDashboardApi.CreateNetworkSwitchQosRule();
          createNetworkSwitchQosRule.vlan = 0;
          createNetworkSwitchQosRule.protocol = "ANY";
          createNetworkSwitchQosRule.srcPort = 0;
          createNetworkSwitchQosRule.srcPortRange = "";
          createNetworkSwitchQosRule.dstPort = 0;
          createNetworkSwitchQosRule.dstPortRange = "";
          createNetworkSwitchQosRule.dscp = 0;

          instance.createNetworkSwitchQosRule(networkId, createNetworkSwitchQosRule, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchRoutingMulticastRendezvousPoint', function() {
        it('should call createNetworkSwitchRoutingMulticastRendezvousPoint successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchRoutingMulticastRendezvousPoint call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkSwitchRoutingMulticastRendezvousPoint = new MerakiDashboardApi.CreateNetworkSwitchRoutingMulticastRendezvousPoint();
          createNetworkSwitchRoutingMulticastRendezvousPoint.interfaceIp = "";
          createNetworkSwitchRoutingMulticastRendezvousPoint.multicastGroup = "";

          instance.createNetworkSwitchRoutingMulticastRendezvousPoint(networkId, createNetworkSwitchRoutingMulticastRendezvousPoint, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchStack', function() {
        it('should call createNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchStack call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkSwitchStack = new MerakiDashboardApi.CreateNetworkSwitchStack();
          createNetworkSwitchStack.name = "";
          createNetworkSwitchStack.serials = [""];

          instance.createNetworkSwitchStack(networkId, createNetworkSwitchStack, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchStackRoutingInterface', function() {
        it('should call createNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchStackRoutingInterface call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var createNetworkSwitchStackRoutingInterface = new MerakiDashboardApi.CreateNetworkSwitchStackRoutingInterface();
          createNetworkSwitchStackRoutingInterface.name = "";
          createNetworkSwitchStackRoutingInterface.subnet = "";
          createNetworkSwitchStackRoutingInterface.interfaceIp = "";
          createNetworkSwitchStackRoutingInterface.multicastRouting = "disabled";
          createNetworkSwitchStackRoutingInterface.vlanId = 0;
          createNetworkSwitchStackRoutingInterface.defaultGateway = "";
          createNetworkSwitchStackRoutingInterface.ospfSettings = new MerakiDashboardApi.DevicesserialswitchroutinginterfacesOspfSettings();
          createNetworkSwitchStackRoutingInterface.ospfSettings.area = "";
          createNetworkSwitchStackRoutingInterface.ospfSettings.cost = 0;
          createNetworkSwitchStackRoutingInterface.ospfSettings.isPassiveEnabled = false;

          instance.createNetworkSwitchStackRoutingInterface(networkId, switchStackId, createNetworkSwitchStackRoutingInterface, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call createNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var createNetworkSwitchStackRoutingStaticRoute = new MerakiDashboardApi.CreateNetworkSwitchStackRoutingStaticRoute();
          createNetworkSwitchStackRoutingStaticRoute.name = "";
          createNetworkSwitchStackRoutingStaticRoute.subnet = "";
          createNetworkSwitchStackRoutingStaticRoute.nextHopIp = "";
          createNetworkSwitchStackRoutingStaticRoute.advertiseViaOspfEnabled = false;
          createNetworkSwitchStackRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.createNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, createNetworkSwitchStackRoutingStaticRoute, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkWebhooksHttpServer', function() {
        it('should call createNetworkWebhooksHttpServer successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkWebhooksHttpServer call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkWebhooksHttpServer = new MerakiDashboardApi.CreateNetworkWebhooksHttpServer();
          createNetworkWebhooksHttpServer.name = "";
          createNetworkWebhooksHttpServer.url = "";
          createNetworkWebhooksHttpServer.sharedSecret = "";

          instance.createNetworkWebhooksHttpServer(networkId, createNetworkWebhooksHttpServer, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkWebhooksWebhookTest', function() {
        it('should call createNetworkWebhooksWebhookTest successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkWebhooksWebhookTest call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkWebhooksWebhookTest = new MerakiDashboardApi.CreateNetworkWebhooksWebhookTest();
          createNetworkWebhooksWebhookTest.url = "";
          createNetworkWebhooksWebhookTest.sharedSecret = "";

          instance.createNetworkWebhooksWebhookTest(networkId, createNetworkWebhooksWebhookTest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkWirelessRfProfile', function() {
        it('should call createNetworkWirelessRfProfile successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkWirelessRfProfile call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkWirelessRfProfile = new MerakiDashboardApi.CreateNetworkWirelessRfProfile();
          createNetworkWirelessRfProfile.name = "";
          createNetworkWirelessRfProfile.clientBalancingEnabled = false;
          createNetworkWirelessRfProfile.minBitrateType = "band";
          createNetworkWirelessRfProfile.bandSelectionType = "ssid";
          createNetworkWirelessRfProfile.apBandSettings = new MerakiDashboardApi.NetworksnetworkIdwirelessrfProfilesApBandSettings();
          createNetworkWirelessRfProfile.apBandSettings.bandOperationMode = "dual";
          createNetworkWirelessRfProfile.apBandSettings.bandSteeringEnabled = false;
          createNetworkWirelessRfProfile.twoFourGhzSettings = new MerakiDashboardApi.NetworksnetworkIdwirelessrfProfilesTwoFourGhzSettings();
          createNetworkWirelessRfProfile.twoFourGhzSettings.maxPower = 0;
          createNetworkWirelessRfProfile.twoFourGhzSettings.minPower = 0;
          createNetworkWirelessRfProfile.twoFourGhzSettings.minBitrate = 0.0;
          createNetworkWirelessRfProfile.twoFourGhzSettings.validAutoChannels = [0];
          createNetworkWirelessRfProfile.twoFourGhzSettings.axEnabled = false;
          createNetworkWirelessRfProfile.twoFourGhzSettings.rxsop = 0;
          createNetworkWirelessRfProfile.fiveGhzSettings = new MerakiDashboardApi.NetworksnetworkIdwirelessrfProfilesFiveGhzSettings();
          createNetworkWirelessRfProfile.fiveGhzSettings.maxPower = 0;
          createNetworkWirelessRfProfile.fiveGhzSettings.minPower = 0;
          createNetworkWirelessRfProfile.fiveGhzSettings.minBitrate = 0;
          createNetworkWirelessRfProfile.fiveGhzSettings.validAutoChannels = [0];
          createNetworkWirelessRfProfile.fiveGhzSettings.channelWidth = "";
          createNetworkWirelessRfProfile.fiveGhzSettings.rxsop = 0;

          instance.createNetworkWirelessRfProfile(networkId, createNetworkWirelessRfProfile, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkWirelessSsidIdentityPsk', function() {
        it('should call createNetworkWirelessSsidIdentityPsk successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkWirelessSsidIdentityPsk call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var createNetworkWirelessSsidIdentityPsk = new MerakiDashboardApi.CreateNetworkWirelessSsidIdentityPsk();
          createNetworkWirelessSsidIdentityPsk.name = "";
          createNetworkWirelessSsidIdentityPsk.passphrase = "";
          createNetworkWirelessSsidIdentityPsk.groupPolicyId = "";

          instance.createNetworkWirelessSsidIdentityPsk(networkId, _number, createNetworkWirelessSsidIdentityPsk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganization', function() {
        it('should call createOrganization successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganization call and complete the assertions
          /*
          var createOrganization = new MerakiDashboardApi.CreateOrganization();
          createOrganization.name = "";

          instance.createOrganization(createOrganization, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationActionBatch', function() {
        it('should call createOrganizationActionBatch successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationActionBatch call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationActionBatch = new MerakiDashboardApi.CreateOrganizationActionBatch();
          createOrganizationActionBatch.confirmed = false;
          createOrganizationActionBatch.synchronous = false;
          createOrganizationActionBatch.actions = [new MerakiDashboardApi.OrganizationsorganizationIdactionBatchesActions()];
          createOrganizationActionBatch.actions[0].resource = "";
          createOrganizationActionBatch.actions[0].operation = "";
          createOrganizationActionBatch.actions[0].body = ;

          instance.createOrganizationActionBatch(organizationId, createOrganizationActionBatch, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationAdmin', function() {
        it('should call createOrganizationAdmin successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationAdmin call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationAdmin = new MerakiDashboardApi.CreateOrganizationAdmin();
          createOrganizationAdmin.email = "";
          createOrganizationAdmin.name = "";
          createOrganizationAdmin.orgAccess = "full";
          createOrganizationAdmin.tags = [new MerakiDashboardApi.OrganizationsorganizationIdadminsTags()];
          createOrganizationAdmin.tags[0].tag = "";
          createOrganizationAdmin.tags[0].access = "full";
          createOrganizationAdmin.networks = [new MerakiDashboardApi.OrganizationsorganizationIdadminsNetworks()];
          createOrganizationAdmin.networks[0].id = "";
          createOrganizationAdmin.networks[0].access = "full";
          createOrganizationAdmin.authenticationMethod = "Email";

          instance.createOrganizationAdmin(organizationId, createOrganizationAdmin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationBrandingPolicy', function() {
        it('should call createOrganizationBrandingPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationBrandingPolicy call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationBrandingPolicy = new MerakiDashboardApi.CreateOrganizationBrandingPolicy();
          createOrganizationBrandingPolicy.name = "";
          createOrganizationBrandingPolicy.enabled = false;
          createOrganizationBrandingPolicy.adminSettings = new MerakiDashboardApi.OrganizationsorganizationIdbrandingPoliciesAdminSettings();
          createOrganizationBrandingPolicy.adminSettings.appliesTo = "All organization admins";
          createOrganizationBrandingPolicy.adminSettings.values = [""];
          createOrganizationBrandingPolicy.helpSettings = new MerakiDashboardApi.OrganizationsorganizationIdbrandingPoliciesHelpSettings();
          createOrganizationBrandingPolicy.helpSettings.helpTab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.getHelpSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.communitySubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.casesSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.dataProtectionRequestsSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.getHelpSubtabKnowledgeBaseSearch = "";
          createOrganizationBrandingPolicy.helpSettings.universalSearchKnowledgeBaseSearch = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.ciscoMerakiProductDocumentation = "";
          createOrganizationBrandingPolicy.helpSettings.supportContactInfo = "";
          createOrganizationBrandingPolicy.helpSettings.newFeaturesSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.firewallInfoSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.apiDocsSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.hardwareReplacementsSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.smForums = "default or inherit";

          instance.createOrganizationBrandingPolicy(organizationId, createOrganizationBrandingPolicy, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationConfigTemplate', function() {
        it('should call createOrganizationConfigTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationConfigTemplate call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationConfigTemplate = new MerakiDashboardApi.CreateOrganizationConfigTemplate();
          createOrganizationConfigTemplate.name = "";
          createOrganizationConfigTemplate.timeZone = "";
          createOrganizationConfigTemplate.copyFromNetworkId = "";

          instance.createOrganizationConfigTemplate(organizationId, createOrganizationConfigTemplate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationInsightMonitoredMediaServer', function() {
        it('should call createOrganizationInsightMonitoredMediaServer successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationInsightMonitoredMediaServer call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationInsightMonitoredMediaServer = new MerakiDashboardApi.CreateOrganizationInsightMonitoredMediaServer();
          createOrganizationInsightMonitoredMediaServer.name = "";
          createOrganizationInsightMonitoredMediaServer.address = "";

          instance.createOrganizationInsightMonitoredMediaServer(organizationId, createOrganizationInsightMonitoredMediaServer, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationNetwork', function() {
        it('should call createOrganizationNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationNetwork call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationNetwork = new MerakiDashboardApi.CreateOrganizationNetwork();
          createOrganizationNetwork.name = "";
          createOrganizationNetwork.productTypes = ["wireless"]"wireless";
          createOrganizationNetwork.tags = [""];
          createOrganizationNetwork.timeZone = "";
          createOrganizationNetwork.copyFromNetworkId = "";

          instance.createOrganizationNetwork(organizationId, createOrganizationNetwork, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationSamlIdp', function() {
        it('should call createOrganizationSamlIdp successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationSamlIdp call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationSamlIdp = new MerakiDashboardApi.CreateOrganizationSamlIdp();
          createOrganizationSamlIdp.x509certSha1Fingerprint = "";
          createOrganizationSamlIdp.sloLogoutUrl = "";

          instance.createOrganizationSamlIdp(organizationId, createOrganizationSamlIdp, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationSamlRole', function() {
        it('should call createOrganizationSamlRole successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationSamlRole call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationSamlRole = new MerakiDashboardApi.CreateOrganizationSamlRole();
          createOrganizationSamlRole.role = "";
          createOrganizationSamlRole.orgAccess = "none";
          createOrganizationSamlRole.tags = [new MerakiDashboardApi.OrganizationsorganizationIdsamlRolesTags()];
          createOrganizationSamlRole.tags[0].tag = "";
          createOrganizationSamlRole.tags[0].access = "full";
          createOrganizationSamlRole.networks = [new MerakiDashboardApi.OrganizationsorganizationIdsamlRolesNetworks()];
          createOrganizationSamlRole.networks[0].id = "";
          createOrganizationSamlRole.networks[0].access = "full";

          instance.createOrganizationSamlRole(organizationId, createOrganizationSamlRole, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDeviceSwitchRoutingInterface', function() {
        it('should call deleteDeviceSwitchRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDeviceSwitchRoutingInterface call
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";

          instance.deleteDeviceSwitchRoutingInterface(serial, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDeviceSwitchRoutingStaticRoute', function() {
        it('should call deleteDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDeviceSwitchRoutingStaticRoute call
          /*
          var serial = "serial_example";
          var staticRouteId = "staticRouteId_example";

          instance.deleteDeviceSwitchRoutingStaticRoute(serial, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetwork', function() {
        it('should call deleteNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetwork call
          /*
          var networkId = "networkId_example";

          instance.deleteNetwork(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkApplianceStaticRoute', function() {
        it('should call deleteNetworkApplianceStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkApplianceStaticRoute call
          /*
          var networkId = "networkId_example";
          var staticRouteId = "staticRouteId_example";

          instance.deleteNetworkApplianceStaticRoute(networkId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkApplianceTrafficShapingCustomPerformanceClass', function() {
        it('should call deleteNetworkApplianceTrafficShapingCustomPerformanceClass successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkApplianceTrafficShapingCustomPerformanceClass call
          /*
          var networkId = "networkId_example";
          var customPerformanceClassId = "customPerformanceClassId_example";

          instance.deleteNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, customPerformanceClassId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkApplianceVlan', function() {
        it('should call deleteNetworkApplianceVlan successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkApplianceVlan call
          /*
          var networkId = "networkId_example";
          var vlanId = "vlanId_example";

          instance.deleteNetworkApplianceVlan(networkId, vlanId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkCameraQualityRetentionProfile', function() {
        it('should call deleteNetworkCameraQualityRetentionProfile successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkCameraQualityRetentionProfile call
          /*
          var networkId = "networkId_example";
          var qualityRetentionProfileId = "qualityRetentionProfileId_example";

          instance.deleteNetworkCameraQualityRetentionProfile(networkId, qualityRetentionProfileId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkFloorPlan', function() {
        it('should call deleteNetworkFloorPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkFloorPlan call
          /*
          var networkId = "networkId_example";
          var floorPlanId = "floorPlanId_example";

          instance.deleteNetworkFloorPlan(networkId, floorPlanId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkGroupPolicy', function() {
        it('should call deleteNetworkGroupPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkGroupPolicy call
          /*
          var networkId = "networkId_example";
          var groupPolicyId = "groupPolicyId_example";

          instance.deleteNetworkGroupPolicy(networkId, groupPolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkMerakiAuthUser', function() {
        it('should call deleteNetworkMerakiAuthUser successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkMerakiAuthUser call
          /*
          var networkId = "networkId_example";
          var merakiAuthUserId = "merakiAuthUserId_example";

          instance.deleteNetworkMerakiAuthUser(networkId, merakiAuthUserId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkMqttBroker', function() {
        it('should call deleteNetworkMqttBroker successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkMqttBroker call
          /*
          var networkId = "networkId_example";
          var mqttBrokerId = "mqttBrokerId_example";

          instance.deleteNetworkMqttBroker(networkId, mqttBrokerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkPiiRequest', function() {
        it('should call deleteNetworkPiiRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkPiiRequest call
          /*
          var networkId = "networkId_example";
          var requestId = "requestId_example";

          instance.deleteNetworkPiiRequest(networkId, requestId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSmTargetGroup', function() {
        it('should call deleteNetworkSmTargetGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSmTargetGroup call
          /*
          var networkId = "networkId_example";
          var targetGroupId = "targetGroupId_example";

          instance.deleteNetworkSmTargetGroup(networkId, targetGroupId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchLinkAggregation', function() {
        it('should call deleteNetworkSwitchLinkAggregation successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchLinkAggregation call
          /*
          var networkId = "networkId_example";
          var linkAggregationId = "linkAggregationId_example";

          instance.deleteNetworkSwitchLinkAggregation(networkId, linkAggregationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchPortSchedule', function() {
        it('should call deleteNetworkSwitchPortSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchPortSchedule call
          /*
          var networkId = "networkId_example";
          var portScheduleId = "portScheduleId_example";

          instance.deleteNetworkSwitchPortSchedule(networkId, portScheduleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchQosRule', function() {
        it('should call deleteNetworkSwitchQosRule successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchQosRule call
          /*
          var networkId = "networkId_example";
          var qosRuleId = "qosRuleId_example";

          instance.deleteNetworkSwitchQosRule(networkId, qosRuleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchRoutingMulticastRendezvousPoint', function() {
        it('should call deleteNetworkSwitchRoutingMulticastRendezvousPoint successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchRoutingMulticastRendezvousPoint call
          /*
          var networkId = "networkId_example";
          var rendezvousPointId = "rendezvousPointId_example";

          instance.deleteNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchStack', function() {
        it('should call deleteNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchStack call
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.deleteNetworkSwitchStack(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchStackRoutingInterface', function() {
        it('should call deleteNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchStackRoutingInterface call
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";

          instance.deleteNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call deleteNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchStackRoutingStaticRoute call
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";

          instance.deleteNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkWebhooksHttpServer', function() {
        it('should call deleteNetworkWebhooksHttpServer successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkWebhooksHttpServer call
          /*
          var networkId = "networkId_example";
          var httpServerId = "httpServerId_example";

          instance.deleteNetworkWebhooksHttpServer(networkId, httpServerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkWirelessRfProfile', function() {
        it('should call deleteNetworkWirelessRfProfile successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkWirelessRfProfile call
          /*
          var networkId = "networkId_example";
          var rfProfileId = "rfProfileId_example";

          instance.deleteNetworkWirelessRfProfile(networkId, rfProfileId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkWirelessSsidIdentityPsk', function() {
        it('should call deleteNetworkWirelessSsidIdentityPsk successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkWirelessSsidIdentityPsk call
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var identityPskId = "identityPskId_example";

          instance.deleteNetworkWirelessSsidIdentityPsk(networkId, _number, identityPskId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganization', function() {
        it('should call deleteOrganization successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganization call
          /*
          var organizationId = "organizationId_example";

          instance.deleteOrganization(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationActionBatch', function() {
        it('should call deleteOrganizationActionBatch successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationActionBatch call
          /*
          var organizationId = "organizationId_example";
          var actionBatchId = "actionBatchId_example";

          instance.deleteOrganizationActionBatch(organizationId, actionBatchId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationAdmin', function() {
        it('should call deleteOrganizationAdmin successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationAdmin call
          /*
          var organizationId = "organizationId_example";
          var adminId = "adminId_example";

          instance.deleteOrganizationAdmin(organizationId, adminId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationBrandingPolicy', function() {
        it('should call deleteOrganizationBrandingPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationBrandingPolicy call
          /*
          var organizationId = "organizationId_example";
          var brandingPolicyId = "brandingPolicyId_example";

          instance.deleteOrganizationBrandingPolicy(organizationId, brandingPolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationConfigTemplate', function() {
        it('should call deleteOrganizationConfigTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationConfigTemplate call
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";

          instance.deleteOrganizationConfigTemplate(organizationId, configTemplateId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationInsightMonitoredMediaServer', function() {
        it('should call deleteOrganizationInsightMonitoredMediaServer successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationInsightMonitoredMediaServer call
          /*
          var organizationId = "organizationId_example";
          var monitoredMediaServerId = "monitoredMediaServerId_example";

          instance.deleteOrganizationInsightMonitoredMediaServer(organizationId, monitoredMediaServerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationSamlIdp', function() {
        it('should call deleteOrganizationSamlIdp successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationSamlIdp call
          /*
          var organizationId = "organizationId_example";
          var idpId = "idpId_example";

          instance.deleteOrganizationSamlIdp(organizationId, idpId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationSamlRole', function() {
        it('should call deleteOrganizationSamlRole successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationSamlRole call
          /*
          var organizationId = "organizationId_example";
          var samlRoleId = "samlRoleId_example";

          instance.deleteOrganizationSamlRole(organizationId, samlRoleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDevice', function() {
        it('should call getDevice successfully', function(done) {
          // TODO: uncomment, update parameter values for getDevice call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDevice(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceCameraQualityAndRetention', function() {
        it('should call getDeviceCameraQualityAndRetention successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCameraQualityAndRetention call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceCameraQualityAndRetention(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceCameraSense', function() {
        it('should call getDeviceCameraSense successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCameraSense call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceCameraSense(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceCameraSenseObjectDetectionModels', function() {
        it('should call getDeviceCameraSenseObjectDetectionModels successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCameraSenseObjectDetectionModels call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceCameraSenseObjectDetectionModels(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceCameraVideoLink', function() {
        it('should call getDeviceCameraVideoLink successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCameraVideoLink call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.timestamp = new Date("2013-10-20T19:20:30+01:00");

          instance.getDeviceCameraVideoLink(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceCameraVideoSettings', function() {
        it('should call getDeviceCameraVideoSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCameraVideoSettings call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceCameraVideoSettings(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceCellularGatewayLan', function() {
        it('should call getDeviceCellularGatewayLan successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCellularGatewayLan call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceCellularGatewayLan(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceCellularGatewayPortForwardingRules', function() {
        it('should call getDeviceCellularGatewayPortForwardingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCellularGatewayPortForwardingRules call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceCellularGatewayPortForwardingRules(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceManagementInterface', function() {
        it('should call getDeviceManagementInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceManagementInterface call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceManagementInterface(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchPort', function() {
        it('should call getDeviceSwitchPort successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchPort call and complete the assertions
          /*
          var serial = "serial_example";
          var portId = "portId_example";

          instance.getDeviceSwitchPort(serial, portId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchPorts', function() {
        it('should call getDeviceSwitchPorts successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchPorts call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceSwitchPorts(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingInterface', function() {
        it('should call getDeviceSwitchRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingInterface call and complete the assertions
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";

          instance.getDeviceSwitchRoutingInterface(serial, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingInterfaceDhcp', function() {
        it('should call getDeviceSwitchRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingInterfaceDhcp call and complete the assertions
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";

          instance.getDeviceSwitchRoutingInterfaceDhcp(serial, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingInterfaces', function() {
        it('should call getDeviceSwitchRoutingInterfaces successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingInterfaces call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceSwitchRoutingInterfaces(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingStaticRoute', function() {
        it('should call getDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingStaticRoute call and complete the assertions
          /*
          var serial = "serial_example";
          var staticRouteId = "staticRouteId_example";

          instance.getDeviceSwitchRoutingStaticRoute(serial, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchRoutingStaticRoutes', function() {
        it('should call getDeviceSwitchRoutingStaticRoutes successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchRoutingStaticRoutes call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceSwitchRoutingStaticRoutes(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceSwitchWarmSpare', function() {
        it('should call getDeviceSwitchWarmSpare successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceSwitchWarmSpare call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceSwitchWarmSpare(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceWirelessBluetoothSettings', function() {
        it('should call getDeviceWirelessBluetoothSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceWirelessBluetoothSettings call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceWirelessBluetoothSettings(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceWirelessRadioSettings', function() {
        it('should call getDeviceWirelessRadioSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceWirelessRadioSettings call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceWirelessRadioSettings(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetwork', function() {
        it('should call getNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetwork call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetwork(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkAlertsSettings', function() {
        it('should call getNetworkAlertsSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkAlertsSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkAlertsSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceConnectivityMonitoringDestinations', function() {
        it('should call getNetworkApplianceConnectivityMonitoringDestinations successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceConnectivityMonitoringDestinations call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceConnectivityMonitoringDestinations(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceContentFiltering', function() {
        it('should call getNetworkApplianceContentFiltering successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceContentFiltering call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceContentFiltering(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceContentFilteringCategories', function() {
        it('should call getNetworkApplianceContentFilteringCategories successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceContentFilteringCategories call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceContentFilteringCategories(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallCellularFirewallRules', function() {
        it('should call getNetworkApplianceFirewallCellularFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallCellularFirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallCellularFirewallRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallFirewalledService', function() {
        it('should call getNetworkApplianceFirewallFirewalledService successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallFirewalledService call and complete the assertions
          /*
          var networkId = "networkId_example";
          var service = "service_example";

          instance.getNetworkApplianceFirewallFirewalledService(networkId, service, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallFirewalledServices', function() {
        it('should call getNetworkApplianceFirewallFirewalledServices successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallFirewalledServices call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallFirewalledServices(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallInboundFirewallRules', function() {
        it('should call getNetworkApplianceFirewallInboundFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallInboundFirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallInboundFirewallRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallL3FirewallRules', function() {
        it('should call getNetworkApplianceFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallL3FirewallRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallL7FirewallRules', function() {
        it('should call getNetworkApplianceFirewallL7FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallL7FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallL7FirewallRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallL7FirewallRulesApplicationCategories', function() {
        it('should call getNetworkApplianceFirewallL7FirewallRulesApplicationCategories successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallL7FirewallRulesApplicationCategories call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallL7FirewallRulesApplicationCategories(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallOneToManyNatRules', function() {
        it('should call getNetworkApplianceFirewallOneToManyNatRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallOneToManyNatRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallOneToManyNatRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallOneToOneNatRules', function() {
        it('should call getNetworkApplianceFirewallOneToOneNatRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallOneToOneNatRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallOneToOneNatRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceFirewallPortForwardingRules', function() {
        it('should call getNetworkApplianceFirewallPortForwardingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceFirewallPortForwardingRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceFirewallPortForwardingRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkAppliancePort', function() {
        it('should call getNetworkAppliancePort successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkAppliancePort call and complete the assertions
          /*
          var networkId = "networkId_example";
          var portId = "portId_example";

          instance.getNetworkAppliancePort(networkId, portId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkAppliancePorts', function() {
        it('should call getNetworkAppliancePorts successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkAppliancePorts call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkAppliancePorts(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceSecurityIntrusion', function() {
        it('should call getNetworkApplianceSecurityIntrusion successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceSecurityIntrusion call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceSecurityIntrusion(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceSecurityMalware', function() {
        it('should call getNetworkApplianceSecurityMalware successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceSecurityMalware call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceSecurityMalware(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceSingleLan', function() {
        it('should call getNetworkApplianceSingleLan successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceSingleLan call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceSingleLan(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceStaticRoute', function() {
        it('should call getNetworkApplianceStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var staticRouteId = "staticRouteId_example";

          instance.getNetworkApplianceStaticRoute(networkId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceStaticRoutes', function() {
        it('should call getNetworkApplianceStaticRoutes successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceStaticRoutes call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceStaticRoutes(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceTrafficShaping', function() {
        it('should call getNetworkApplianceTrafficShaping successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceTrafficShaping call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceTrafficShaping(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceTrafficShapingCustomPerformanceClass', function() {
        it('should call getNetworkApplianceTrafficShapingCustomPerformanceClass successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceTrafficShapingCustomPerformanceClass call and complete the assertions
          /*
          var networkId = "networkId_example";
          var customPerformanceClassId = "customPerformanceClassId_example";

          instance.getNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, customPerformanceClassId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceTrafficShapingCustomPerformanceClasses', function() {
        it('should call getNetworkApplianceTrafficShapingCustomPerformanceClasses successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceTrafficShapingCustomPerformanceClasses call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceTrafficShapingCustomPerformanceClasses(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceTrafficShapingRules', function() {
        it('should call getNetworkApplianceTrafficShapingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceTrafficShapingRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceTrafficShapingRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceTrafficShapingUplinkBandwidth', function() {
        it('should call getNetworkApplianceTrafficShapingUplinkBandwidth successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceTrafficShapingUplinkBandwidth call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceTrafficShapingUplinkBandwidth(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceTrafficShapingUplinkSelection', function() {
        it('should call getNetworkApplianceTrafficShapingUplinkSelection successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceTrafficShapingUplinkSelection call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceTrafficShapingUplinkSelection(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceVlan', function() {
        it('should call getNetworkApplianceVlan successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceVlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var vlanId = "vlanId_example";

          instance.getNetworkApplianceVlan(networkId, vlanId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceVlans', function() {
        it('should call getNetworkApplianceVlans successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceVlans call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceVlans(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceVlansSettings', function() {
        it('should call getNetworkApplianceVlansSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceVlansSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceVlansSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceVpnSiteToSiteVpn', function() {
        it('should call getNetworkApplianceVpnSiteToSiteVpn successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceVpnSiteToSiteVpn call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceVpnSiteToSiteVpn(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceWarmSpare', function() {
        it('should call getNetworkApplianceWarmSpare successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceWarmSpare call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceWarmSpare(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkCameraQualityRetentionProfile', function() {
        it('should call getNetworkCameraQualityRetentionProfile successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkCameraQualityRetentionProfile call and complete the assertions
          /*
          var networkId = "networkId_example";
          var qualityRetentionProfileId = "qualityRetentionProfileId_example";

          instance.getNetworkCameraQualityRetentionProfile(networkId, qualityRetentionProfileId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkCameraQualityRetentionProfiles', function() {
        it('should call getNetworkCameraQualityRetentionProfiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkCameraQualityRetentionProfiles call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkCameraQualityRetentionProfiles(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkCameraSchedules', function() {
        it('should call getNetworkCameraSchedules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkCameraSchedules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkCameraSchedules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkCellularGatewayConnectivityMonitoringDestinations', function() {
        it('should call getNetworkCellularGatewayConnectivityMonitoringDestinations successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkCellularGatewayConnectivityMonitoringDestinations call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkCellularGatewayConnectivityMonitoringDestinations(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkCellularGatewayDhcp', function() {
        it('should call getNetworkCellularGatewayDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkCellularGatewayDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkCellularGatewayDhcp(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkCellularGatewaySubnetPool', function() {
        it('should call getNetworkCellularGatewaySubnetPool successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkCellularGatewaySubnetPool call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkCellularGatewaySubnetPool(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkCellularGatewayUplink', function() {
        it('should call getNetworkCellularGatewayUplink successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkCellularGatewayUplink call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkCellularGatewayUplink(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkClientPolicy', function() {
        it('should call getNetworkClientPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkClientPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";

          instance.getNetworkClientPolicy(networkId, clientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkClientSplashAuthorizationStatus', function() {
        it('should call getNetworkClientSplashAuthorizationStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkClientSplashAuthorizationStatus call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";

          instance.getNetworkClientSplashAuthorizationStatus(networkId, clientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkDevices', function() {
        it('should call getNetworkDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkDevices call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkDevices(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkFirmwareUpgrades', function() {
        it('should call getNetworkFirmwareUpgrades successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkFirmwareUpgrades call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkFirmwareUpgrades(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkFloorPlan', function() {
        it('should call getNetworkFloorPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkFloorPlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var floorPlanId = "floorPlanId_example";

          instance.getNetworkFloorPlan(networkId, floorPlanId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkFloorPlans', function() {
        it('should call getNetworkFloorPlans successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkFloorPlans call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkFloorPlans(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkGroupPolicies', function() {
        it('should call getNetworkGroupPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkGroupPolicies call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkGroupPolicies(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkGroupPolicy', function() {
        it('should call getNetworkGroupPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkGroupPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var groupPolicyId = "groupPolicyId_example";

          instance.getNetworkGroupPolicy(networkId, groupPolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkMerakiAuthUser', function() {
        it('should call getNetworkMerakiAuthUser successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkMerakiAuthUser call and complete the assertions
          /*
          var networkId = "networkId_example";
          var merakiAuthUserId = "merakiAuthUserId_example";

          instance.getNetworkMerakiAuthUser(networkId, merakiAuthUserId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkMerakiAuthUsers', function() {
        it('should call getNetworkMerakiAuthUsers successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkMerakiAuthUsers call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkMerakiAuthUsers(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkMqttBroker', function() {
        it('should call getNetworkMqttBroker successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkMqttBroker call and complete the assertions
          /*
          var networkId = "networkId_example";
          var mqttBrokerId = "mqttBrokerId_example";

          instance.getNetworkMqttBroker(networkId, mqttBrokerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkMqttBrokers', function() {
        it('should call getNetworkMqttBrokers successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkMqttBrokers call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkMqttBrokers(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkNetflow', function() {
        it('should call getNetworkNetflow successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkNetflow call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkNetflow(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkNetworkHealthChannelUtilization', function() {
        it('should call getNetworkNetworkHealthChannelUtilization successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkNetworkHealthChannelUtilization call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.resolution = 56;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkNetworkHealthChannelUtilization(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkPiiPiiKeys', function() {
        it('should call getNetworkPiiPiiKeys successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkPiiPiiKeys call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.username = "username_example";
          opts.email = "email_example";
          opts.mac = "mac_example";
          opts.serial = "serial_example";
          opts.imei = "imei_example";
          opts.bluetoothMac = "bluetoothMac_example";

          instance.getNetworkPiiPiiKeys(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkPiiRequest', function() {
        it('should call getNetworkPiiRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkPiiRequest call and complete the assertions
          /*
          var networkId = "networkId_example";
          var requestId = "requestId_example";

          instance.getNetworkPiiRequest(networkId, requestId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkPiiRequests', function() {
        it('should call getNetworkPiiRequests successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkPiiRequests call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkPiiRequests(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkPiiSmDevicesForKey', function() {
        it('should call getNetworkPiiSmDevicesForKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkPiiSmDevicesForKey call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.username = "username_example";
          opts.email = "email_example";
          opts.mac = "mac_example";
          opts.serial = "serial_example";
          opts.imei = "imei_example";
          opts.bluetoothMac = "bluetoothMac_example";

          instance.getNetworkPiiSmDevicesForKey(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkPiiSmOwnersForKey', function() {
        it('should call getNetworkPiiSmOwnersForKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkPiiSmOwnersForKey call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.username = "username_example";
          opts.email = "email_example";
          opts.mac = "mac_example";
          opts.serial = "serial_example";
          opts.imei = "imei_example";
          opts.bluetoothMac = "bluetoothMac_example";

          instance.getNetworkPiiSmOwnersForKey(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSettings', function() {
        it('should call getNetworkSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmBypassActivationLockAttempt', function() {
        it('should call getNetworkSmBypassActivationLockAttempt successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmBypassActivationLockAttempt call and complete the assertions
          /*
          var networkId = "networkId_example";
          var attemptId = "attemptId_example";

          instance.getNetworkSmBypassActivationLockAttempt(networkId, attemptId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceCerts', function() {
        it('should call getNetworkSmDeviceCerts successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceCerts call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceCerts(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceDeviceProfiles', function() {
        it('should call getNetworkSmDeviceDeviceProfiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceDeviceProfiles call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceDeviceProfiles(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceNetworkAdapters', function() {
        it('should call getNetworkSmDeviceNetworkAdapters successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceNetworkAdapters call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceNetworkAdapters(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceRestrictions', function() {
        it('should call getNetworkSmDeviceRestrictions successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceRestrictions call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceRestrictions(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceSecurityCenters', function() {
        it('should call getNetworkSmDeviceSecurityCenters successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceSecurityCenters call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceSecurityCenters(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceSoftwares', function() {
        it('should call getNetworkSmDeviceSoftwares successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceSoftwares call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceSoftwares(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmDeviceWlanLists', function() {
        it('should call getNetworkSmDeviceWlanLists successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmDeviceWlanLists call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.getNetworkSmDeviceWlanLists(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmProfiles', function() {
        it('should call getNetworkSmProfiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmProfiles call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSmProfiles(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmTargetGroup', function() {
        it('should call getNetworkSmTargetGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmTargetGroup call and complete the assertions
          /*
          var networkId = "networkId_example";
          var targetGroupId = "targetGroupId_example";
          var opts = {};
          opts.withDetails = true;

          instance.getNetworkSmTargetGroup(networkId, targetGroupId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmTargetGroups', function() {
        it('should call getNetworkSmTargetGroups successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmTargetGroups call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.withDetails = true;

          instance.getNetworkSmTargetGroups(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmUserDeviceProfiles', function() {
        it('should call getNetworkSmUserDeviceProfiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmUserDeviceProfiles call and complete the assertions
          /*
          var networkId = "networkId_example";
          var userId = "userId_example";

          instance.getNetworkSmUserDeviceProfiles(networkId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSmUserSoftwares', function() {
        it('should call getNetworkSmUserSoftwares successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSmUserSoftwares call and complete the assertions
          /*
          var networkId = "networkId_example";
          var userId = "userId_example";

          instance.getNetworkSmUserSoftwares(networkId, userId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSnmp', function() {
        it('should call getNetworkSnmp successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSnmp call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSnmp(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchAccessControlLists', function() {
        it('should call getNetworkSwitchAccessControlLists successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchAccessControlLists call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchAccessControlLists(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchDhcpServerPolicy', function() {
        it('should call getNetworkSwitchDhcpServerPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchDhcpServerPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchDhcpServerPolicy(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchDscpToCosMappings', function() {
        it('should call getNetworkSwitchDscpToCosMappings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchDscpToCosMappings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchDscpToCosMappings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchLinkAggregations', function() {
        it('should call getNetworkSwitchLinkAggregations successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchLinkAggregations call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchLinkAggregations(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchMtu', function() {
        it('should call getNetworkSwitchMtu successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchMtu call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchMtu(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchPortSchedules', function() {
        it('should call getNetworkSwitchPortSchedules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchPortSchedules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchPortSchedules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchQosRule', function() {
        it('should call getNetworkSwitchQosRule successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchQosRule call and complete the assertions
          /*
          var networkId = "networkId_example";
          var qosRuleId = "qosRuleId_example";

          instance.getNetworkSwitchQosRule(networkId, qosRuleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchQosRules', function() {
        it('should call getNetworkSwitchQosRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchQosRules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchQosRules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchQosRulesOrder', function() {
        it('should call getNetworkSwitchQosRulesOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchQosRulesOrder call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchQosRulesOrder(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchRoutingMulticast', function() {
        it('should call getNetworkSwitchRoutingMulticast successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchRoutingMulticast call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchRoutingMulticast(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchRoutingMulticastRendezvousPoint', function() {
        it('should call getNetworkSwitchRoutingMulticastRendezvousPoint successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchRoutingMulticastRendezvousPoint call and complete the assertions
          /*
          var networkId = "networkId_example";
          var rendezvousPointId = "rendezvousPointId_example";

          instance.getNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchRoutingMulticastRendezvousPoints', function() {
        it('should call getNetworkSwitchRoutingMulticastRendezvousPoints successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchRoutingMulticastRendezvousPoints call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchRoutingMulticastRendezvousPoints(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchRoutingOspf', function() {
        it('should call getNetworkSwitchRoutingOspf successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchRoutingOspf call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchRoutingOspf(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchSettings', function() {
        it('should call getNetworkSwitchSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStack', function() {
        it('should call getNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStack call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.getNetworkSwitchStack(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingInterface', function() {
        it('should call getNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingInterface call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";

          instance.getNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingInterfaceDhcp', function() {
        it('should call getNetworkSwitchStackRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingInterfaceDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";

          instance.getNetworkSwitchStackRoutingInterfaceDhcp(networkId, switchStackId, interfaceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingInterfaces', function() {
        it('should call getNetworkSwitchStackRoutingInterfaces successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingInterfaces call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.getNetworkSwitchStackRoutingInterfaces(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call getNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";

          instance.getNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStackRoutingStaticRoutes', function() {
        it('should call getNetworkSwitchStackRoutingStaticRoutes successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStackRoutingStaticRoutes call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";

          instance.getNetworkSwitchStackRoutingStaticRoutes(networkId, switchStackId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStacks', function() {
        it('should call getNetworkSwitchStacks successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStacks call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchStacks(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStormControl', function() {
        it('should call getNetworkSwitchStormControl successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStormControl call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchStormControl(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchStp', function() {
        it('should call getNetworkSwitchStp successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchStp call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchStp(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSyslogServers', function() {
        it('should call getNetworkSyslogServers successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSyslogServers call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSyslogServers(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkTrafficAnalysis', function() {
        it('should call getNetworkTrafficAnalysis successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkTrafficAnalysis call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkTrafficAnalysis(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkTrafficShapingApplicationCategories', function() {
        it('should call getNetworkTrafficShapingApplicationCategories successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkTrafficShapingApplicationCategories call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkTrafficShapingApplicationCategories(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkTrafficShapingDscpTaggingOptions', function() {
        it('should call getNetworkTrafficShapingDscpTaggingOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkTrafficShapingDscpTaggingOptions call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkTrafficShapingDscpTaggingOptions(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWebhooksHttpServer', function() {
        it('should call getNetworkWebhooksHttpServer successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWebhooksHttpServer call and complete the assertions
          /*
          var networkId = "networkId_example";
          var httpServerId = "httpServerId_example";

          instance.getNetworkWebhooksHttpServer(networkId, httpServerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWebhooksHttpServers', function() {
        it('should call getNetworkWebhooksHttpServers successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWebhooksHttpServers call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkWebhooksHttpServers(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWebhooksWebhookTest', function() {
        it('should call getNetworkWebhooksWebhookTest successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWebhooksWebhookTest call and complete the assertions
          /*
          var networkId = "networkId_example";
          var webhookTestId = "webhookTestId_example";

          instance.getNetworkWebhooksWebhookTest(networkId, webhookTestId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessAlternateManagementInterface', function() {
        it('should call getNetworkWirelessAlternateManagementInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessAlternateManagementInterface call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkWirelessAlternateManagementInterface(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessBluetoothSettings', function() {
        it('should call getNetworkWirelessBluetoothSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessBluetoothSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkWirelessBluetoothSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessRfProfile', function() {
        it('should call getNetworkWirelessRfProfile successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessRfProfile call and complete the assertions
          /*
          var networkId = "networkId_example";
          var rfProfileId = "rfProfileId_example";

          instance.getNetworkWirelessRfProfile(networkId, rfProfileId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessRfProfiles', function() {
        it('should call getNetworkWirelessRfProfiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessRfProfiles call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.includeTemplateProfiles = true;

          instance.getNetworkWirelessRfProfiles(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSettings', function() {
        it('should call getNetworkWirelessSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkWirelessSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsid', function() {
        it('should call getNetworkWirelessSsid successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsid call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsid(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidFirewallL3FirewallRules', function() {
        it('should call getNetworkWirelessSsidFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidFirewallL3FirewallRules(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidFirewallL7FirewallRules', function() {
        it('should call getNetworkWirelessSsidFirewallL7FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidFirewallL7FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidFirewallL7FirewallRules(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidIdentityPsk', function() {
        it('should call getNetworkWirelessSsidIdentityPsk successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidIdentityPsk call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var identityPskId = "identityPskId_example";

          instance.getNetworkWirelessSsidIdentityPsk(networkId, _number, identityPskId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidIdentityPsks', function() {
        it('should call getNetworkWirelessSsidIdentityPsks successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidIdentityPsks call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidIdentityPsks(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidSplashSettings', function() {
        it('should call getNetworkWirelessSsidSplashSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidSplashSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidSplashSettings(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidTrafficShapingRules', function() {
        it('should call getNetworkWirelessSsidTrafficShapingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidTrafficShapingRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidTrafficShapingRules(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsids', function() {
        it('should call getNetworkWirelessSsids successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsids call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkWirelessSsids(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganization', function() {
        it('should call getOrganization successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganization call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganization(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationActionBatch', function() {
        it('should call getOrganizationActionBatch successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationActionBatch call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var actionBatchId = "actionBatchId_example";

          instance.getOrganizationActionBatch(organizationId, actionBatchId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationActionBatches', function() {
        it('should call getOrganizationActionBatches successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationActionBatches call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.status = "status_example";

          instance.getOrganizationActionBatches(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationAdmins', function() {
        it('should call getOrganizationAdmins successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationAdmins call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationAdmins(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceSecurityIntrusion', function() {
        it('should call getOrganizationApplianceSecurityIntrusion successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceSecurityIntrusion call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationApplianceSecurityIntrusion(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceVpnThirdPartyVPNPeers', function() {
        it('should call getOrganizationApplianceVpnThirdPartyVPNPeers successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceVpnThirdPartyVPNPeers call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationApplianceVpnThirdPartyVPNPeers(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApplianceVpnVpnFirewallRules', function() {
        it('should call getOrganizationApplianceVpnVpnFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApplianceVpnVpnFirewallRules call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationApplianceVpnVpnFirewallRules(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationBrandingPolicies', function() {
        it('should call getOrganizationBrandingPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationBrandingPolicies call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationBrandingPolicies(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationBrandingPoliciesPriorities', function() {
        it('should call getOrganizationBrandingPoliciesPriorities successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationBrandingPoliciesPriorities call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationBrandingPoliciesPriorities(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationBrandingPolicy', function() {
        it('should call getOrganizationBrandingPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationBrandingPolicy call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var brandingPolicyId = "brandingPolicyId_example";

          instance.getOrganizationBrandingPolicy(organizationId, brandingPolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplate', function() {
        it('should call getOrganizationConfigTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplate call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";

          instance.getOrganizationConfigTemplate(organizationId, configTemplateId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplateSwitchProfilePort', function() {
        it('should call getOrganizationConfigTemplateSwitchProfilePort successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplateSwitchProfilePort call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var profileId = "profileId_example";
          var portId = "portId_example";

          instance.getOrganizationConfigTemplateSwitchProfilePort(organizationId, configTemplateId, profileId, portId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplateSwitchProfilePorts', function() {
        it('should call getOrganizationConfigTemplateSwitchProfilePorts successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplateSwitchProfilePorts call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var profileId = "profileId_example";

          instance.getOrganizationConfigTemplateSwitchProfilePorts(organizationId, configTemplateId, profileId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplateSwitchProfiles', function() {
        it('should call getOrganizationConfigTemplateSwitchProfiles successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplateSwitchProfiles call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";

          instance.getOrganizationConfigTemplateSwitchProfiles(organizationId, configTemplateId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplates', function() {
        it('should call getOrganizationConfigTemplates successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplates call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationConfigTemplates(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationDevices', function() {
        it('should call getOrganizationDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationDevices call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.configurationUpdatedAfter = "configurationUpdatedAfter_example";

          instance.getOrganizationDevices(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationInsightMonitoredMediaServer', function() {
        it('should call getOrganizationInsightMonitoredMediaServer successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationInsightMonitoredMediaServer call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var monitoredMediaServerId = "monitoredMediaServerId_example";

          instance.getOrganizationInsightMonitoredMediaServer(organizationId, monitoredMediaServerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationInsightMonitoredMediaServers', function() {
        it('should call getOrganizationInsightMonitoredMediaServers successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationInsightMonitoredMediaServers call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationInsightMonitoredMediaServers(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationInventoryDevice', function() {
        it('should call getOrganizationInventoryDevice successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationInventoryDevice call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var serial = "serial_example";

          instance.getOrganizationInventoryDevice(organizationId, serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationInventoryDevices', function() {
        it('should call getOrganizationInventoryDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationInventoryDevices call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.usedState = "usedState_example";
          opts.search = "search_example";

          instance.getOrganizationInventoryDevices(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationLicense', function() {
        it('should call getOrganizationLicense successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationLicense call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var licenseId = "licenseId_example";

          instance.getOrganizationLicense(organizationId, licenseId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationLicenses', function() {
        it('should call getOrganizationLicenses successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationLicenses call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.deviceSerial = "deviceSerial_example";
          opts.networkId = "networkId_example";
          opts.state = "state_example";

          instance.getOrganizationLicenses(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationNetworks', function() {
        it('should call getOrganizationNetworks successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationNetworks call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.configTemplateId = "configTemplateId_example";
          opts.tags = ["tags_example"];
          opts.tagsFilterType = "tagsFilterType_example";
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getOrganizationNetworks(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSaml', function() {
        it('should call getOrganizationSaml successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSaml call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationSaml(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSamlIdp', function() {
        it('should call getOrganizationSamlIdp successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSamlIdp call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var idpId = "idpId_example";

          instance.getOrganizationSamlIdp(organizationId, idpId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSamlIdps', function() {
        it('should call getOrganizationSamlIdps successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSamlIdps call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationSamlIdps(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSamlRole', function() {
        it('should call getOrganizationSamlRole successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSamlRole call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var samlRoleId = "samlRoleId_example";

          instance.getOrganizationSamlRole(organizationId, samlRoleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSamlRoles', function() {
        it('should call getOrganizationSamlRoles successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSamlRoles call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationSamlRoles(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSmApnsCert', function() {
        it('should call getOrganizationSmApnsCert successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSmApnsCert call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationSmApnsCert(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSmVppAccount', function() {
        it('should call getOrganizationSmVppAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSmVppAccount call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var vppAccountId = "vppAccountId_example";

          instance.getOrganizationSmVppAccount(organizationId, vppAccountId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSmVppAccounts', function() {
        it('should call getOrganizationSmVppAccounts successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSmVppAccounts call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationSmVppAccounts(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSnmp', function() {
        it('should call getOrganizationSnmp successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSnmp call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationSnmp(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizations', function() {
        it('should call getOrganizations successfully', function(done) {
          // TODO: uncomment getOrganizations call and complete the assertions
          /*

          instance.getOrganizations(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('moveOrganizationLicenses', function() {
        it('should call moveOrganizationLicenses successfully', function(done) {
          // TODO: uncomment, update parameter values for moveOrganizationLicenses call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var moveOrganizationLicenses = new MerakiDashboardApi.MoveOrganizationLicenses();
          moveOrganizationLicenses.destOrganizationId = "";
          moveOrganizationLicenses.licenseIds = [""];

          instance.moveOrganizationLicenses(organizationId, moveOrganizationLicenses, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('moveOrganizationLicensesSeats', function() {
        it('should call moveOrganizationLicensesSeats successfully', function(done) {
          // TODO: uncomment, update parameter values for moveOrganizationLicensesSeats call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var moveOrganizationLicensesSeats = new MerakiDashboardApi.MoveOrganizationLicensesSeats();
          moveOrganizationLicensesSeats.destOrganizationId = "";
          moveOrganizationLicensesSeats.licenseId = "";
          moveOrganizationLicensesSeats.seatCount = 0;

          instance.moveOrganizationLicensesSeats(organizationId, moveOrganizationLicensesSeats, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('provisionNetworkClients', function() {
        it('should call provisionNetworkClients successfully', function(done) {
          // TODO: uncomment, update parameter values for provisionNetworkClients call and complete the assertions
          /*
          var networkId = "networkId_example";
          var provisionNetworkClients = new MerakiDashboardApi.ProvisionNetworkClients();
          provisionNetworkClients.clients = [new MerakiDashboardApi.NetworksnetworkIdclientsprovisionClients()];
          provisionNetworkClients.clients[0].mac = "";
          provisionNetworkClients.clients[0].name = "";
          provisionNetworkClients.devicePolicy = "Group policy";
          provisionNetworkClients.groupPolicyId = "";
          provisionNetworkClients.policiesBySecurityAppliance = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySecurityAppliance();
          provisionNetworkClients.policiesBySecurityAppliance.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid();
          provisionNetworkClients.policiesBySsid._0 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._0.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._0.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._1 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._1.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._1.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._2 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._2.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._2.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._3 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._3.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._3.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._4 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._4.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._4.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._5 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._5.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._5.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._6 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._6.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._6.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._7 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._7.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._7.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._8 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._8.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._8.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._9 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._9.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._9.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._10 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._10.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._10.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._11 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._11.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._11.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._12 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._12.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._12.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._13 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._13.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._13.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._14 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._14.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._14.groupPolicyId = "";

          instance.provisionNetworkClients(networkId, provisionNetworkClients, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('refreshNetworkSmDeviceDetails', function() {
        it('should call refreshNetworkSmDeviceDetails successfully', function(done) {
          // TODO: uncomment, update parameter values for refreshNetworkSmDeviceDetails call
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.refreshNetworkSmDeviceDetails(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeNetworkDevices', function() {
        it('should call removeNetworkDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for removeNetworkDevices call
          /*
          var networkId = "networkId_example";
          var removeNetworkDevices = new MerakiDashboardApi.RemoveNetworkDevices();
          removeNetworkDevices.serial = "";

          instance.removeNetworkDevices(networkId, removeNetworkDevices, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeNetworkSwitchStack', function() {
        it('should call removeNetworkSwitchStack successfully', function(done) {
          // TODO: uncomment, update parameter values for removeNetworkSwitchStack call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var removeNetworkSwitchStack = new MerakiDashboardApi.RemoveNetworkSwitchStack();
          removeNetworkSwitchStack.serial = "";

          instance.removeNetworkSwitchStack(networkId, switchStackId, removeNetworkSwitchStack, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('renewOrganizationLicensesSeats', function() {
        it('should call renewOrganizationLicensesSeats successfully', function(done) {
          // TODO: uncomment, update parameter values for renewOrganizationLicensesSeats call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var renewOrganizationLicensesSeats = new MerakiDashboardApi.RenewOrganizationLicensesSeats();
          renewOrganizationLicensesSeats.licenseIdToRenew = "";
          renewOrganizationLicensesSeats.unusedLicenseId = "";

          instance.renewOrganizationLicensesSeats(organizationId, renewOrganizationLicensesSeats, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('splitNetwork', function() {
        it('should call splitNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for splitNetwork call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.splitNetwork(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('swapNetworkApplianceWarmSpare', function() {
        it('should call swapNetworkApplianceWarmSpare successfully', function(done) {
          // TODO: uncomment, update parameter values for swapNetworkApplianceWarmSpare call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.swapNetworkApplianceWarmSpare(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unbindNetwork', function() {
        it('should call unbindNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for unbindNetwork call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.unbindNetwork(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unenrollNetworkSmDevice', function() {
        it('should call unenrollNetworkSmDevice successfully', function(done) {
          // TODO: uncomment, update parameter values for unenrollNetworkSmDevice call and complete the assertions
          /*
          var networkId = "networkId_example";
          var deviceId = "deviceId_example";

          instance.unenrollNetworkSmDevice(networkId, deviceId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDevice', function() {
        it('should call updateDevice successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDevice call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDevice = new MerakiDashboardApi.UpdateDevice();
          opts.updateDevice.name = "";
          opts.updateDevice.tags = [""];
          opts.updateDevice.lat = 0.0;
          opts.updateDevice.lng = 0.0;
          opts.updateDevice.address = "";
          opts.updateDevice.notes = "";
          opts.updateDevice.moveMapMarker = false;
          opts.updateDevice.switchProfileId = "";
          opts.updateDevice.floorPlanId = "";

          instance.updateDevice(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceCameraQualityAndRetention', function() {
        it('should call updateDeviceCameraQualityAndRetention successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceCameraQualityAndRetention call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDeviceCameraQualityAndRetention = new MerakiDashboardApi.UpdateDeviceCameraQualityAndRetention();
          opts.updateDeviceCameraQualityAndRetention.profileId = "";
          opts.updateDeviceCameraQualityAndRetention.motionBasedRetentionEnabled = false;
          opts.updateDeviceCameraQualityAndRetention.audioRecordingEnabled = false;
          opts.updateDeviceCameraQualityAndRetention.restrictedBandwidthModeEnabled = false;
          opts.updateDeviceCameraQualityAndRetention.quality = "Standard";
          opts.updateDeviceCameraQualityAndRetention.resolution = "1280x720";
          opts.updateDeviceCameraQualityAndRetention.motionDetectorVersion = 0;

          instance.updateDeviceCameraQualityAndRetention(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceCameraSense', function() {
        it('should call updateDeviceCameraSense successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceCameraSense call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDeviceCameraSense = new MerakiDashboardApi.UpdateDeviceCameraSense();
          opts.updateDeviceCameraSense.senseEnabled = false;
          opts.updateDeviceCameraSense.mqttBrokerId = "";
          opts.updateDeviceCameraSense.detectionModelId = "";

          instance.updateDeviceCameraSense(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceCameraVideoSettings', function() {
        it('should call updateDeviceCameraVideoSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceCameraVideoSettings call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDeviceCameraVideoSettings = new MerakiDashboardApi.UpdateDeviceCameraVideoSettings();
          opts.updateDeviceCameraVideoSettings.externalRtspEnabled = false;

          instance.updateDeviceCameraVideoSettings(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceCellularGatewayLan', function() {
        it('should call updateDeviceCellularGatewayLan successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceCellularGatewayLan call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDeviceCellularGatewayLan = new MerakiDashboardApi.UpdateDeviceCellularGatewayLan();
          opts.updateDeviceCellularGatewayLan.reservedIpRanges = [new MerakiDashboardApi.DevicesserialcellularGatewaylanReservedIpRanges()];
          opts.updateDeviceCellularGatewayLan.reservedIpRanges[0].start = "";
          opts.updateDeviceCellularGatewayLan.reservedIpRanges[0].end = "";
          opts.updateDeviceCellularGatewayLan.reservedIpRanges[0].comment = "";
          opts.updateDeviceCellularGatewayLan.fixedIpAssignments = [new MerakiDashboardApi.DevicesserialcellularGatewaylanFixedIpAssignments()];
          opts.updateDeviceCellularGatewayLan.fixedIpAssignments[0].name = "";
          opts.updateDeviceCellularGatewayLan.fixedIpAssignments[0].ip = "";
          opts.updateDeviceCellularGatewayLan.fixedIpAssignments[0].mac = "";

          instance.updateDeviceCellularGatewayLan(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceCellularGatewayPortForwardingRules', function() {
        it('should call updateDeviceCellularGatewayPortForwardingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceCellularGatewayPortForwardingRules call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDeviceCellularGatewayPortForwardingRules = new MerakiDashboardApi.UpdateDeviceCellularGatewayPortForwardingRules();
          opts.updateDeviceCellularGatewayPortForwardingRules.rules = [new MerakiDashboardApi.DevicesserialcellularGatewayportForwardingRulesRules()];
          opts.updateDeviceCellularGatewayPortForwardingRules.rules[0].name = "";
          opts.updateDeviceCellularGatewayPortForwardingRules.rules[0].lanIp = "";
          opts.updateDeviceCellularGatewayPortForwardingRules.rules[0].publicPort = "";
          opts.updateDeviceCellularGatewayPortForwardingRules.rules[0].localPort = "";
          opts.updateDeviceCellularGatewayPortForwardingRules.rules[0].allowedIps = [""];
          opts.updateDeviceCellularGatewayPortForwardingRules.rules[0].protocol = "";
          opts.updateDeviceCellularGatewayPortForwardingRules.rules[0].access = "";

          instance.updateDeviceCellularGatewayPortForwardingRules(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceManagementInterface', function() {
        it('should call updateDeviceManagementInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceManagementInterface call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDeviceManagementInterface = new MerakiDashboardApi.UpdateDeviceManagementInterface();
          opts.updateDeviceManagementInterface.wan1 = new MerakiDashboardApi.DevicesserialmanagementInterfaceWan1();
          opts.updateDeviceManagementInterface.wan1.wanEnabled = "enabled";
          opts.updateDeviceManagementInterface.wan1.usingStaticIp = false;
          opts.updateDeviceManagementInterface.wan1.staticIp = "";
          opts.updateDeviceManagementInterface.wan1.staticGatewayIp = "";
          opts.updateDeviceManagementInterface.wan1.staticSubnetMask = "";
          opts.updateDeviceManagementInterface.wan1.staticDns = [""];
          opts.updateDeviceManagementInterface.wan1.vlan = 0;
          opts.updateDeviceManagementInterface.wan2 = new MerakiDashboardApi.DevicesserialmanagementInterfaceWan2();
          opts.updateDeviceManagementInterface.wan2.wanEnabled = "enabled";
          opts.updateDeviceManagementInterface.wan2.usingStaticIp = false;
          opts.updateDeviceManagementInterface.wan2.staticIp = "";
          opts.updateDeviceManagementInterface.wan2.staticGatewayIp = "";
          opts.updateDeviceManagementInterface.wan2.staticSubnetMask = "";
          opts.updateDeviceManagementInterface.wan2.staticDns = [""];
          opts.updateDeviceManagementInterface.wan2.vlan = 0;

          instance.updateDeviceManagementInterface(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchPort', function() {
        it('should call updateDeviceSwitchPort successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchPort call and complete the assertions
          /*
          var serial = "serial_example";
          var portId = "portId_example";
          var opts = {};
          opts.updateDeviceSwitchPort = new MerakiDashboardApi.UpdateDeviceSwitchPort();
          opts.updateDeviceSwitchPort.name = "";
          opts.updateDeviceSwitchPort.tags = [""];
          opts.updateDeviceSwitchPort.enabled = false;
          opts.updateDeviceSwitchPort.type = "trunk";
          opts.updateDeviceSwitchPort.vlan = 0;
          opts.updateDeviceSwitchPort.voiceVlan = 0;
          opts.updateDeviceSwitchPort.allowedVlans = "";
          opts.updateDeviceSwitchPort.poeEnabled = false;
          opts.updateDeviceSwitchPort.isolationEnabled = false;
          opts.updateDeviceSwitchPort.rstpEnabled = false;
          opts.updateDeviceSwitchPort.stpGuard = "disabled";
          opts.updateDeviceSwitchPort.linkNegotiation = "";
          opts.updateDeviceSwitchPort.portScheduleId = "";
          opts.updateDeviceSwitchPort.udld = "Alert only";
          opts.updateDeviceSwitchPort.accessPolicyType = "Open";
          opts.updateDeviceSwitchPort.accessPolicyNumber = 0;
          opts.updateDeviceSwitchPort.macAllowList = [""];
          opts.updateDeviceSwitchPort.stickyMacAllowList = [""];
          opts.updateDeviceSwitchPort.stickyMacAllowListLimit = 0;
          opts.updateDeviceSwitchPort.stormControlEnabled = false;
          opts.updateDeviceSwitchPort.flexibleStackingEnabled = false;

          instance.updateDeviceSwitchPort(serial, portId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchRoutingInterface', function() {
        it('should call updateDeviceSwitchRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchRoutingInterface call and complete the assertions
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateDeviceSwitchRoutingInterface = new MerakiDashboardApi.UpdateDeviceSwitchRoutingInterface();
          opts.updateDeviceSwitchRoutingInterface.name = "";
          opts.updateDeviceSwitchRoutingInterface.subnet = "";
          opts.updateDeviceSwitchRoutingInterface.interfaceIp = "";
          opts.updateDeviceSwitchRoutingInterface.multicastRouting = "disabled";
          opts.updateDeviceSwitchRoutingInterface.vlanId = 0;
          opts.updateDeviceSwitchRoutingInterface.ospfSettings = new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIdOspfSettings();
          opts.updateDeviceSwitchRoutingInterface.ospfSettings.area = "";
          opts.updateDeviceSwitchRoutingInterface.ospfSettings.cost = 0;
          opts.updateDeviceSwitchRoutingInterface.ospfSettings.isPassiveEnabled = false;

          instance.updateDeviceSwitchRoutingInterface(serial, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchRoutingInterfaceDhcp', function() {
        it('should call updateDeviceSwitchRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchRoutingInterfaceDhcp call and complete the assertions
          /*
          var serial = "serial_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateDeviceSwitchRoutingInterfaceDhcp = new MerakiDashboardApi.UpdateDeviceSwitchRoutingInterfaceDhcp();
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpMode = "dhcpDisabled";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpRelayServerIps = [""];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpLeaseTime = "30 minutes";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dnsNameserversOption = "googlePublicDns";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dnsCustomNameservers = [""];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.bootOptionsEnabled = false;
          opts.updateDeviceSwitchRoutingInterfaceDhcp.bootNextServer = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.bootFileName = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions()];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions[0].code = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions[0].type = "text";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.dhcpOptions[0].value = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges()];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges[0].start = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges[0].end = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.reservedIpRanges[0].comment = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments()];
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments[0].name = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments[0].mac = "";
          opts.updateDeviceSwitchRoutingInterfaceDhcp.fixedIpAssignments[0].ip = "";

          instance.updateDeviceSwitchRoutingInterfaceDhcp(serial, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchRoutingStaticRoute', function() {
        it('should call updateDeviceSwitchRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchRoutingStaticRoute call and complete the assertions
          /*
          var serial = "serial_example";
          var staticRouteId = "staticRouteId_example";
          var opts = {};
          opts.updateDeviceSwitchRoutingStaticRoute = new MerakiDashboardApi.UpdateDeviceSwitchRoutingStaticRoute();
          opts.updateDeviceSwitchRoutingStaticRoute.name = "";
          opts.updateDeviceSwitchRoutingStaticRoute.subnet = "";
          opts.updateDeviceSwitchRoutingStaticRoute.nextHopIp = "";
          opts.updateDeviceSwitchRoutingStaticRoute.advertiseViaOspfEnabled = false;
          opts.updateDeviceSwitchRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.updateDeviceSwitchRoutingStaticRoute(serial, staticRouteId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceSwitchWarmSpare', function() {
        it('should call updateDeviceSwitchWarmSpare successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceSwitchWarmSpare call and complete the assertions
          /*
          var serial = "serial_example";
          var updateDeviceSwitchWarmSpare = new MerakiDashboardApi.UpdateDeviceSwitchWarmSpare();
          updateDeviceSwitchWarmSpare.enabled = false;
          updateDeviceSwitchWarmSpare.spareSerial = "";

          instance.updateDeviceSwitchWarmSpare(serial, updateDeviceSwitchWarmSpare, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceWirelessBluetoothSettings', function() {
        it('should call updateDeviceWirelessBluetoothSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceWirelessBluetoothSettings call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDeviceWirelessBluetoothSettings = new MerakiDashboardApi.UpdateDeviceWirelessBluetoothSettings();
          opts.updateDeviceWirelessBluetoothSettings.uuid = "";
          opts.updateDeviceWirelessBluetoothSettings.major = 0;
          opts.updateDeviceWirelessBluetoothSettings.minor = 0;

          instance.updateDeviceWirelessBluetoothSettings(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceWirelessRadioSettings', function() {
        it('should call updateDeviceWirelessRadioSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceWirelessRadioSettings call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDeviceWirelessRadioSettings = new MerakiDashboardApi.UpdateDeviceWirelessRadioSettings();
          opts.updateDeviceWirelessRadioSettings.rfProfileId = 0;
          opts.updateDeviceWirelessRadioSettings.twoFourGhzSettings = new MerakiDashboardApi.DevicesserialwirelessradiosettingsTwoFourGhzSettings();
          opts.updateDeviceWirelessRadioSettings.twoFourGhzSettings.channel = 0;
          opts.updateDeviceWirelessRadioSettings.twoFourGhzSettings.targetPower = 0;
          opts.updateDeviceWirelessRadioSettings.fiveGhzSettings = new MerakiDashboardApi.DevicesserialwirelessradiosettingsFiveGhzSettings();
          opts.updateDeviceWirelessRadioSettings.fiveGhzSettings.channel = 0;
          opts.updateDeviceWirelessRadioSettings.fiveGhzSettings.channelWidth = 0;
          opts.updateDeviceWirelessRadioSettings.fiveGhzSettings.targetPower = 0;

          instance.updateDeviceWirelessRadioSettings(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetwork', function() {
        it('should call updateNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetwork call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetwork = new MerakiDashboardApi.UpdateNetwork();
          opts.updateNetwork.name = "";
          opts.updateNetwork.timeZone = "";
          opts.updateNetwork.tags = [""];
          opts.updateNetwork.enrollmentString = "";

          instance.updateNetwork(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkAlertsSettings', function() {
        it('should call updateNetworkAlertsSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkAlertsSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkAlertsSettings = new MerakiDashboardApi.UpdateNetworkAlertsSettings();
          opts.updateNetworkAlertsSettings.defaultDestinations = new MerakiDashboardApi.NetworksnetworkIdalertssettingsDefaultDestinations();
          opts.updateNetworkAlertsSettings.defaultDestinations.emails = [""];
          opts.updateNetworkAlertsSettings.defaultDestinations.allAdmins = false;
          opts.updateNetworkAlertsSettings.defaultDestinations.snmp = false;
          opts.updateNetworkAlertsSettings.defaultDestinations.httpServerIds = [""];
          opts.updateNetworkAlertsSettings.alerts = [new MerakiDashboardApi.NetworksnetworkIdalertssettingsAlerts()];
          opts.updateNetworkAlertsSettings.alerts[0].type = "";
          opts.updateNetworkAlertsSettings.alerts[0].enabled = false;
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations = new MerakiDashboardApi.NetworksnetworkIdalertssettingsAlertDestinations();
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations.emails = [""];
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations.allAdmins = false;
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations.snmp = false;
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations.httpServerIds = [""];
          opts.updateNetworkAlertsSettings.alerts[0].filters = ;

          instance.updateNetworkAlertsSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceConnectivityMonitoringDestinations', function() {
        it('should call updateNetworkApplianceConnectivityMonitoringDestinations successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceConnectivityMonitoringDestinations call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceConnectivityMonitoringDestinations = new MerakiDashboardApi.UpdateNetworkApplianceConnectivityMonitoringDestinations();
          opts.updateNetworkApplianceConnectivityMonitoringDestinations.destinations = [new MerakiDashboardApi.NetworksnetworkIdapplianceconnectivityMonitoringDestinationsDestinations()];
          opts.updateNetworkApplianceConnectivityMonitoringDestinations.destinations[0].ip = "";
          opts.updateNetworkApplianceConnectivityMonitoringDestinations.destinations[0].description = "";
          opts.updateNetworkApplianceConnectivityMonitoringDestinations.destinations[0]._default = false;

          instance.updateNetworkApplianceConnectivityMonitoringDestinations(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceContentFiltering', function() {
        it('should call updateNetworkApplianceContentFiltering successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceContentFiltering call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceContentFiltering = new MerakiDashboardApi.UpdateNetworkApplianceContentFiltering();
          opts.updateNetworkApplianceContentFiltering.allowedUrlPatterns = [""];
          opts.updateNetworkApplianceContentFiltering.blockedUrlPatterns = [""];
          opts.updateNetworkApplianceContentFiltering.blockedUrlCategories = [""];
          opts.updateNetworkApplianceContentFiltering.urlCategoryListSize = "topSites";

          instance.updateNetworkApplianceContentFiltering(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallCellularFirewallRules', function() {
        it('should call updateNetworkApplianceFirewallCellularFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallCellularFirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceFirewallCellularFirewallRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallCellularFirewallRules();
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewallcellularFirewallRulesRules()];
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].comment = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].policy = "allow";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].protocol = "tcp";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].srcPort = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].srcCidr = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].destPort = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].destCidr = "";
          opts.updateNetworkApplianceFirewallCellularFirewallRules.rules[0].syslogEnabled = false;

          instance.updateNetworkApplianceFirewallCellularFirewallRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallFirewalledService', function() {
        it('should call updateNetworkApplianceFirewallFirewalledService successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallFirewalledService call and complete the assertions
          /*
          var networkId = "networkId_example";
          var service = "service_example";
          var updateNetworkApplianceFirewallFirewalledService = new MerakiDashboardApi.UpdateNetworkApplianceFirewallFirewalledService();
          updateNetworkApplianceFirewallFirewalledService.access = "blocked";
          updateNetworkApplianceFirewallFirewalledService.allowedIps = [""];

          instance.updateNetworkApplianceFirewallFirewalledService(networkId, service, updateNetworkApplianceFirewallFirewalledService, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallInboundFirewallRules', function() {
        it('should call updateNetworkApplianceFirewallInboundFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallInboundFirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceFirewallInboundFirewallRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallInboundFirewallRules();
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewallcellularFirewallRulesRules()];
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].comment = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].policy = "allow";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].protocol = "tcp";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].srcPort = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].srcCidr = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].destPort = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].destCidr = "";
          opts.updateNetworkApplianceFirewallInboundFirewallRules.rules[0].syslogEnabled = false;
          opts.updateNetworkApplianceFirewallInboundFirewallRules.syslogDefaultRule = false;

          instance.updateNetworkApplianceFirewallInboundFirewallRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallL3FirewallRules', function() {
        it('should call updateNetworkApplianceFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceFirewallL3FirewallRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallL3FirewallRules();
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewallcellularFirewallRulesRules()];
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].comment = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].policy = "allow";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].protocol = "tcp";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].srcPort = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].srcCidr = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].destPort = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].destCidr = "";
          opts.updateNetworkApplianceFirewallL3FirewallRules.rules[0].syslogEnabled = false;
          opts.updateNetworkApplianceFirewallL3FirewallRules.syslogDefaultRule = false;

          instance.updateNetworkApplianceFirewallL3FirewallRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallL7FirewallRules', function() {
        it('should call updateNetworkApplianceFirewallL7FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallL7FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceFirewallL7FirewallRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallL7FirewallRules();
          opts.updateNetworkApplianceFirewallL7FirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalll7FirewallRulesRules()];
          opts.updateNetworkApplianceFirewallL7FirewallRules.rules[0].policy = "deny";
          opts.updateNetworkApplianceFirewallL7FirewallRules.rules[0].type = "application";
          opts.updateNetworkApplianceFirewallL7FirewallRules.rules[0].value = "";

          instance.updateNetworkApplianceFirewallL7FirewallRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallOneToManyNatRules', function() {
        it('should call updateNetworkApplianceFirewallOneToManyNatRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallOneToManyNatRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceFirewallOneToManyNatRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallOneToManyNatRules();
          updateNetworkApplianceFirewallOneToManyNatRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalloneToManyNatRulesRules()];
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].publicIp = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].uplink = "internet1";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalloneToManyNatRulesPortRules()];
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].name = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].protocol = "tcp";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].publicPort = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].localIp = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].localPort = "";
          updateNetworkApplianceFirewallOneToManyNatRules.rules[0].portRules[0].allowedIps = [""];

          instance.updateNetworkApplianceFirewallOneToManyNatRules(networkId, updateNetworkApplianceFirewallOneToManyNatRules, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallOneToOneNatRules', function() {
        it('should call updateNetworkApplianceFirewallOneToOneNatRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallOneToOneNatRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceFirewallOneToOneNatRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallOneToOneNatRules();
          updateNetworkApplianceFirewallOneToOneNatRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalloneToOneNatRulesRules()];
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].name = "";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].publicIp = "";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].lanIp = "";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].uplink = "internet1";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].allowedInbound = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewalloneToOneNatRulesAllowedInbound()];
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].allowedInbound[0].protocol = "tcp";
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].allowedInbound[0].destinationPorts = [""];
          updateNetworkApplianceFirewallOneToOneNatRules.rules[0].allowedInbound[0].allowedIps = [""];

          instance.updateNetworkApplianceFirewallOneToOneNatRules(networkId, updateNetworkApplianceFirewallOneToOneNatRules, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceFirewallPortForwardingRules', function() {
        it('should call updateNetworkApplianceFirewallPortForwardingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceFirewallPortForwardingRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceFirewallPortForwardingRules = new MerakiDashboardApi.UpdateNetworkApplianceFirewallPortForwardingRules();
          updateNetworkApplianceFirewallPortForwardingRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancefirewallportForwardingRulesRules()];
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].name = "";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].lanIp = "";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].uplink = "internet1";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].publicPort = "";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].localPort = "";
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].allowedIps = [""];
          updateNetworkApplianceFirewallPortForwardingRules.rules[0].protocol = "tcp";

          instance.updateNetworkApplianceFirewallPortForwardingRules(networkId, updateNetworkApplianceFirewallPortForwardingRules, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkAppliancePort', function() {
        it('should call updateNetworkAppliancePort successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkAppliancePort call and complete the assertions
          /*
          var networkId = "networkId_example";
          var portId = "portId_example";
          var opts = {};
          opts.updateNetworkAppliancePort = new MerakiDashboardApi.UpdateNetworkAppliancePort();
          opts.updateNetworkAppliancePort.enabled = false;
          opts.updateNetworkAppliancePort.dropUntaggedTraffic = false;
          opts.updateNetworkAppliancePort.type = "";
          opts.updateNetworkAppliancePort.vlan = 0;
          opts.updateNetworkAppliancePort.allowedVlans = "";
          opts.updateNetworkAppliancePort.accessPolicy = "";

          instance.updateNetworkAppliancePort(networkId, portId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceSecurityIntrusion', function() {
        it('should call updateNetworkApplianceSecurityIntrusion successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceSecurityIntrusion call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceSecurityIntrusion = new MerakiDashboardApi.UpdateNetworkApplianceSecurityIntrusion();
          opts.updateNetworkApplianceSecurityIntrusion.mode = "prevention";
          opts.updateNetworkApplianceSecurityIntrusion.idsRulesets = "connectivity";
          opts.updateNetworkApplianceSecurityIntrusion.protectedNetworks = new MerakiDashboardApi.NetworksnetworkIdappliancesecurityintrusionProtectedNetworks();
          opts.updateNetworkApplianceSecurityIntrusion.protectedNetworks.useDefault = false;
          opts.updateNetworkApplianceSecurityIntrusion.protectedNetworks.includedCidr = [""];
          opts.updateNetworkApplianceSecurityIntrusion.protectedNetworks.excludedCidr = [""];

          instance.updateNetworkApplianceSecurityIntrusion(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceSecurityMalware', function() {
        it('should call updateNetworkApplianceSecurityMalware successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceSecurityMalware call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceSecurityMalware = new MerakiDashboardApi.UpdateNetworkApplianceSecurityMalware();
          updateNetworkApplianceSecurityMalware.mode = "enabled";
          updateNetworkApplianceSecurityMalware.allowedUrls = [new MerakiDashboardApi.NetworksnetworkIdappliancesecuritymalwareAllowedUrls()];
          updateNetworkApplianceSecurityMalware.allowedUrls[0].url = "";
          updateNetworkApplianceSecurityMalware.allowedUrls[0].comment = "";
          updateNetworkApplianceSecurityMalware.allowedFiles = [new MerakiDashboardApi.NetworksnetworkIdappliancesecuritymalwareAllowedFiles()];
          updateNetworkApplianceSecurityMalware.allowedFiles[0].sha256 = "";
          updateNetworkApplianceSecurityMalware.allowedFiles[0].comment = "";

          instance.updateNetworkApplianceSecurityMalware(networkId, updateNetworkApplianceSecurityMalware, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceSingleLan', function() {
        it('should call updateNetworkApplianceSingleLan successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceSingleLan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceSingleLan = new MerakiDashboardApi.UpdateNetworkApplianceSingleLan();
          opts.updateNetworkApplianceSingleLan.subnet = "";
          opts.updateNetworkApplianceSingleLan.applianceIp = "";

          instance.updateNetworkApplianceSingleLan(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceStaticRoute', function() {
        it('should call updateNetworkApplianceStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var staticRouteId = "staticRouteId_example";
          var opts = {};
          opts.updateNetworkApplianceStaticRoute = new MerakiDashboardApi.UpdateNetworkApplianceStaticRoute();
          opts.updateNetworkApplianceStaticRoute.name = "";
          opts.updateNetworkApplianceStaticRoute.subnet = "";
          opts.updateNetworkApplianceStaticRoute.gatewayIp = "";
          opts.updateNetworkApplianceStaticRoute.enabled = false;
          opts.updateNetworkApplianceStaticRoute.fixedIpAssignments = ;
          opts.updateNetworkApplianceStaticRoute.reservedIpRanges = [new MerakiDashboardApi.NetworksnetworkIdappliancestaticRoutesstaticRouteIdReservedIpRanges()];
          opts.updateNetworkApplianceStaticRoute.reservedIpRanges[0].start = "";
          opts.updateNetworkApplianceStaticRoute.reservedIpRanges[0].end = "";
          opts.updateNetworkApplianceStaticRoute.reservedIpRanges[0].comment = "";

          instance.updateNetworkApplianceStaticRoute(networkId, staticRouteId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceTrafficShaping', function() {
        it('should call updateNetworkApplianceTrafficShaping successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceTrafficShaping call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceTrafficShaping = new MerakiDashboardApi.UpdateNetworkApplianceTrafficShaping();
          opts.updateNetworkApplianceTrafficShaping.globalBandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingGlobalBandwidthLimits();
          opts.updateNetworkApplianceTrafficShaping.globalBandwidthLimits.limitUp = 0;
          opts.updateNetworkApplianceTrafficShaping.globalBandwidthLimits.limitDown = 0;

          instance.updateNetworkApplianceTrafficShaping(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceTrafficShapingCustomPerformanceClass', function() {
        it('should call updateNetworkApplianceTrafficShapingCustomPerformanceClass successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceTrafficShapingCustomPerformanceClass call and complete the assertions
          /*
          var networkId = "networkId_example";
          var customPerformanceClassId = "customPerformanceClassId_example";
          var opts = {};
          opts.updateNetworkApplianceTrafficShapingCustomPerformanceClass = new MerakiDashboardApi.UpdateNetworkApplianceTrafficShapingCustomPerformanceClass();
          opts.updateNetworkApplianceTrafficShapingCustomPerformanceClass.name = "";
          opts.updateNetworkApplianceTrafficShapingCustomPerformanceClass.maxLatency = 0;
          opts.updateNetworkApplianceTrafficShapingCustomPerformanceClass.maxJitter = 0;
          opts.updateNetworkApplianceTrafficShapingCustomPerformanceClass.maxLossPercentage = 0;

          instance.updateNetworkApplianceTrafficShapingCustomPerformanceClass(networkId, customPerformanceClassId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceTrafficShapingRules', function() {
        it('should call updateNetworkApplianceTrafficShapingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceTrafficShapingRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceTrafficShapingRules = new MerakiDashboardApi.UpdateNetworkApplianceTrafficShapingRules();
          opts.updateNetworkApplianceTrafficShapingRules.defaultRulesEnabled = false;
          opts.updateNetworkApplianceTrafficShapingRules.rules = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesRules()];
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].definitions = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesDefinitions()];
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].definitions[0].type = "application";
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].definitions[0].value = "";
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].perClientBandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimits();
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].perClientBandwidthLimits.settings = "";
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].perClientBandwidthLimits.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimitsBandwidthLimits();
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].perClientBandwidthLimits.bandwidthLimits.limitUp = 0;
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].perClientBandwidthLimits.bandwidthLimits.limitDown = 0;
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].dscpTagValue = 0;
          opts.updateNetworkApplianceTrafficShapingRules.rules[0].priority = "";

          instance.updateNetworkApplianceTrafficShapingRules(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceTrafficShapingUplinkBandwidth', function() {
        it('should call updateNetworkApplianceTrafficShapingUplinkBandwidth successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceTrafficShapingUplinkBandwidth call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth = new MerakiDashboardApi.UpdateNetworkApplianceTrafficShapingUplinkBandwidth();
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkBandwidthBandwidthLimits();
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.wan1 = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkBandwidthBandwidthLimitsWan1();
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.wan1.limitUp = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.wan1.limitDown = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.wan2 = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkBandwidthBandwidthLimitsWan2();
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.wan2.limitUp = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.wan2.limitDown = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.cellular = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkBandwidthBandwidthLimitsCellular();
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.cellular.limitUp = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkBandwidth.bandwidthLimits.cellular.limitDown = 0;

          instance.updateNetworkApplianceTrafficShapingUplinkBandwidth(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceTrafficShapingUplinkSelection', function() {
        it('should call updateNetworkApplianceTrafficShapingUplinkSelection successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceTrafficShapingUplinkSelection call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceTrafficShapingUplinkSelection = new MerakiDashboardApi.UpdateNetworkApplianceTrafficShapingUplinkSelection();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.activeActiveAutoVpnEnabled = false;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.defaultUplink = "wan1";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.loadBalancingEnabled = false;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionWanTrafficUplinkPreferences()];
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionTrafficFilters()];
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].type = "custom";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionValue();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.protocol = "tcp";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.source = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionValueSource();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.source.port = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.source.cidr = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.source.vlan = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.source.host = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.destination = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionValueDestination();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.destination.port = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].trafficFilters[0].value.destination.cidr = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.wanTrafficUplinkPreferences[0].preferredUplink = "wan1";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionVpnTrafficUplinkPreferences()];
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionTrafficFilters1()];
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].type = "applicationCategory";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionValue1();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.id = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.protocol = "tcp";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.source = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionValue1Source();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.source.port = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.source.cidr = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.source.network = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.source.vlan = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.source.host = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.destination = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionValue1Destination();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.destination.port = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.destination.cidr = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.destination.network = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.destination.vlan = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.destination.host = 0;
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].trafficFilters[0].value.destination.fqdn = "";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].preferredUplink = "wan1";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].failOverCriterion = "poorPerformance";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].performanceClass = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkSelectionPerformanceClass();
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].performanceClass.type = "builtin";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].performanceClass.builtinPerformanceClassName = "VoIP";
          opts.updateNetworkApplianceTrafficShapingUplinkSelection.vpnTrafficUplinkPreferences[0].performanceClass.customPerformanceClassId = "";

          instance.updateNetworkApplianceTrafficShapingUplinkSelection(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceVlan', function() {
        it('should call updateNetworkApplianceVlan successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceVlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var vlanId = "vlanId_example";
          var opts = {};
          opts.updateNetworkApplianceVlan = new MerakiDashboardApi.UpdateNetworkApplianceVlan();
          opts.updateNetworkApplianceVlan.name = "";
          opts.updateNetworkApplianceVlan.subnet = "";
          opts.updateNetworkApplianceVlan.applianceIp = "";
          opts.updateNetworkApplianceVlan.groupPolicyId = "";
          opts.updateNetworkApplianceVlan.vpnNatSubnet = "";
          opts.updateNetworkApplianceVlan.dhcpHandling = "Run a DHCP server";
          opts.updateNetworkApplianceVlan.dhcpRelayServerIps = [""];
          opts.updateNetworkApplianceVlan.dhcpLeaseTime = "30 minutes";
          opts.updateNetworkApplianceVlan.dhcpBootOptionsEnabled = false;
          opts.updateNetworkApplianceVlan.dhcpBootNextServer = "";
          opts.updateNetworkApplianceVlan.dhcpBootFilename = "";
          opts.updateNetworkApplianceVlan.fixedIpAssignments = ;
          opts.updateNetworkApplianceVlan.reservedIpRanges = [new MerakiDashboardApi.NetworksnetworkIdappliancestaticRoutesstaticRouteIdReservedIpRanges()];
          opts.updateNetworkApplianceVlan.reservedIpRanges[0].start = "";
          opts.updateNetworkApplianceVlan.reservedIpRanges[0].end = "";
          opts.updateNetworkApplianceVlan.reservedIpRanges[0].comment = "";
          opts.updateNetworkApplianceVlan.dnsNameservers = "";
          opts.updateNetworkApplianceVlan.dhcpOptions = [new MerakiDashboardApi.NetworksnetworkIdappliancevlansvlanIdDhcpOptions()];
          opts.updateNetworkApplianceVlan.dhcpOptions[0].code = "";
          opts.updateNetworkApplianceVlan.dhcpOptions[0].type = "text";
          opts.updateNetworkApplianceVlan.dhcpOptions[0].value = "";

          instance.updateNetworkApplianceVlan(networkId, vlanId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceVlansSettings', function() {
        it('should call updateNetworkApplianceVlansSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceVlansSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceVlansSettings = new MerakiDashboardApi.UpdateNetworkApplianceVlansSettings();
          opts.updateNetworkApplianceVlansSettings.vlansEnabled = false;

          instance.updateNetworkApplianceVlansSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceVpnSiteToSiteVpn', function() {
        it('should call updateNetworkApplianceVpnSiteToSiteVpn successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceVpnSiteToSiteVpn call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceVpnSiteToSiteVpn = new MerakiDashboardApi.UpdateNetworkApplianceVpnSiteToSiteVpn();
          updateNetworkApplianceVpnSiteToSiteVpn.mode = "none";
          updateNetworkApplianceVpnSiteToSiteVpn.hubs = [new MerakiDashboardApi.NetworksnetworkIdappliancevpnsiteToSiteVpnHubs()];
          updateNetworkApplianceVpnSiteToSiteVpn.hubs[0].hubId = "";
          updateNetworkApplianceVpnSiteToSiteVpn.hubs[0].useDefaultRoute = false;
          updateNetworkApplianceVpnSiteToSiteVpn.subnets = [new MerakiDashboardApi.NetworksnetworkIdappliancevpnsiteToSiteVpnSubnets()];
          updateNetworkApplianceVpnSiteToSiteVpn.subnets[0].localSubnet = "";
          updateNetworkApplianceVpnSiteToSiteVpn.subnets[0].useVpn = false;

          instance.updateNetworkApplianceVpnSiteToSiteVpn(networkId, updateNetworkApplianceVpnSiteToSiteVpn, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceWarmSpare', function() {
        it('should call updateNetworkApplianceWarmSpare successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceWarmSpare call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkApplianceWarmSpare = new MerakiDashboardApi.UpdateNetworkApplianceWarmSpare();
          updateNetworkApplianceWarmSpare.enabled = false;
          updateNetworkApplianceWarmSpare.spareSerial = "";
          updateNetworkApplianceWarmSpare.uplinkMode = "";
          updateNetworkApplianceWarmSpare.virtualIp1 = "";
          updateNetworkApplianceWarmSpare.virtualIp2 = "";

          instance.updateNetworkApplianceWarmSpare(networkId, updateNetworkApplianceWarmSpare, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkCameraQualityRetentionProfile', function() {
        it('should call updateNetworkCameraQualityRetentionProfile successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkCameraQualityRetentionProfile call and complete the assertions
          /*
          var networkId = "networkId_example";
          var qualityRetentionProfileId = "qualityRetentionProfileId_example";
          var opts = {};
          opts.updateNetworkCameraQualityRetentionProfile = new MerakiDashboardApi.UpdateNetworkCameraQualityRetentionProfile();
          opts.updateNetworkCameraQualityRetentionProfile.name = "";
          opts.updateNetworkCameraQualityRetentionProfile.motionBasedRetentionEnabled = false;
          opts.updateNetworkCameraQualityRetentionProfile.restrictedBandwidthModeEnabled = false;
          opts.updateNetworkCameraQualityRetentionProfile.audioRecordingEnabled = false;
          opts.updateNetworkCameraQualityRetentionProfile.cloudArchiveEnabled = false;
          opts.updateNetworkCameraQualityRetentionProfile.motionDetectorVersion = 0;
          opts.updateNetworkCameraQualityRetentionProfile.scheduleId = "";
          opts.updateNetworkCameraQualityRetentionProfile.maxRetentionDays = 0;
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings = new MerakiDashboardApi.NetworksnetworkIdcameraqualityRetentionProfilesVideoSettings();
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV21MV71 = new MerakiDashboardApi.NetworksnetworkIdcameraqualityRetentionProfilesVideoSettingsMV21MV71();
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV21MV71.quality = "Standard";
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV21MV71.resolution = "1280x720";
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV12MV22MV72 = new MerakiDashboardApi.NetworksnetworkIdcameraqualityRetentionProfilesVideoSettingsMV12MV22MV72();
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV12MV22MV72.quality = "Standard";
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV12MV22MV72.resolution = "1280x720";
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV32 = new MerakiDashboardApi.NetworksnetworkIdcameraqualityRetentionProfilesVideoSettingsMV32();
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV32.quality = "Standard";
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV32.resolution = "1080x1080";
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV12WE = new MerakiDashboardApi.NetworksnetworkIdcameraqualityRetentionProfilesVideoSettingsMV12WE();
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV12WE.quality = "Standard";
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV12WE.resolution = "1280x720";
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV22XMV72X = new MerakiDashboardApi.NetworksnetworkIdcameraqualityRetentionProfilesVideoSettingsMV22XMV72X();
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV22XMV72X.quality = "Standard";
          opts.updateNetworkCameraQualityRetentionProfile.videoSettings.mV22XMV72X.resolution = "1280x720";

          instance.updateNetworkCameraQualityRetentionProfile(networkId, qualityRetentionProfileId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkCellularGatewayConnectivityMonitoringDestinations', function() {
        it('should call updateNetworkCellularGatewayConnectivityMonitoringDestinations successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkCellularGatewayConnectivityMonitoringDestinations call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkCellularGatewayConnectivityMonitoringDestinations = new MerakiDashboardApi.UpdateNetworkCellularGatewayConnectivityMonitoringDestinations();
          opts.updateNetworkCellularGatewayConnectivityMonitoringDestinations.destinations = [new MerakiDashboardApi.NetworksnetworkIdcellularGatewayconnectivityMonitoringDestinationsDestinations()];
          opts.updateNetworkCellularGatewayConnectivityMonitoringDestinations.destinations[0].ip = "";
          opts.updateNetworkCellularGatewayConnectivityMonitoringDestinations.destinations[0].description = "";
          opts.updateNetworkCellularGatewayConnectivityMonitoringDestinations.destinations[0]._default = false;

          instance.updateNetworkCellularGatewayConnectivityMonitoringDestinations(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkCellularGatewayDhcp', function() {
        it('should call updateNetworkCellularGatewayDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkCellularGatewayDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkCellularGatewayDhcp = new MerakiDashboardApi.UpdateNetworkCellularGatewayDhcp();
          opts.updateNetworkCellularGatewayDhcp.dhcpLeaseTime = "";
          opts.updateNetworkCellularGatewayDhcp.dnsNameservers = "";
          opts.updateNetworkCellularGatewayDhcp.dnsCustomNameservers = [""];

          instance.updateNetworkCellularGatewayDhcp(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkCellularGatewaySubnetPool', function() {
        it('should call updateNetworkCellularGatewaySubnetPool successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkCellularGatewaySubnetPool call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkCellularGatewaySubnetPool = new MerakiDashboardApi.UpdateNetworkCellularGatewaySubnetPool();
          opts.updateNetworkCellularGatewaySubnetPool.mask = 0;
          opts.updateNetworkCellularGatewaySubnetPool.cidr = "";

          instance.updateNetworkCellularGatewaySubnetPool(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkCellularGatewayUplink', function() {
        it('should call updateNetworkCellularGatewayUplink successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkCellularGatewayUplink call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkCellularGatewayUplink = new MerakiDashboardApi.UpdateNetworkCellularGatewayUplink();
          opts.updateNetworkCellularGatewayUplink.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapinguplinkBandwidthBandwidthLimitsCellular();
          opts.updateNetworkCellularGatewayUplink.bandwidthLimits.limitUp = 0;
          opts.updateNetworkCellularGatewayUplink.bandwidthLimits.limitDown = 0;

          instance.updateNetworkCellularGatewayUplink(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkClientPolicy', function() {
        it('should call updateNetworkClientPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkClientPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";
          var updateNetworkClientPolicy = new MerakiDashboardApi.UpdateNetworkClientPolicy();
          updateNetworkClientPolicy.devicePolicy = "";
          updateNetworkClientPolicy.groupPolicyId = "";

          instance.updateNetworkClientPolicy(networkId, clientId, updateNetworkClientPolicy, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkClientSplashAuthorizationStatus', function() {
        it('should call updateNetworkClientSplashAuthorizationStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkClientSplashAuthorizationStatus call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";
          var updateNetworkClientSplashAuthorizationStatus = new MerakiDashboardApi.UpdateNetworkClientSplashAuthorizationStatus();
          updateNetworkClientSplashAuthorizationStatus.ssids = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids();
          updateNetworkClientSplashAuthorizationStatus.ssids._0 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids0();
          updateNetworkClientSplashAuthorizationStatus.ssids._0.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._1 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids1();
          updateNetworkClientSplashAuthorizationStatus.ssids._1.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._2 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids2();
          updateNetworkClientSplashAuthorizationStatus.ssids._2.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._3 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids3();
          updateNetworkClientSplashAuthorizationStatus.ssids._3.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._4 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids4();
          updateNetworkClientSplashAuthorizationStatus.ssids._4.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._5 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids5();
          updateNetworkClientSplashAuthorizationStatus.ssids._5.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._6 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids6();
          updateNetworkClientSplashAuthorizationStatus.ssids._6.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._7 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids7();
          updateNetworkClientSplashAuthorizationStatus.ssids._7.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._8 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids8();
          updateNetworkClientSplashAuthorizationStatus.ssids._8.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._9 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids9();
          updateNetworkClientSplashAuthorizationStatus.ssids._9.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._10 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids10();
          updateNetworkClientSplashAuthorizationStatus.ssids._10.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._11 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids11();
          updateNetworkClientSplashAuthorizationStatus.ssids._11.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._12 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids12();
          updateNetworkClientSplashAuthorizationStatus.ssids._12.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._13 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids13();
          updateNetworkClientSplashAuthorizationStatus.ssids._13.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._14 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids14();
          updateNetworkClientSplashAuthorizationStatus.ssids._14.isAuthorized = false;

          instance.updateNetworkClientSplashAuthorizationStatus(networkId, clientId, updateNetworkClientSplashAuthorizationStatus, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkFirmwareUpgrades', function() {
        it('should call updateNetworkFirmwareUpgrades successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkFirmwareUpgrades call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkFirmwareUpgrades = new MerakiDashboardApi.UpdateNetworkFirmwareUpgrades();
          opts.updateNetworkFirmwareUpgrades.upgradeWindow = new MerakiDashboardApi.NetworksnetworkIdfirmwareUpgradesUpgradeWindow();
          opts.updateNetworkFirmwareUpgrades.upgradeWindow.dayOfWeek = "sun";
          opts.updateNetworkFirmwareUpgrades.upgradeWindow.hourOfDay = "0:00";

          instance.updateNetworkFirmwareUpgrades(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkFloorPlan', function() {
        it('should call updateNetworkFloorPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkFloorPlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var floorPlanId = "floorPlanId_example";
          var opts = {};
          opts.updateNetworkFloorPlan = new MerakiDashboardApi.UpdateNetworkFloorPlan();
          opts.updateNetworkFloorPlan.name = "";
          opts.updateNetworkFloorPlan.center = new MerakiDashboardApi.NetworksnetworkIdfloorPlansfloorPlanIdCenter();
          opts.updateNetworkFloorPlan.center.lat = 0.0;
          opts.updateNetworkFloorPlan.center.lng = 0.0;
          opts.updateNetworkFloorPlan.bottomLeftCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansBottomLeftCorner();
          opts.updateNetworkFloorPlan.bottomLeftCorner.lat = 0.0;
          opts.updateNetworkFloorPlan.bottomLeftCorner.lng = 0.0;
          opts.updateNetworkFloorPlan.bottomRightCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansBottomRightCorner();
          opts.updateNetworkFloorPlan.bottomRightCorner.lat = 0.0;
          opts.updateNetworkFloorPlan.bottomRightCorner.lng = 0.0;
          opts.updateNetworkFloorPlan.topLeftCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansTopLeftCorner();
          opts.updateNetworkFloorPlan.topLeftCorner.lat = 0.0;
          opts.updateNetworkFloorPlan.topLeftCorner.lng = 0.0;
          opts.updateNetworkFloorPlan.topRightCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansTopRightCorner();
          opts.updateNetworkFloorPlan.topRightCorner.lat = 0.0;
          opts.updateNetworkFloorPlan.topRightCorner.lng = 0.0;
          opts.updateNetworkFloorPlan.imageContents = ""undefined;

          instance.updateNetworkFloorPlan(networkId, floorPlanId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkGroupPolicy', function() {
        it('should call updateNetworkGroupPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkGroupPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var groupPolicyId = "groupPolicyId_example";
          var opts = {};
          opts.updateNetworkGroupPolicy = new MerakiDashboardApi.UpdateNetworkGroupPolicy();
          opts.updateNetworkGroupPolicy.name = "";
          opts.updateNetworkGroupPolicy.scheduling = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesScheduling();
          opts.updateNetworkGroupPolicy.scheduling.enabled = false;
          opts.updateNetworkGroupPolicy.scheduling.monday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingMonday();
          opts.updateNetworkGroupPolicy.scheduling.monday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.monday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.monday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.tuesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingTuesday();
          opts.updateNetworkGroupPolicy.scheduling.tuesday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.tuesday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.tuesday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.wednesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingWednesday();
          opts.updateNetworkGroupPolicy.scheduling.wednesday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.wednesday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.wednesday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.thursday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingThursday();
          opts.updateNetworkGroupPolicy.scheduling.thursday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.thursday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.thursday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.friday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingFriday();
          opts.updateNetworkGroupPolicy.scheduling.friday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.friday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.friday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.saturday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSaturday();
          opts.updateNetworkGroupPolicy.scheduling.saturday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.saturday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.saturday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.sunday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSunday();
          opts.updateNetworkGroupPolicy.scheduling.sunday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.sunday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.sunday.to = "";
          opts.updateNetworkGroupPolicy.bandwidth = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBandwidth();
          opts.updateNetworkGroupPolicy.bandwidth.settings = "network default";
          opts.updateNetworkGroupPolicy.bandwidth.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBandwidthBandwidthLimits();
          opts.updateNetworkGroupPolicy.bandwidth.bandwidthLimits.limitUp = 0;
          opts.updateNetworkGroupPolicy.bandwidth.bandwidthLimits.limitDown = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShaping();
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.settings = "network default";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingTrafficShapingRules()];
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesDefinitions()];
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions[0].type = "application";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions[0].value = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimits();
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.settings = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimitsBandwidthLimits();
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits.limitUp = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits.limitDown = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].dscpTagValue = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].pcpTagValue = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].priority = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules()];
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].comment = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].policy = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].protocol = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].destPort = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].destCidr = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL7FirewallRules()];
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].policy = "deny";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].type = "application";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].value = "";
          opts.updateNetworkGroupPolicy.contentFiltering = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFiltering();
          opts.updateNetworkGroupPolicy.contentFiltering.allowedUrlPatterns = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringAllowedUrlPatterns();
          opts.updateNetworkGroupPolicy.contentFiltering.allowedUrlPatterns.settings = "network default";
          opts.updateNetworkGroupPolicy.contentFiltering.allowedUrlPatterns.patterns = [""];
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlPatterns = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringBlockedUrlPatterns();
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlPatterns.settings = "network default";
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlPatterns.patterns = [""];
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlCategories = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringBlockedUrlCategories();
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlCategories.settings = "network default";
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlCategories.categories = [""];
          opts.updateNetworkGroupPolicy.splashAuthSettings = "network default";
          opts.updateNetworkGroupPolicy.vlanTagging = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesVlanTagging();
          opts.updateNetworkGroupPolicy.vlanTagging.settings = "network default";
          opts.updateNetworkGroupPolicy.vlanTagging.vlanId = "";
          opts.updateNetworkGroupPolicy.bonjourForwarding = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBonjourForwarding();
          opts.updateNetworkGroupPolicy.bonjourForwarding.settings = "network default";
          opts.updateNetworkGroupPolicy.bonjourForwarding.rules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBonjourForwardingRules()];
          opts.updateNetworkGroupPolicy.bonjourForwarding.rules[0].description = "";
          opts.updateNetworkGroupPolicy.bonjourForwarding.rules[0].vlanId = "";
          opts.updateNetworkGroupPolicy.bonjourForwarding.rules[0].services = ["All Services"]"All Services";

          instance.updateNetworkGroupPolicy(networkId, groupPolicyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkMerakiAuthUser', function() {
        it('should call updateNetworkMerakiAuthUser successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkMerakiAuthUser call and complete the assertions
          /*
          var networkId = "networkId_example";
          var merakiAuthUserId = "merakiAuthUserId_example";
          var opts = {};
          opts.updateNetworkMerakiAuthUser = new MerakiDashboardApi.UpdateNetworkMerakiAuthUser();
          opts.updateNetworkMerakiAuthUser.name = "";
          opts.updateNetworkMerakiAuthUser.password = "";
          opts.updateNetworkMerakiAuthUser.emailPasswordToUser = false;
          opts.updateNetworkMerakiAuthUser.authorizations = [new MerakiDashboardApi.NetworksnetworkIdmerakiAuthUsersmerakiAuthUserIdAuthorizations()];
          opts.updateNetworkMerakiAuthUser.authorizations[0].ssidNumber = 0;
          opts.updateNetworkMerakiAuthUser.authorizations[0].expiresAt = "";

          instance.updateNetworkMerakiAuthUser(networkId, merakiAuthUserId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkMqttBroker', function() {
        it('should call updateNetworkMqttBroker successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkMqttBroker call and complete the assertions
          /*
          var networkId = "networkId_example";
          var mqttBrokerId = "mqttBrokerId_example";
          var opts = {};
          opts.updateNetworkMqttBroker = new MerakiDashboardApi.UpdateNetworkMqttBroker();
          opts.updateNetworkMqttBroker.name = "";
          opts.updateNetworkMqttBroker.host = "";
          opts.updateNetworkMqttBroker.port = 0;

          instance.updateNetworkMqttBroker(networkId, mqttBrokerId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkNetflow', function() {
        it('should call updateNetworkNetflow successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkNetflow call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkNetflow = new MerakiDashboardApi.UpdateNetworkNetflow();
          opts.updateNetworkNetflow.reportingEnabled = false;
          opts.updateNetworkNetflow.collectorIp = "";
          opts.updateNetworkNetflow.collectorPort = 0;

          instance.updateNetworkNetflow(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSettings', function() {
        it('should call updateNetworkSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSettings = new MerakiDashboardApi.UpdateNetworkSettings();
          opts.updateNetworkSettings.localStatusPageEnabled = false;
          opts.updateNetworkSettings.remoteStatusPageEnabled = false;

          instance.updateNetworkSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSmDevicesFields', function() {
        it('should call updateNetworkSmDevicesFields successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSmDevicesFields call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkSmDevicesFields = new MerakiDashboardApi.UpdateNetworkSmDevicesFields();
          updateNetworkSmDevicesFields.wifiMac = "";
          updateNetworkSmDevicesFields.id = "";
          updateNetworkSmDevicesFields.serial = "";
          updateNetworkSmDevicesFields.deviceFields = new MerakiDashboardApi.NetworksnetworkIdsmdevicesfieldsDeviceFields();
          updateNetworkSmDevicesFields.deviceFields.name = "";
          updateNetworkSmDevicesFields.deviceFields.notes = "";

          instance.updateNetworkSmDevicesFields(networkId, updateNetworkSmDevicesFields, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSmTargetGroup', function() {
        it('should call updateNetworkSmTargetGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSmTargetGroup call and complete the assertions
          /*
          var networkId = "networkId_example";
          var targetGroupId = "targetGroupId_example";
          var opts = {};
          opts.updateNetworkSmTargetGroup = new MerakiDashboardApi.UpdateNetworkSmTargetGroup();
          opts.updateNetworkSmTargetGroup.name = "";
          opts.updateNetworkSmTargetGroup.scope = "";

          instance.updateNetworkSmTargetGroup(networkId, targetGroupId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSnmp', function() {
        it('should call updateNetworkSnmp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSnmp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSnmp = new MerakiDashboardApi.UpdateNetworkSnmp();
          opts.updateNetworkSnmp.access = "none";
          opts.updateNetworkSnmp.communityString = "";
          opts.updateNetworkSnmp.users = [new MerakiDashboardApi.NetworksnetworkIdsnmpUsers()];
          opts.updateNetworkSnmp.users[0].username = "";
          opts.updateNetworkSnmp.users[0].passphrase = "";

          instance.updateNetworkSnmp(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchAccessControlLists', function() {
        it('should call updateNetworkSwitchAccessControlLists successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchAccessControlLists call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkSwitchAccessControlLists = new MerakiDashboardApi.UpdateNetworkSwitchAccessControlLists();
          updateNetworkSwitchAccessControlLists.rules = [new MerakiDashboardApi.NetworksnetworkIdswitchaccessControlListsRules()];
          updateNetworkSwitchAccessControlLists.rules[0].comment = "";
          updateNetworkSwitchAccessControlLists.rules[0].policy = "allow";
          updateNetworkSwitchAccessControlLists.rules[0].ipVersion = "any";
          updateNetworkSwitchAccessControlLists.rules[0].protocol = "tcp";
          updateNetworkSwitchAccessControlLists.rules[0].srcCidr = "";
          updateNetworkSwitchAccessControlLists.rules[0].srcPort = "";
          updateNetworkSwitchAccessControlLists.rules[0].dstCidr = "";
          updateNetworkSwitchAccessControlLists.rules[0].dstPort = "";
          updateNetworkSwitchAccessControlLists.rules[0].vlan = "";

          instance.updateNetworkSwitchAccessControlLists(networkId, updateNetworkSwitchAccessControlLists, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchDhcpServerPolicy', function() {
        it('should call updateNetworkSwitchDhcpServerPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchDhcpServerPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchDhcpServerPolicy = new MerakiDashboardApi.UpdateNetworkSwitchDhcpServerPolicy();
          opts.updateNetworkSwitchDhcpServerPolicy.defaultPolicy = "allow";
          opts.updateNetworkSwitchDhcpServerPolicy.allowedServers = [""];
          opts.updateNetworkSwitchDhcpServerPolicy.blockedServers = [""];

          instance.updateNetworkSwitchDhcpServerPolicy(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchDscpToCosMappings', function() {
        it('should call updateNetworkSwitchDscpToCosMappings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchDscpToCosMappings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkSwitchDscpToCosMappings = new MerakiDashboardApi.UpdateNetworkSwitchDscpToCosMappings();
          updateNetworkSwitchDscpToCosMappings.mappings = [new MerakiDashboardApi.NetworksnetworkIdswitchdscpToCosMappingsMappings()];
          updateNetworkSwitchDscpToCosMappings.mappings[0].dscp = 0;
          updateNetworkSwitchDscpToCosMappings.mappings[0].cos = 0;
          updateNetworkSwitchDscpToCosMappings.mappings[0].title = "";

          instance.updateNetworkSwitchDscpToCosMappings(networkId, updateNetworkSwitchDscpToCosMappings, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchLinkAggregation', function() {
        it('should call updateNetworkSwitchLinkAggregation successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchLinkAggregation call and complete the assertions
          /*
          var networkId = "networkId_example";
          var linkAggregationId = "linkAggregationId_example";
          var opts = {};
          opts.updateNetworkSwitchLinkAggregation = new MerakiDashboardApi.UpdateNetworkSwitchLinkAggregation();
          opts.updateNetworkSwitchLinkAggregation.switchPorts = [new MerakiDashboardApi.NetworksnetworkIdswitchlinkAggregationsSwitchPorts()];
          opts.updateNetworkSwitchLinkAggregation.switchPorts[0].serial = "";
          opts.updateNetworkSwitchLinkAggregation.switchPorts[0].portId = "";
          opts.updateNetworkSwitchLinkAggregation.switchProfilePorts = [new MerakiDashboardApi.NetworksnetworkIdswitchlinkAggregationsSwitchProfilePorts()];
          opts.updateNetworkSwitchLinkAggregation.switchProfilePorts[0].profile = "";
          opts.updateNetworkSwitchLinkAggregation.switchProfilePorts[0].portId = "";

          instance.updateNetworkSwitchLinkAggregation(networkId, linkAggregationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchMtu', function() {
        it('should call updateNetworkSwitchMtu successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchMtu call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchMtu = new MerakiDashboardApi.UpdateNetworkSwitchMtu();
          opts.updateNetworkSwitchMtu.defaultMtuSize = 0;
          opts.updateNetworkSwitchMtu.overrides = [new MerakiDashboardApi.NetworksnetworkIdswitchmtuOverrides()];
          opts.updateNetworkSwitchMtu.overrides[0].switches = [""];
          opts.updateNetworkSwitchMtu.overrides[0].switchProfiles = [""];
          opts.updateNetworkSwitchMtu.overrides[0].mtuSize = 0;

          instance.updateNetworkSwitchMtu(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchPortSchedule', function() {
        it('should call updateNetworkSwitchPortSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchPortSchedule call and complete the assertions
          /*
          var networkId = "networkId_example";
          var portScheduleId = "portScheduleId_example";
          var opts = {};
          opts.updateNetworkSwitchPortSchedule = new MerakiDashboardApi.UpdateNetworkSwitchPortSchedule();
          opts.updateNetworkSwitchPortSchedule.name = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule = new MerakiDashboardApi.NetworksnetworkIdswitchportSchedulesPortSchedule();
          opts.updateNetworkSwitchPortSchedule.portSchedule.monday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingMonday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.monday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.monday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.monday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.tuesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingTuesday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.tuesday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.tuesday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.tuesday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.wednesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingWednesday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.wednesday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.wednesday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.wednesday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.thursday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingThursday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.thursday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.thursday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.thursday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.friday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingFriday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.friday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.friday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.friday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.saturday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSaturday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.saturday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.saturday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.saturday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.sunday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSunday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.sunday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.sunday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.sunday.to = "";

          instance.updateNetworkSwitchPortSchedule(networkId, portScheduleId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchQosRule', function() {
        it('should call updateNetworkSwitchQosRule successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchQosRule call and complete the assertions
          /*
          var networkId = "networkId_example";
          var qosRuleId = "qosRuleId_example";
          var opts = {};
          opts.updateNetworkSwitchQosRule = new MerakiDashboardApi.UpdateNetworkSwitchQosRule();
          opts.updateNetworkSwitchQosRule.vlan = 0;
          opts.updateNetworkSwitchQosRule.protocol = "ANY";
          opts.updateNetworkSwitchQosRule.srcPort = 0;
          opts.updateNetworkSwitchQosRule.srcPortRange = "";
          opts.updateNetworkSwitchQosRule.dstPort = 0;
          opts.updateNetworkSwitchQosRule.dstPortRange = "";
          opts.updateNetworkSwitchQosRule.dscp = 0;

          instance.updateNetworkSwitchQosRule(networkId, qosRuleId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchQosRulesOrder', function() {
        it('should call updateNetworkSwitchQosRulesOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchQosRulesOrder call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkSwitchQosRulesOrder = new MerakiDashboardApi.UpdateNetworkSwitchQosRulesOrder();
          updateNetworkSwitchQosRulesOrder.ruleIds = [""];

          instance.updateNetworkSwitchQosRulesOrder(networkId, updateNetworkSwitchQosRulesOrder, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchRoutingMulticast', function() {
        it('should call updateNetworkSwitchRoutingMulticast successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchRoutingMulticast call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchRoutingMulticast = new MerakiDashboardApi.UpdateNetworkSwitchRoutingMulticast();
          opts.updateNetworkSwitchRoutingMulticast.defaultSettings = new MerakiDashboardApi.NetworksnetworkIdswitchroutingmulticastDefaultSettings();
          opts.updateNetworkSwitchRoutingMulticast.defaultSettings.igmpSnoopingEnabled = false;
          opts.updateNetworkSwitchRoutingMulticast.defaultSettings.floodUnknownMulticastTrafficEnabled = false;
          opts.updateNetworkSwitchRoutingMulticast.overrides = [new MerakiDashboardApi.NetworksnetworkIdswitchroutingmulticastOverrides()];
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].switchProfiles = [""];
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].switches = [""];
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].stacks = [""];
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].igmpSnoopingEnabled = false;
          opts.updateNetworkSwitchRoutingMulticast.overrides[0].floodUnknownMulticastTrafficEnabled = false;

          instance.updateNetworkSwitchRoutingMulticast(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchRoutingMulticastRendezvousPoint', function() {
        it('should call updateNetworkSwitchRoutingMulticastRendezvousPoint successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchRoutingMulticastRendezvousPoint call and complete the assertions
          /*
          var networkId = "networkId_example";
          var rendezvousPointId = "rendezvousPointId_example";
          var updateNetworkSwitchRoutingMulticastRendezvousPoint = new MerakiDashboardApi.UpdateNetworkSwitchRoutingMulticastRendezvousPoint();
          updateNetworkSwitchRoutingMulticastRendezvousPoint.interfaceIp = "";
          updateNetworkSwitchRoutingMulticastRendezvousPoint.multicastGroup = "";

          instance.updateNetworkSwitchRoutingMulticastRendezvousPoint(networkId, rendezvousPointId, updateNetworkSwitchRoutingMulticastRendezvousPoint, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchRoutingOspf', function() {
        it('should call updateNetworkSwitchRoutingOspf successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchRoutingOspf call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchRoutingOspf = new MerakiDashboardApi.UpdateNetworkSwitchRoutingOspf();
          opts.updateNetworkSwitchRoutingOspf.enabled = false;
          opts.updateNetworkSwitchRoutingOspf.helloTimerInSeconds = 0;
          opts.updateNetworkSwitchRoutingOspf.deadTimerInSeconds = 0;
          opts.updateNetworkSwitchRoutingOspf.areas = [new MerakiDashboardApi.NetworksnetworkIdswitchroutingospfAreas()];
          opts.updateNetworkSwitchRoutingOspf.areas[0].areaId = 0;
          opts.updateNetworkSwitchRoutingOspf.areas[0].areaName = "";
          opts.updateNetworkSwitchRoutingOspf.areas[0].areaType = "normal";
          opts.updateNetworkSwitchRoutingOspf.md5AuthenticationEnabled = false;
          opts.updateNetworkSwitchRoutingOspf.md5AuthenticationKey = new MerakiDashboardApi.NetworksnetworkIdswitchroutingospfMd5AuthenticationKey();
          opts.updateNetworkSwitchRoutingOspf.md5AuthenticationKey.id = 0;
          opts.updateNetworkSwitchRoutingOspf.md5AuthenticationKey.passphrase = "";

          instance.updateNetworkSwitchRoutingOspf(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchSettings', function() {
        it('should call updateNetworkSwitchSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchSettings = new MerakiDashboardApi.UpdateNetworkSwitchSettings();
          opts.updateNetworkSwitchSettings.vlan = 0;
          opts.updateNetworkSwitchSettings.useCombinedPower = false;
          opts.updateNetworkSwitchSettings.powerExceptions = [new MerakiDashboardApi.NetworksnetworkIdswitchsettingsPowerExceptions()];
          opts.updateNetworkSwitchSettings.powerExceptions[0].serial = "";
          opts.updateNetworkSwitchSettings.powerExceptions[0].powerType = "combined";

          instance.updateNetworkSwitchSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStackRoutingInterface', function() {
        it('should call updateNetworkSwitchStackRoutingInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStackRoutingInterface call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateNetworkSwitchStackRoutingInterface = new MerakiDashboardApi.UpdateNetworkSwitchStackRoutingInterface();
          opts.updateNetworkSwitchStackRoutingInterface.name = "";
          opts.updateNetworkSwitchStackRoutingInterface.subnet = "";
          opts.updateNetworkSwitchStackRoutingInterface.interfaceIp = "";
          opts.updateNetworkSwitchStackRoutingInterface.multicastRouting = "disabled";
          opts.updateNetworkSwitchStackRoutingInterface.vlanId = 0;
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings = new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIdOspfSettings();
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings.area = "";
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings.cost = 0;
          opts.updateNetworkSwitchStackRoutingInterface.ospfSettings.isPassiveEnabled = false;

          instance.updateNetworkSwitchStackRoutingInterface(networkId, switchStackId, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStackRoutingInterfaceDhcp', function() {
        it('should call updateNetworkSwitchStackRoutingInterfaceDhcp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStackRoutingInterfaceDhcp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var interfaceId = "interfaceId_example";
          var opts = {};
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp = new MerakiDashboardApi.UpdateNetworkSwitchStackRoutingInterfaceDhcp();
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpMode = "dhcpDisabled";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpRelayServerIps = [""];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpLeaseTime = "30 minutes";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dnsNameserversOption = "googlePublicDns";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dnsCustomNameservers = [""];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootOptionsEnabled = false;
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootNextServer = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.bootFileName = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpDhcpOptions()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].code = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].type = "text";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.dhcpOptions[0].value = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpReservedIpRanges()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].start = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].end = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.reservedIpRanges[0].comment = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments = [new MerakiDashboardApi.DevicesserialswitchroutinginterfacesinterfaceIddhcpFixedIpAssignments()];
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].name = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].mac = "";
          opts.updateNetworkSwitchStackRoutingInterfaceDhcp.fixedIpAssignments[0].ip = "";

          instance.updateNetworkSwitchStackRoutingInterfaceDhcp(networkId, switchStackId, interfaceId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStackRoutingStaticRoute', function() {
        it('should call updateNetworkSwitchStackRoutingStaticRoute successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStackRoutingStaticRoute call and complete the assertions
          /*
          var networkId = "networkId_example";
          var switchStackId = "switchStackId_example";
          var staticRouteId = "staticRouteId_example";
          var opts = {};
          opts.updateNetworkSwitchStackRoutingStaticRoute = new MerakiDashboardApi.UpdateNetworkSwitchStackRoutingStaticRoute();
          opts.updateNetworkSwitchStackRoutingStaticRoute.name = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.subnet = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.nextHopIp = "";
          opts.updateNetworkSwitchStackRoutingStaticRoute.advertiseViaOspfEnabled = false;
          opts.updateNetworkSwitchStackRoutingStaticRoute.preferOverOspfRoutesEnabled = false;

          instance.updateNetworkSwitchStackRoutingStaticRoute(networkId, switchStackId, staticRouteId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStormControl', function() {
        it('should call updateNetworkSwitchStormControl successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStormControl call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchStormControl = new MerakiDashboardApi.UpdateNetworkSwitchStormControl();
          opts.updateNetworkSwitchStormControl.broadcastThreshold = 0;
          opts.updateNetworkSwitchStormControl.multicastThreshold = 0;
          opts.updateNetworkSwitchStormControl.unknownUnicastThreshold = 0;

          instance.updateNetworkSwitchStormControl(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchStp', function() {
        it('should call updateNetworkSwitchStp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchStp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchStp = new MerakiDashboardApi.UpdateNetworkSwitchStp();
          opts.updateNetworkSwitchStp.rstpEnabled = false;
          opts.updateNetworkSwitchStp.stpBridgePriority = [new MerakiDashboardApi.NetworksnetworkIdswitchstpStpBridgePriority()];
          opts.updateNetworkSwitchStp.stpBridgePriority[0].switchProfiles = [""];
          opts.updateNetworkSwitchStp.stpBridgePriority[0].switches = [""];
          opts.updateNetworkSwitchStp.stpBridgePriority[0].stacks = [""];
          opts.updateNetworkSwitchStp.stpBridgePriority[0].stpPriority = 0;

          instance.updateNetworkSwitchStp(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSyslogServers', function() {
        it('should call updateNetworkSyslogServers successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSyslogServers call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkSyslogServers = new MerakiDashboardApi.UpdateNetworkSyslogServers();
          updateNetworkSyslogServers.servers = [new MerakiDashboardApi.NetworksnetworkIdsyslogServersServers()];
          updateNetworkSyslogServers.servers[0].host = "";
          updateNetworkSyslogServers.servers[0].port = 0;
          updateNetworkSyslogServers.servers[0].roles = [""];

          instance.updateNetworkSyslogServers(networkId, updateNetworkSyslogServers, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkTrafficAnalysis', function() {
        it('should call updateNetworkTrafficAnalysis successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkTrafficAnalysis call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkTrafficAnalysis = new MerakiDashboardApi.UpdateNetworkTrafficAnalysis();
          opts.updateNetworkTrafficAnalysis.mode = "disabled";
          opts.updateNetworkTrafficAnalysis.customPieChartItems = [new MerakiDashboardApi.NetworksnetworkIdtrafficAnalysisCustomPieChartItems()];
          opts.updateNetworkTrafficAnalysis.customPieChartItems[0].name = "";
          opts.updateNetworkTrafficAnalysis.customPieChartItems[0].type = "host";
          opts.updateNetworkTrafficAnalysis.customPieChartItems[0].value = "";

          instance.updateNetworkTrafficAnalysis(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWebhooksHttpServer', function() {
        it('should call updateNetworkWebhooksHttpServer successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWebhooksHttpServer call and complete the assertions
          /*
          var networkId = "networkId_example";
          var httpServerId = "httpServerId_example";
          var opts = {};
          opts.updateNetworkWebhooksHttpServer = new MerakiDashboardApi.UpdateNetworkWebhooksHttpServer();
          opts.updateNetworkWebhooksHttpServer.name = "";
          opts.updateNetworkWebhooksHttpServer.url = "";
          opts.updateNetworkWebhooksHttpServer.sharedSecret = "";

          instance.updateNetworkWebhooksHttpServer(networkId, httpServerId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessAlternateManagementInterface', function() {
        it('should call updateNetworkWirelessAlternateManagementInterface successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessAlternateManagementInterface call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkWirelessAlternateManagementInterface = new MerakiDashboardApi.UpdateNetworkWirelessAlternateManagementInterface();
          opts.updateNetworkWirelessAlternateManagementInterface.enabled = false;
          opts.updateNetworkWirelessAlternateManagementInterface.vlanId = 0;
          opts.updateNetworkWirelessAlternateManagementInterface.protocols = ["radius"]"radius";
          opts.updateNetworkWirelessAlternateManagementInterface.accessPoints = [new MerakiDashboardApi.NetworksnetworkIdwirelessalternateManagementInterfaceAccessPoints()];
          opts.updateNetworkWirelessAlternateManagementInterface.accessPoints[0].serial = "";
          opts.updateNetworkWirelessAlternateManagementInterface.accessPoints[0].alternateManagementIp = "";
          opts.updateNetworkWirelessAlternateManagementInterface.accessPoints[0].subnetMask = "";
          opts.updateNetworkWirelessAlternateManagementInterface.accessPoints[0].gateway = "";
          opts.updateNetworkWirelessAlternateManagementInterface.accessPoints[0].dns1 = "";
          opts.updateNetworkWirelessAlternateManagementInterface.accessPoints[0].dns2 = "";

          instance.updateNetworkWirelessAlternateManagementInterface(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessBluetoothSettings', function() {
        it('should call updateNetworkWirelessBluetoothSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessBluetoothSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkWirelessBluetoothSettings = new MerakiDashboardApi.UpdateNetworkWirelessBluetoothSettings();
          opts.updateNetworkWirelessBluetoothSettings.scanningEnabled = false;
          opts.updateNetworkWirelessBluetoothSettings.advertisingEnabled = false;
          opts.updateNetworkWirelessBluetoothSettings.uuid = "";
          opts.updateNetworkWirelessBluetoothSettings.majorMinorAssignmentMode = "Unique";
          opts.updateNetworkWirelessBluetoothSettings.major = 0;
          opts.updateNetworkWirelessBluetoothSettings.minor = 0;

          instance.updateNetworkWirelessBluetoothSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessRfProfile', function() {
        it('should call updateNetworkWirelessRfProfile successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessRfProfile call and complete the assertions
          /*
          var networkId = "networkId_example";
          var rfProfileId = "rfProfileId_example";
          var opts = {};
          opts.updateNetworkWirelessRfProfile = new MerakiDashboardApi.UpdateNetworkWirelessRfProfile();
          opts.updateNetworkWirelessRfProfile.name = "";
          opts.updateNetworkWirelessRfProfile.clientBalancingEnabled = false;
          opts.updateNetworkWirelessRfProfile.minBitrateType = "band";
          opts.updateNetworkWirelessRfProfile.bandSelectionType = "ssid";
          opts.updateNetworkWirelessRfProfile.apBandSettings = new MerakiDashboardApi.NetworksnetworkIdwirelessrfProfilesrfProfileIdApBandSettings();
          opts.updateNetworkWirelessRfProfile.apBandSettings.bandOperationMode = "dual";
          opts.updateNetworkWirelessRfProfile.apBandSettings.bandSteeringEnabled = false;
          opts.updateNetworkWirelessRfProfile.twoFourGhzSettings = new MerakiDashboardApi.NetworksnetworkIdwirelessrfProfilesrfProfileIdTwoFourGhzSettings();
          opts.updateNetworkWirelessRfProfile.twoFourGhzSettings.maxPower = 0;
          opts.updateNetworkWirelessRfProfile.twoFourGhzSettings.minPower = 0;
          opts.updateNetworkWirelessRfProfile.twoFourGhzSettings.minBitrate = 0.0;
          opts.updateNetworkWirelessRfProfile.twoFourGhzSettings.validAutoChannels = [0];
          opts.updateNetworkWirelessRfProfile.twoFourGhzSettings.axEnabled = false;
          opts.updateNetworkWirelessRfProfile.twoFourGhzSettings.rxsop = 0;
          opts.updateNetworkWirelessRfProfile.fiveGhzSettings = new MerakiDashboardApi.NetworksnetworkIdwirelessrfProfilesrfProfileIdFiveGhzSettings();
          opts.updateNetworkWirelessRfProfile.fiveGhzSettings.maxPower = 0;
          opts.updateNetworkWirelessRfProfile.fiveGhzSettings.minPower = 0;
          opts.updateNetworkWirelessRfProfile.fiveGhzSettings.minBitrate = 0;
          opts.updateNetworkWirelessRfProfile.fiveGhzSettings.validAutoChannels = [0];
          opts.updateNetworkWirelessRfProfile.fiveGhzSettings.channelWidth = "";
          opts.updateNetworkWirelessRfProfile.fiveGhzSettings.rxsop = 0;

          instance.updateNetworkWirelessRfProfile(networkId, rfProfileId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSettings', function() {
        it('should call updateNetworkWirelessSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkWirelessSettings = new MerakiDashboardApi.UpdateNetworkWirelessSettings();
          opts.updateNetworkWirelessSettings.meshingEnabled = false;
          opts.updateNetworkWirelessSettings.ipv6BridgeEnabled = false;
          opts.updateNetworkWirelessSettings.locationAnalyticsEnabled = false;
          opts.updateNetworkWirelessSettings.upgradeStrategy = "minimizeUpgradeTime";
          opts.updateNetworkWirelessSettings.ledLightsOn = false;

          instance.updateNetworkWirelessSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsid', function() {
        it('should call updateNetworkWirelessSsid successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsid call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var opts = {};
          opts.updateNetworkWirelessSsid = new MerakiDashboardApi.UpdateNetworkWirelessSsid();
          opts.updateNetworkWirelessSsid.name = "";
          opts.updateNetworkWirelessSsid.enabled = false;
          opts.updateNetworkWirelessSsid.authMode = "open";
          opts.updateNetworkWirelessSsid.enterpriseAdminAccess = "access disabled";
          opts.updateNetworkWirelessSsid.encryptionMode = "wep";
          opts.updateNetworkWirelessSsid.psk = "";
          opts.updateNetworkWirelessSsid.wpaEncryptionMode = "WPA1 only";
          opts.updateNetworkWirelessSsid.splashPage = "None";
          opts.updateNetworkWirelessSsid.radiusServers = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumberRadiusServers()];
          opts.updateNetworkWirelessSsid.radiusServers[0].host = "";
          opts.updateNetworkWirelessSsid.radiusServers[0].port = 0;
          opts.updateNetworkWirelessSsid.radiusServers[0].secret = "";
          opts.updateNetworkWirelessSsid.radiusProxyEnabled = false;
          opts.updateNetworkWirelessSsid.radiusCoaEnabled = false;
          opts.updateNetworkWirelessSsid.radiusFailoverPolicy = "Deny access";
          opts.updateNetworkWirelessSsid.radiusLoadBalancingPolicy = "Strict priority order";
          opts.updateNetworkWirelessSsid.radiusAccountingEnabled = false;
          opts.updateNetworkWirelessSsid.radiusAccountingServers = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumberRadiusAccountingServers()];
          opts.updateNetworkWirelessSsid.radiusAccountingServers[0].host = "";
          opts.updateNetworkWirelessSsid.radiusAccountingServers[0].port = 0;
          opts.updateNetworkWirelessSsid.radiusAccountingServers[0].secret = "";
          opts.updateNetworkWirelessSsid.radiusAttributeForGroupPolicies = "Filter-Id";
          opts.updateNetworkWirelessSsid.ipAssignmentMode = "";
          opts.updateNetworkWirelessSsid.useVlanTagging = false;
          opts.updateNetworkWirelessSsid.concentratorNetworkId = "";
          opts.updateNetworkWirelessSsid.vlanId = 0;
          opts.updateNetworkWirelessSsid.defaultVlanId = 0;
          opts.updateNetworkWirelessSsid.apTagsAndVlanIds = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumberApTagsAndVlanIds()];
          opts.updateNetworkWirelessSsid.apTagsAndVlanIds[0].tags = [""];
          opts.updateNetworkWirelessSsid.apTagsAndVlanIds[0].vlanId = 0;
          opts.updateNetworkWirelessSsid.walledGardenEnabled = false;
          opts.updateNetworkWirelessSsid.walledGardenRanges = [""];
          opts.updateNetworkWirelessSsid.radiusOverride = false;
          opts.updateNetworkWirelessSsid.radiusGuestVlanEnabled = false;
          opts.updateNetworkWirelessSsid.radiusGuestVlanId = 0;
          opts.updateNetworkWirelessSsid.minBitrate = 0.0;
          opts.updateNetworkWirelessSsid.bandSelection = "";
          opts.updateNetworkWirelessSsid.perClientBandwidthLimitUp = 0;
          opts.updateNetworkWirelessSsid.perClientBandwidthLimitDown = 0;
          opts.updateNetworkWirelessSsid.perSsidBandwidthLimitUp = 0;
          opts.updateNetworkWirelessSsid.perSsidBandwidthLimitDown = 0;
          opts.updateNetworkWirelessSsid.lanIsolationEnabled = false;
          opts.updateNetworkWirelessSsid.visible = false;
          opts.updateNetworkWirelessSsid.availableOnAllAps = false;
          opts.updateNetworkWirelessSsid.availabilityTags = [""];
          opts.updateNetworkWirelessSsid.mandatoryDhcpEnabled = false;

          instance.updateNetworkWirelessSsid(networkId, _number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidFirewallL3FirewallRules', function() {
        it('should call updateNetworkWirelessSsidFirewallL3FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidFirewallL3FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var opts = {};
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules = new MerakiDashboardApi.UpdateNetworkWirelessSsidFirewallL3FirewallRules();
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumberfirewalll3FirewallRulesRules()];
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].comment = "";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].policy = "allow";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].protocol = "tcp";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].destPort = "";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.rules[0].destCidr = "";
          opts.updateNetworkWirelessSsidFirewallL3FirewallRules.allowLanAccess = false;

          instance.updateNetworkWirelessSsidFirewallL3FirewallRules(networkId, _number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidFirewallL7FirewallRules', function() {
        it('should call updateNetworkWirelessSsidFirewallL7FirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidFirewallL7FirewallRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var opts = {};
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules = new MerakiDashboardApi.UpdateNetworkWirelessSsidFirewallL7FirewallRules();
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules.rules = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumberfirewalll7FirewallRulesRules()];
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules.rules[0].policy = "deny";
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules.rules[0].type = "application";
          opts.updateNetworkWirelessSsidFirewallL7FirewallRules.rules[0].value = "";

          instance.updateNetworkWirelessSsidFirewallL7FirewallRules(networkId, _number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidIdentityPsk', function() {
        it('should call updateNetworkWirelessSsidIdentityPsk successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidIdentityPsk call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var identityPskId = "identityPskId_example";
          var opts = {};
          opts.updateNetworkWirelessSsidIdentityPsk = new MerakiDashboardApi.UpdateNetworkWirelessSsidIdentityPsk();
          opts.updateNetworkWirelessSsidIdentityPsk.name = "";
          opts.updateNetworkWirelessSsidIdentityPsk.passphrase = "";
          opts.updateNetworkWirelessSsidIdentityPsk.groupPolicyId = "";

          instance.updateNetworkWirelessSsidIdentityPsk(networkId, _number, identityPskId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidSplashSettings', function() {
        it('should call updateNetworkWirelessSsidSplashSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidSplashSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var opts = {};
          opts.updateNetworkWirelessSsidSplashSettings = new MerakiDashboardApi.UpdateNetworkWirelessSsidSplashSettings();
          opts.updateNetworkWirelessSsidSplashSettings.splashUrl = "";
          opts.updateNetworkWirelessSsidSplashSettings.useSplashUrl = false;

          instance.updateNetworkWirelessSsidSplashSettings(networkId, _number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidTrafficShapingRules', function() {
        it('should call updateNetworkWirelessSsidTrafficShapingRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidTrafficShapingRules call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var opts = {};
          opts.updateNetworkWirelessSsidTrafficShapingRules = new MerakiDashboardApi.UpdateNetworkWirelessSsidTrafficShapingRules();
          opts.updateNetworkWirelessSsidTrafficShapingRules.trafficShapingEnabled = false;
          opts.updateNetworkWirelessSsidTrafficShapingRules.defaultRulesEnabled = false;
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules = [new MerakiDashboardApi.NetworksnetworkIdwirelessssidsnumbertrafficShapingrulesRules()];
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].definitions = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesDefinitions()];
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].definitions[0].type = "application";
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].definitions[0].value = "";
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].perClientBandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimits();
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].perClientBandwidthLimits.settings = "";
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].perClientBandwidthLimits.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimitsBandwidthLimits();
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].perClientBandwidthLimits.bandwidthLimits.limitUp = 0;
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].perClientBandwidthLimits.bandwidthLimits.limitDown = 0;
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].dscpTagValue = 0;
          opts.updateNetworkWirelessSsidTrafficShapingRules.rules[0].pcpTagValue = 0;

          instance.updateNetworkWirelessSsidTrafficShapingRules(networkId, _number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganization', function() {
        it('should call updateOrganization successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganization call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.updateOrganization = new MerakiDashboardApi.UpdateOrganization();
          opts.updateOrganization.name = "";

          instance.updateOrganization(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationActionBatch', function() {
        it('should call updateOrganizationActionBatch successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationActionBatch call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var actionBatchId = "actionBatchId_example";
          var opts = {};
          opts.updateOrganizationActionBatch = new MerakiDashboardApi.UpdateOrganizationActionBatch();
          opts.updateOrganizationActionBatch.confirmed = false;
          opts.updateOrganizationActionBatch.synchronous = false;

          instance.updateOrganizationActionBatch(organizationId, actionBatchId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationAdmin', function() {
        it('should call updateOrganizationAdmin successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationAdmin call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var adminId = "adminId_example";
          var opts = {};
          opts.updateOrganizationAdmin = new MerakiDashboardApi.UpdateOrganizationAdmin();
          opts.updateOrganizationAdmin.name = "";
          opts.updateOrganizationAdmin.orgAccess = "full";
          opts.updateOrganizationAdmin.tags = [new MerakiDashboardApi.OrganizationsorganizationIdadminsTags()];
          opts.updateOrganizationAdmin.tags[0].tag = "";
          opts.updateOrganizationAdmin.tags[0].access = "full";
          opts.updateOrganizationAdmin.networks = [new MerakiDashboardApi.OrganizationsorganizationIdadminsNetworks()];
          opts.updateOrganizationAdmin.networks[0].id = "";
          opts.updateOrganizationAdmin.networks[0].access = "full";

          instance.updateOrganizationAdmin(organizationId, adminId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationApplianceSecurityIntrusion', function() {
        it('should call updateOrganizationApplianceSecurityIntrusion successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationApplianceSecurityIntrusion call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var updateOrganizationApplianceSecurityIntrusion = new MerakiDashboardApi.UpdateOrganizationApplianceSecurityIntrusion();
          updateOrganizationApplianceSecurityIntrusion.allowedRules = [new MerakiDashboardApi.OrganizationsorganizationIdappliancesecurityintrusionAllowedRules()];
          updateOrganizationApplianceSecurityIntrusion.allowedRules[0].ruleId = "";
          updateOrganizationApplianceSecurityIntrusion.allowedRules[0].message = "";

          instance.updateOrganizationApplianceSecurityIntrusion(organizationId, updateOrganizationApplianceSecurityIntrusion, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationApplianceVpnThirdPartyVPNPeers', function() {
        it('should call updateOrganizationApplianceVpnThirdPartyVPNPeers successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationApplianceVpnThirdPartyVPNPeers call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var updateOrganizationApplianceVpnThirdPartyVPNPeers = new MerakiDashboardApi.UpdateOrganizationApplianceVpnThirdPartyVPNPeers();
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers = [new MerakiDashboardApi.OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersPeers()];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].name = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].publicIp = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].remoteId = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].privateSubnets = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies = new MerakiDashboardApi.OrganizationsorganizationIdappliancevpnthirdPartyVPNPeersIpsecPolicies();
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikeCipherAlgo = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikeAuthAlgo = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikePrfAlgo = ["prfsha256"]"prfsha256";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikeDiffieHellmanGroup = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.ikeLifetime = 0;
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.childCipherAlgo = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.childAuthAlgo = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.childPfsGroup = [""];
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPolicies.childLifetime = 0;
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ipsecPoliciesPreset = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].secret = "";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].ikeVersion = "1";
          updateOrganizationApplianceVpnThirdPartyVPNPeers.peers[0].networkTags = [""];

          instance.updateOrganizationApplianceVpnThirdPartyVPNPeers(organizationId, updateOrganizationApplianceVpnThirdPartyVPNPeers, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationApplianceVpnVpnFirewallRules', function() {
        it('should call updateOrganizationApplianceVpnVpnFirewallRules successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationApplianceVpnVpnFirewallRules call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.updateOrganizationApplianceVpnVpnFirewallRules = new MerakiDashboardApi.UpdateOrganizationApplianceVpnVpnFirewallRules();
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules = [new MerakiDashboardApi.OrganizationsorganizationIdappliancevpnvpnFirewallRulesRules()];
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].comment = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].policy = "allow";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].protocol = "tcp";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].srcPort = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].srcCidr = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].destPort = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].destCidr = "";
          opts.updateOrganizationApplianceVpnVpnFirewallRules.rules[0].syslogEnabled = false;
          opts.updateOrganizationApplianceVpnVpnFirewallRules.syslogDefaultRule = false;

          instance.updateOrganizationApplianceVpnVpnFirewallRules(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationBrandingPoliciesPriorities', function() {
        it('should call updateOrganizationBrandingPoliciesPriorities successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationBrandingPoliciesPriorities call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var updateOrganizationBrandingPoliciesPriorities = new MerakiDashboardApi.UpdateOrganizationBrandingPoliciesPriorities();
          updateOrganizationBrandingPoliciesPriorities.brandingPolicyIds = [""];

          instance.updateOrganizationBrandingPoliciesPriorities(organizationId, updateOrganizationBrandingPoliciesPriorities, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationBrandingPolicy', function() {
        it('should call updateOrganizationBrandingPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationBrandingPolicy call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var brandingPolicyId = "brandingPolicyId_example";
          var opts = {};
          opts.updateOrganizationBrandingPolicy = new MerakiDashboardApi.UpdateOrganizationBrandingPolicy();
          opts.updateOrganizationBrandingPolicy.name = "";
          opts.updateOrganizationBrandingPolicy.enabled = false;
          opts.updateOrganizationBrandingPolicy.adminSettings = new MerakiDashboardApi.OrganizationsorganizationIdbrandingPoliciesAdminSettings();
          opts.updateOrganizationBrandingPolicy.adminSettings.appliesTo = "All organization admins";
          opts.updateOrganizationBrandingPolicy.adminSettings.values = [""];
          opts.updateOrganizationBrandingPolicy.helpSettings = new MerakiDashboardApi.OrganizationsorganizationIdbrandingPoliciesbrandingPolicyIdHelpSettings();
          opts.updateOrganizationBrandingPolicy.helpSettings.helpTab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.getHelpSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.communitySubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.casesSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.dataProtectionRequestsSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.getHelpSubtabKnowledgeBaseSearch = "";
          opts.updateOrganizationBrandingPolicy.helpSettings.universalSearchKnowledgeBaseSearch = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.ciscoMerakiProductDocumentation = "";
          opts.updateOrganizationBrandingPolicy.helpSettings.supportContactInfo = "";
          opts.updateOrganizationBrandingPolicy.helpSettings.newFeaturesSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.firewallInfoSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.apiDocsSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.hardwareReplacementsSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.smForums = "default or inherit";

          instance.updateOrganizationBrandingPolicy(organizationId, brandingPolicyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationConfigTemplate', function() {
        it('should call updateOrganizationConfigTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationConfigTemplate call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var opts = {};
          opts.updateOrganizationConfigTemplate = new MerakiDashboardApi.UpdateOrganizationConfigTemplate();
          opts.updateOrganizationConfigTemplate.name = "";
          opts.updateOrganizationConfigTemplate.timeZone = "";

          instance.updateOrganizationConfigTemplate(organizationId, configTemplateId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationConfigTemplateSwitchProfilePort', function() {
        it('should call updateOrganizationConfigTemplateSwitchProfilePort successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationConfigTemplateSwitchProfilePort call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var profileId = "profileId_example";
          var portId = "portId_example";
          var opts = {};
          opts.updateOrganizationConfigTemplateSwitchProfilePort = new MerakiDashboardApi.UpdateOrganizationConfigTemplateSwitchProfilePort();
          opts.updateOrganizationConfigTemplateSwitchProfilePort.name = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.tags = [""];
          opts.updateOrganizationConfigTemplateSwitchProfilePort.enabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.type = "trunk";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.vlan = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.voiceVlan = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.allowedVlans = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.poeEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.isolationEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.rstpEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stpGuard = "disabled";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.linkNegotiation = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.portScheduleId = "";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.udld = "Alert only";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.accessPolicyType = "Open";
          opts.updateOrganizationConfigTemplateSwitchProfilePort.accessPolicyNumber = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.macAllowList = [""];
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stickyMacAllowList = [""];
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stickyMacAllowListLimit = 0;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.stormControlEnabled = false;
          opts.updateOrganizationConfigTemplateSwitchProfilePort.flexibleStackingEnabled = false;

          instance.updateOrganizationConfigTemplateSwitchProfilePort(organizationId, configTemplateId, profileId, portId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationInsightMonitoredMediaServer', function() {
        it('should call updateOrganizationInsightMonitoredMediaServer successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationInsightMonitoredMediaServer call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var monitoredMediaServerId = "monitoredMediaServerId_example";
          var opts = {};
          opts.updateOrganizationInsightMonitoredMediaServer = new MerakiDashboardApi.UpdateOrganizationInsightMonitoredMediaServer();
          opts.updateOrganizationInsightMonitoredMediaServer.name = "";
          opts.updateOrganizationInsightMonitoredMediaServer.address = "";

          instance.updateOrganizationInsightMonitoredMediaServer(organizationId, monitoredMediaServerId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationLicense', function() {
        it('should call updateOrganizationLicense successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationLicense call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var licenseId = "licenseId_example";
          var opts = {};
          opts.updateOrganizationLicense = new MerakiDashboardApi.UpdateOrganizationLicense();
          opts.updateOrganizationLicense.deviceSerial = "";

          instance.updateOrganizationLicense(organizationId, licenseId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationSaml', function() {
        it('should call updateOrganizationSaml successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationSaml call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.updateOrganizationSaml = new MerakiDashboardApi.UpdateOrganizationSaml();
          opts.updateOrganizationSaml.enabled = false;

          instance.updateOrganizationSaml(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationSamlIdp', function() {
        it('should call updateOrganizationSamlIdp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationSamlIdp call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var idpId = "idpId_example";
          var opts = {};
          opts.updateOrganizationSamlIdp = new MerakiDashboardApi.UpdateOrganizationSamlIdp();
          opts.updateOrganizationSamlIdp.x509certSha1Fingerprint = "";
          opts.updateOrganizationSamlIdp.sloLogoutUrl = "";

          instance.updateOrganizationSamlIdp(organizationId, idpId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationSamlRole', function() {
        it('should call updateOrganizationSamlRole successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationSamlRole call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var samlRoleId = "samlRoleId_example";
          var opts = {};
          opts.updateOrganizationSamlRole = new MerakiDashboardApi.UpdateOrganizationSamlRole();
          opts.updateOrganizationSamlRole.role = "";
          opts.updateOrganizationSamlRole.orgAccess = "none";
          opts.updateOrganizationSamlRole.tags = [new MerakiDashboardApi.OrganizationsorganizationIdsamlRolesTags()];
          opts.updateOrganizationSamlRole.tags[0].tag = "";
          opts.updateOrganizationSamlRole.tags[0].access = "full";
          opts.updateOrganizationSamlRole.networks = [new MerakiDashboardApi.OrganizationsorganizationIdsamlRolesNetworks()];
          opts.updateOrganizationSamlRole.networks[0].id = "";
          opts.updateOrganizationSamlRole.networks[0].access = "full";

          instance.updateOrganizationSamlRole(organizationId, samlRoleId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationSnmp', function() {
        it('should call updateOrganizationSnmp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationSnmp call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.updateOrganizationSnmp = new MerakiDashboardApi.UpdateOrganizationSnmp();
          opts.updateOrganizationSnmp.v2cEnabled = false;
          opts.updateOrganizationSnmp.v3Enabled = false;
          opts.updateOrganizationSnmp.v3AuthMode = "MD5";
          opts.updateOrganizationSnmp.v3AuthPass = "";
          opts.updateOrganizationSnmp.v3PrivMode = "DES";
          opts.updateOrganizationSnmp.v3PrivPass = "";
          opts.updateOrganizationSnmp.peerIps = [""];

          instance.updateOrganizationSnmp(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('wipeNetworkSmDevices', function() {
        it('should call wipeNetworkSmDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for wipeNetworkSmDevices call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.wipeNetworkSmDevices = new MerakiDashboardApi.WipeNetworkSmDevices();
          opts.wipeNetworkSmDevices.wifiMac = "";
          opts.wipeNetworkSmDevices.id = "";
          opts.wipeNetworkSmDevices.serial = "";
          opts.wipeNetworkSmDevices.pin = 0;

          instance.wipeNetworkSmDevices(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
