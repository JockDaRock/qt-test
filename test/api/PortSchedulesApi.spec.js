/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.PortSchedulesApi();
  });

  describe('(package)', function() {
    describe('PortSchedulesApi', function() {
      describe('createNetworkSwitchPortSchedule', function() {
        it('should call createNetworkSwitchPortSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkSwitchPortSchedule call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkSwitchPortSchedule = new MerakiDashboardApi.CreateNetworkSwitchPortSchedule();
          createNetworkSwitchPortSchedule.name = "";
          createNetworkSwitchPortSchedule.portSchedule = new MerakiDashboardApi.NetworksnetworkIdswitchportSchedulesPortSchedule();
          createNetworkSwitchPortSchedule.portSchedule.monday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingMonday();
          createNetworkSwitchPortSchedule.portSchedule.monday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.monday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.monday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.tuesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingTuesday();
          createNetworkSwitchPortSchedule.portSchedule.tuesday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.tuesday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.tuesday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.wednesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingWednesday();
          createNetworkSwitchPortSchedule.portSchedule.wednesday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.wednesday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.wednesday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.thursday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingThursday();
          createNetworkSwitchPortSchedule.portSchedule.thursday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.thursday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.thursday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.friday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingFriday();
          createNetworkSwitchPortSchedule.portSchedule.friday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.friday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.friday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.saturday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSaturday();
          createNetworkSwitchPortSchedule.portSchedule.saturday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.saturday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.saturday.to = "";
          createNetworkSwitchPortSchedule.portSchedule.sunday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSunday();
          createNetworkSwitchPortSchedule.portSchedule.sunday.active = false;
          createNetworkSwitchPortSchedule.portSchedule.sunday.from = "";
          createNetworkSwitchPortSchedule.portSchedule.sunday.to = "";

          instance.createNetworkSwitchPortSchedule(networkId, createNetworkSwitchPortSchedule, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkSwitchPortSchedule', function() {
        it('should call deleteNetworkSwitchPortSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkSwitchPortSchedule call
          /*
          var networkId = "networkId_example";
          var portScheduleId = "portScheduleId_example";

          instance.deleteNetworkSwitchPortSchedule(networkId, portScheduleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchPortSchedules', function() {
        it('should call getNetworkSwitchPortSchedules successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchPortSchedules call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchPortSchedules(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchPortSchedule', function() {
        it('should call updateNetworkSwitchPortSchedule successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchPortSchedule call and complete the assertions
          /*
          var networkId = "networkId_example";
          var portScheduleId = "portScheduleId_example";
          var opts = {};
          opts.updateNetworkSwitchPortSchedule = new MerakiDashboardApi.UpdateNetworkSwitchPortSchedule();
          opts.updateNetworkSwitchPortSchedule.name = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule = new MerakiDashboardApi.NetworksnetworkIdswitchportSchedulesPortSchedule();
          opts.updateNetworkSwitchPortSchedule.portSchedule.monday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingMonday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.monday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.monday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.monday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.tuesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingTuesday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.tuesday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.tuesday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.tuesday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.wednesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingWednesday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.wednesday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.wednesday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.wednesday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.thursday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingThursday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.thursday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.thursday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.thursday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.friday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingFriday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.friday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.friday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.friday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.saturday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSaturday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.saturday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.saturday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.saturday.to = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.sunday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSunday();
          opts.updateNetworkSwitchPortSchedule.portSchedule.sunday.active = false;
          opts.updateNetworkSwitchPortSchedule.portSchedule.sunday.from = "";
          opts.updateNetworkSwitchPortSchedule.portSchedule.sunday.to = "";

          instance.updateNetworkSwitchPortSchedule(networkId, portScheduleId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
