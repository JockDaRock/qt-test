/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.NetworksApi();
  });

  describe('(package)', function() {
    describe('NetworksApi', function() {
      describe('bindNetwork', function() {
        it('should call bindNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for bindNetwork call and complete the assertions
          /*
          var networkId = "networkId_example";
          var bindNetwork = new MerakiDashboardApi.BindNetwork();
          bindNetwork.configTemplateId = "";
          bindNetwork.autoBind = false;

          instance.bindNetwork(networkId, bindNetwork, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('claimNetworkDevices', function() {
        it('should call claimNetworkDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for claimNetworkDevices call
          /*
          var networkId = "networkId_example";
          var claimNetworkDevices = new MerakiDashboardApi.ClaimNetworkDevices();
          claimNetworkDevices.serials = [""];

          instance.claimNetworkDevices(networkId, claimNetworkDevices, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('combineOrganizationNetworks', function() {
        it('should call combineOrganizationNetworks successfully', function(done) {
          // TODO: uncomment, update parameter values for combineOrganizationNetworks call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var combineOrganizationNetworks = new MerakiDashboardApi.CombineOrganizationNetworks();
          combineOrganizationNetworks.name = "";
          combineOrganizationNetworks.networkIds = [""];
          combineOrganizationNetworks.enrollmentString = "";

          instance.combineOrganizationNetworks(organizationId, combineOrganizationNetworks, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkFloorPlan', function() {
        it('should call createNetworkFloorPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkFloorPlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkFloorPlan = new MerakiDashboardApi.CreateNetworkFloorPlan();
          createNetworkFloorPlan.name = "";
          createNetworkFloorPlan.center = new MerakiDashboardApi.NetworksnetworkIdfloorPlansCenter();
          createNetworkFloorPlan.center.lat = 0.0;
          createNetworkFloorPlan.center.lng = 0.0;
          createNetworkFloorPlan.bottomLeftCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansBottomLeftCorner();
          createNetworkFloorPlan.bottomLeftCorner.lat = 0.0;
          createNetworkFloorPlan.bottomLeftCorner.lng = 0.0;
          createNetworkFloorPlan.bottomRightCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansBottomRightCorner();
          createNetworkFloorPlan.bottomRightCorner.lat = 0.0;
          createNetworkFloorPlan.bottomRightCorner.lng = 0.0;
          createNetworkFloorPlan.topLeftCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansTopLeftCorner();
          createNetworkFloorPlan.topLeftCorner.lat = 0.0;
          createNetworkFloorPlan.topLeftCorner.lng = 0.0;
          createNetworkFloorPlan.topRightCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansTopRightCorner();
          createNetworkFloorPlan.topRightCorner.lat = 0.0;
          createNetworkFloorPlan.topRightCorner.lng = 0.0;
          createNetworkFloorPlan.imageContents = ""undefined;

          instance.createNetworkFloorPlan(networkId, createNetworkFloorPlan, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkGroupPolicy', function() {
        it('should call createNetworkGroupPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkGroupPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkGroupPolicy = new MerakiDashboardApi.CreateNetworkGroupPolicy();
          createNetworkGroupPolicy.name = "";
          createNetworkGroupPolicy.scheduling = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesScheduling();
          createNetworkGroupPolicy.scheduling.enabled = false;
          createNetworkGroupPolicy.scheduling.monday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingMonday();
          createNetworkGroupPolicy.scheduling.monday.active = false;
          createNetworkGroupPolicy.scheduling.monday.from = "";
          createNetworkGroupPolicy.scheduling.monday.to = "";
          createNetworkGroupPolicy.scheduling.tuesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingTuesday();
          createNetworkGroupPolicy.scheduling.tuesday.active = false;
          createNetworkGroupPolicy.scheduling.tuesday.from = "";
          createNetworkGroupPolicy.scheduling.tuesday.to = "";
          createNetworkGroupPolicy.scheduling.wednesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingWednesday();
          createNetworkGroupPolicy.scheduling.wednesday.active = false;
          createNetworkGroupPolicy.scheduling.wednesday.from = "";
          createNetworkGroupPolicy.scheduling.wednesday.to = "";
          createNetworkGroupPolicy.scheduling.thursday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingThursday();
          createNetworkGroupPolicy.scheduling.thursday.active = false;
          createNetworkGroupPolicy.scheduling.thursday.from = "";
          createNetworkGroupPolicy.scheduling.thursday.to = "";
          createNetworkGroupPolicy.scheduling.friday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingFriday();
          createNetworkGroupPolicy.scheduling.friday.active = false;
          createNetworkGroupPolicy.scheduling.friday.from = "";
          createNetworkGroupPolicy.scheduling.friday.to = "";
          createNetworkGroupPolicy.scheduling.saturday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSaturday();
          createNetworkGroupPolicy.scheduling.saturday.active = false;
          createNetworkGroupPolicy.scheduling.saturday.from = "";
          createNetworkGroupPolicy.scheduling.saturday.to = "";
          createNetworkGroupPolicy.scheduling.sunday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSunday();
          createNetworkGroupPolicy.scheduling.sunday.active = false;
          createNetworkGroupPolicy.scheduling.sunday.from = "";
          createNetworkGroupPolicy.scheduling.sunday.to = "";
          createNetworkGroupPolicy.bandwidth = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBandwidth();
          createNetworkGroupPolicy.bandwidth.settings = "network default";
          createNetworkGroupPolicy.bandwidth.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBandwidthBandwidthLimits();
          createNetworkGroupPolicy.bandwidth.bandwidthLimits.limitUp = 0;
          createNetworkGroupPolicy.bandwidth.bandwidthLimits.limitDown = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShaping();
          createNetworkGroupPolicy.firewallAndTrafficShaping.settings = "network default";
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingTrafficShapingRules()];
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesDefinitions()];
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions[0].type = "application";
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions[0].value = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimits();
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.settings = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimitsBandwidthLimits();
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits.limitUp = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits.limitDown = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].dscpTagValue = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].pcpTagValue = 0;
          createNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].priority = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules()];
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].comment = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].policy = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].protocol = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].destPort = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].destCidr = "";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL7FirewallRules()];
          createNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].policy = "deny";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].type = "application";
          createNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].value = "";
          createNetworkGroupPolicy.contentFiltering = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFiltering();
          createNetworkGroupPolicy.contentFiltering.allowedUrlPatterns = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringAllowedUrlPatterns();
          createNetworkGroupPolicy.contentFiltering.allowedUrlPatterns.settings = "network default";
          createNetworkGroupPolicy.contentFiltering.allowedUrlPatterns.patterns = [""];
          createNetworkGroupPolicy.contentFiltering.blockedUrlPatterns = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringBlockedUrlPatterns();
          createNetworkGroupPolicy.contentFiltering.blockedUrlPatterns.settings = "network default";
          createNetworkGroupPolicy.contentFiltering.blockedUrlPatterns.patterns = [""];
          createNetworkGroupPolicy.contentFiltering.blockedUrlCategories = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringBlockedUrlCategories();
          createNetworkGroupPolicy.contentFiltering.blockedUrlCategories.settings = "network default";
          createNetworkGroupPolicy.contentFiltering.blockedUrlCategories.categories = [""];
          createNetworkGroupPolicy.splashAuthSettings = "network default";
          createNetworkGroupPolicy.vlanTagging = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesVlanTagging();
          createNetworkGroupPolicy.vlanTagging.settings = "network default";
          createNetworkGroupPolicy.vlanTagging.vlanId = "";
          createNetworkGroupPolicy.bonjourForwarding = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBonjourForwarding();
          createNetworkGroupPolicy.bonjourForwarding.settings = "network default";
          createNetworkGroupPolicy.bonjourForwarding.rules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBonjourForwardingRules()];
          createNetworkGroupPolicy.bonjourForwarding.rules[0].description = "";
          createNetworkGroupPolicy.bonjourForwarding.rules[0].vlanId = "";
          createNetworkGroupPolicy.bonjourForwarding.rules[0].services = ["All Services"]"All Services";

          instance.createNetworkGroupPolicy(networkId, createNetworkGroupPolicy, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkMerakiAuthUser', function() {
        it('should call createNetworkMerakiAuthUser successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkMerakiAuthUser call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkMerakiAuthUser = new MerakiDashboardApi.CreateNetworkMerakiAuthUser();
          createNetworkMerakiAuthUser.email = "";
          createNetworkMerakiAuthUser.name = "";
          createNetworkMerakiAuthUser.password = "";
          createNetworkMerakiAuthUser.accountType = "Guest";
          createNetworkMerakiAuthUser.emailPasswordToUser = false;
          createNetworkMerakiAuthUser.authorizations = [new MerakiDashboardApi.NetworksnetworkIdmerakiAuthUsersAuthorizations()];
          createNetworkMerakiAuthUser.authorizations[0].ssidNumber = 0;
          createNetworkMerakiAuthUser.authorizations[0].expiresAt = "";

          instance.createNetworkMerakiAuthUser(networkId, createNetworkMerakiAuthUser, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkMqttBroker', function() {
        it('should call createNetworkMqttBroker successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkMqttBroker call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkMqttBroker = new MerakiDashboardApi.CreateNetworkMqttBroker();
          createNetworkMqttBroker.name = "";
          createNetworkMqttBroker.host = "";
          createNetworkMqttBroker.port = 0;

          instance.createNetworkMqttBroker(networkId, createNetworkMqttBroker, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkPiiRequest', function() {
        it('should call createNetworkPiiRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkPiiRequest call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.createNetworkPiiRequest = new MerakiDashboardApi.CreateNetworkPiiRequest();
          opts.createNetworkPiiRequest.type = "delete";
          opts.createNetworkPiiRequest.datasets = [""];
          opts.createNetworkPiiRequest.username = "";
          opts.createNetworkPiiRequest.email = "";
          opts.createNetworkPiiRequest.mac = "";
          opts.createNetworkPiiRequest.smDeviceId = "";
          opts.createNetworkPiiRequest.smUserId = "";

          instance.createNetworkPiiRequest(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkWebhooksHttpServer', function() {
        it('should call createNetworkWebhooksHttpServer successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkWebhooksHttpServer call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkWebhooksHttpServer = new MerakiDashboardApi.CreateNetworkWebhooksHttpServer();
          createNetworkWebhooksHttpServer.name = "";
          createNetworkWebhooksHttpServer.url = "";
          createNetworkWebhooksHttpServer.sharedSecret = "";

          instance.createNetworkWebhooksHttpServer(networkId, createNetworkWebhooksHttpServer, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkWebhooksWebhookTest', function() {
        it('should call createNetworkWebhooksWebhookTest successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkWebhooksWebhookTest call and complete the assertions
          /*
          var networkId = "networkId_example";
          var createNetworkWebhooksWebhookTest = new MerakiDashboardApi.CreateNetworkWebhooksWebhookTest();
          createNetworkWebhooksWebhookTest.url = "";
          createNetworkWebhooksWebhookTest.sharedSecret = "";

          instance.createNetworkWebhooksWebhookTest(networkId, createNetworkWebhooksWebhookTest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationNetwork', function() {
        it('should call createOrganizationNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationNetwork call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationNetwork = new MerakiDashboardApi.CreateOrganizationNetwork();
          createOrganizationNetwork.name = "";
          createOrganizationNetwork.productTypes = ["wireless"]"wireless";
          createOrganizationNetwork.tags = [""];
          createOrganizationNetwork.timeZone = "";
          createOrganizationNetwork.copyFromNetworkId = "";

          instance.createOrganizationNetwork(organizationId, createOrganizationNetwork, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetwork', function() {
        it('should call deleteNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetwork call
          /*
          var networkId = "networkId_example";

          instance.deleteNetwork(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkFloorPlan', function() {
        it('should call deleteNetworkFloorPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkFloorPlan call
          /*
          var networkId = "networkId_example";
          var floorPlanId = "floorPlanId_example";

          instance.deleteNetworkFloorPlan(networkId, floorPlanId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkGroupPolicy', function() {
        it('should call deleteNetworkGroupPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkGroupPolicy call
          /*
          var networkId = "networkId_example";
          var groupPolicyId = "groupPolicyId_example";

          instance.deleteNetworkGroupPolicy(networkId, groupPolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkMerakiAuthUser', function() {
        it('should call deleteNetworkMerakiAuthUser successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkMerakiAuthUser call
          /*
          var networkId = "networkId_example";
          var merakiAuthUserId = "merakiAuthUserId_example";

          instance.deleteNetworkMerakiAuthUser(networkId, merakiAuthUserId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkMqttBroker', function() {
        it('should call deleteNetworkMqttBroker successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkMqttBroker call
          /*
          var networkId = "networkId_example";
          var mqttBrokerId = "mqttBrokerId_example";

          instance.deleteNetworkMqttBroker(networkId, mqttBrokerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkPiiRequest', function() {
        it('should call deleteNetworkPiiRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkPiiRequest call
          /*
          var networkId = "networkId_example";
          var requestId = "requestId_example";

          instance.deleteNetworkPiiRequest(networkId, requestId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkWebhooksHttpServer', function() {
        it('should call deleteNetworkWebhooksHttpServer successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkWebhooksHttpServer call
          /*
          var networkId = "networkId_example";
          var httpServerId = "httpServerId_example";

          instance.deleteNetworkWebhooksHttpServer(networkId, httpServerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetwork', function() {
        it('should call getNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetwork call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetwork(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkAlertsSettings', function() {
        it('should call getNetworkAlertsSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkAlertsSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkAlertsSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkBluetoothClient', function() {
        it('should call getNetworkBluetoothClient successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkBluetoothClient call and complete the assertions
          /*
          var networkId = "networkId_example";
          var bluetoothClientId = "bluetoothClientId_example";
          var opts = {};
          opts.includeConnectivityHistory = true;
          opts.connectivityHistoryTimespan = 56;

          instance.getNetworkBluetoothClient(networkId, bluetoothClientId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkBluetoothClients', function() {
        it('should call getNetworkBluetoothClients successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkBluetoothClients call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.includeConnectivityHistory = true;

          instance.getNetworkBluetoothClients(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkClient', function() {
        it('should call getNetworkClient successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkClient call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";

          instance.getNetworkClient(networkId, clientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkClientPolicy', function() {
        it('should call getNetworkClientPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkClientPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";

          instance.getNetworkClientPolicy(networkId, clientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkClientSplashAuthorizationStatus', function() {
        it('should call getNetworkClientSplashAuthorizationStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkClientSplashAuthorizationStatus call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";

          instance.getNetworkClientSplashAuthorizationStatus(networkId, clientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkClientTrafficHistory', function() {
        it('should call getNetworkClientTrafficHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkClientTrafficHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkClientTrafficHistory(networkId, clientId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkClientUsageHistory', function() {
        it('should call getNetworkClientUsageHistory successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkClientUsageHistory call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";

          instance.getNetworkClientUsageHistory(networkId, clientId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkClients', function() {
        it('should call getNetworkClients successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkClients call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkClients(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkDevices', function() {
        it('should call getNetworkDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkDevices call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkDevices(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkEvents', function() {
        it('should call getNetworkEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkEvents call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.productType = "productType_example";
          opts.includedEventTypes = ["includedEventTypes_example"];
          opts.excludedEventTypes = ["excludedEventTypes_example"];
          opts.deviceMac = "deviceMac_example";
          opts.deviceSerial = "deviceSerial_example";
          opts.deviceName = "deviceName_example";
          opts.clientIp = "clientIp_example";
          opts.clientMac = "clientMac_example";
          opts.clientName = "clientName_example";
          opts.smDeviceMac = "smDeviceMac_example";
          opts.smDeviceName = "smDeviceName_example";
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkEvents(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkEventsEventTypes', function() {
        it('should call getNetworkEventsEventTypes successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkEventsEventTypes call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkEventsEventTypes(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkFirmwareUpgrades', function() {
        it('should call getNetworkFirmwareUpgrades successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkFirmwareUpgrades call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkFirmwareUpgrades(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkFloorPlan', function() {
        it('should call getNetworkFloorPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkFloorPlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var floorPlanId = "floorPlanId_example";

          instance.getNetworkFloorPlan(networkId, floorPlanId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkFloorPlans', function() {
        it('should call getNetworkFloorPlans successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkFloorPlans call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkFloorPlans(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkGroupPolicies', function() {
        it('should call getNetworkGroupPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkGroupPolicies call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkGroupPolicies(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkGroupPolicy', function() {
        it('should call getNetworkGroupPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkGroupPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var groupPolicyId = "groupPolicyId_example";

          instance.getNetworkGroupPolicy(networkId, groupPolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkMerakiAuthUser', function() {
        it('should call getNetworkMerakiAuthUser successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkMerakiAuthUser call and complete the assertions
          /*
          var networkId = "networkId_example";
          var merakiAuthUserId = "merakiAuthUserId_example";

          instance.getNetworkMerakiAuthUser(networkId, merakiAuthUserId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkMerakiAuthUsers', function() {
        it('should call getNetworkMerakiAuthUsers successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkMerakiAuthUsers call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkMerakiAuthUsers(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkMqttBroker', function() {
        it('should call getNetworkMqttBroker successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkMqttBroker call and complete the assertions
          /*
          var networkId = "networkId_example";
          var mqttBrokerId = "mqttBrokerId_example";

          instance.getNetworkMqttBroker(networkId, mqttBrokerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkMqttBrokers', function() {
        it('should call getNetworkMqttBrokers successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkMqttBrokers call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkMqttBrokers(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkNetflow', function() {
        it('should call getNetworkNetflow successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkNetflow call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkNetflow(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkNetworkHealthChannelUtilization', function() {
        it('should call getNetworkNetworkHealthChannelUtilization successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkNetworkHealthChannelUtilization call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.resolution = 56;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getNetworkNetworkHealthChannelUtilization(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkPiiPiiKeys', function() {
        it('should call getNetworkPiiPiiKeys successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkPiiPiiKeys call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.username = "username_example";
          opts.email = "email_example";
          opts.mac = "mac_example";
          opts.serial = "serial_example";
          opts.imei = "imei_example";
          opts.bluetoothMac = "bluetoothMac_example";

          instance.getNetworkPiiPiiKeys(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkPiiRequest', function() {
        it('should call getNetworkPiiRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkPiiRequest call and complete the assertions
          /*
          var networkId = "networkId_example";
          var requestId = "requestId_example";

          instance.getNetworkPiiRequest(networkId, requestId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkPiiRequests', function() {
        it('should call getNetworkPiiRequests successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkPiiRequests call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkPiiRequests(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkPiiSmDevicesForKey', function() {
        it('should call getNetworkPiiSmDevicesForKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkPiiSmDevicesForKey call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.username = "username_example";
          opts.email = "email_example";
          opts.mac = "mac_example";
          opts.serial = "serial_example";
          opts.imei = "imei_example";
          opts.bluetoothMac = "bluetoothMac_example";

          instance.getNetworkPiiSmDevicesForKey(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkPiiSmOwnersForKey', function() {
        it('should call getNetworkPiiSmOwnersForKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkPiiSmOwnersForKey call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.username = "username_example";
          opts.email = "email_example";
          opts.mac = "mac_example";
          opts.serial = "serial_example";
          opts.imei = "imei_example";
          opts.bluetoothMac = "bluetoothMac_example";

          instance.getNetworkPiiSmOwnersForKey(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSettings', function() {
        it('should call getNetworkSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSnmp', function() {
        it('should call getNetworkSnmp successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSnmp call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSnmp(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSplashLoginAttempts', function() {
        it('should call getNetworkSplashLoginAttempts successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSplashLoginAttempts call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.ssidNumber = 56;
          opts.loginIdentifier = "loginIdentifier_example";
          opts.timespan = 56;

          instance.getNetworkSplashLoginAttempts(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSyslogServers', function() {
        it('should call getNetworkSyslogServers successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSyslogServers call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSyslogServers(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkTraffic', function() {
        it('should call getNetworkTraffic successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkTraffic call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.timespan = 3.4;
          opts.deviceType = "deviceType_example";

          instance.getNetworkTraffic(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkTrafficAnalysis', function() {
        it('should call getNetworkTrafficAnalysis successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkTrafficAnalysis call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkTrafficAnalysis(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkTrafficShapingApplicationCategories', function() {
        it('should call getNetworkTrafficShapingApplicationCategories successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkTrafficShapingApplicationCategories call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkTrafficShapingApplicationCategories(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkTrafficShapingDscpTaggingOptions', function() {
        it('should call getNetworkTrafficShapingDscpTaggingOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkTrafficShapingDscpTaggingOptions call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkTrafficShapingDscpTaggingOptions(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWebhooksHttpServer', function() {
        it('should call getNetworkWebhooksHttpServer successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWebhooksHttpServer call and complete the assertions
          /*
          var networkId = "networkId_example";
          var httpServerId = "httpServerId_example";

          instance.getNetworkWebhooksHttpServer(networkId, httpServerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWebhooksHttpServers', function() {
        it('should call getNetworkWebhooksHttpServers successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWebhooksHttpServers call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkWebhooksHttpServers(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWebhooksWebhookTest', function() {
        it('should call getNetworkWebhooksWebhookTest successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWebhooksWebhookTest call and complete the assertions
          /*
          var networkId = "networkId_example";
          var webhookTestId = "webhookTestId_example";

          instance.getNetworkWebhooksWebhookTest(networkId, webhookTestId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationNetworks', function() {
        it('should call getOrganizationNetworks successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationNetworks call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.configTemplateId = "configTemplateId_example";
          opts.tags = ["tags_example"];
          opts.tagsFilterType = "tagsFilterType_example";
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getOrganizationNetworks(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('provisionNetworkClients', function() {
        it('should call provisionNetworkClients successfully', function(done) {
          // TODO: uncomment, update parameter values for provisionNetworkClients call and complete the assertions
          /*
          var networkId = "networkId_example";
          var provisionNetworkClients = new MerakiDashboardApi.ProvisionNetworkClients();
          provisionNetworkClients.clients = [new MerakiDashboardApi.NetworksnetworkIdclientsprovisionClients()];
          provisionNetworkClients.clients[0].mac = "";
          provisionNetworkClients.clients[0].name = "";
          provisionNetworkClients.devicePolicy = "Group policy";
          provisionNetworkClients.groupPolicyId = "";
          provisionNetworkClients.policiesBySecurityAppliance = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySecurityAppliance();
          provisionNetworkClients.policiesBySecurityAppliance.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid();
          provisionNetworkClients.policiesBySsid._0 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._0.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._0.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._1 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._1.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._1.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._2 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._2.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._2.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._3 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._3.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._3.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._4 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._4.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._4.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._5 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._5.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._5.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._6 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._6.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._6.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._7 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._7.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._7.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._8 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._8.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._8.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._9 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._9.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._9.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._10 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._10.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._10.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._11 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._11.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._11.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._12 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._12.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._12.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._13 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._13.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._13.groupPolicyId = "";
          provisionNetworkClients.policiesBySsid._14 = new MerakiDashboardApi.NetworksnetworkIdclientsprovisionPoliciesBySsid0();
          provisionNetworkClients.policiesBySsid._14.devicePolicy = "Allowed";
          provisionNetworkClients.policiesBySsid._14.groupPolicyId = "";

          instance.provisionNetworkClients(networkId, provisionNetworkClients, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('removeNetworkDevices', function() {
        it('should call removeNetworkDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for removeNetworkDevices call
          /*
          var networkId = "networkId_example";
          var removeNetworkDevices = new MerakiDashboardApi.RemoveNetworkDevices();
          removeNetworkDevices.serial = "";

          instance.removeNetworkDevices(networkId, removeNetworkDevices, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('splitNetwork', function() {
        it('should call splitNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for splitNetwork call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.splitNetwork(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unbindNetwork', function() {
        it('should call unbindNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for unbindNetwork call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.unbindNetwork(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetwork', function() {
        it('should call updateNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetwork call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetwork = new MerakiDashboardApi.UpdateNetwork();
          opts.updateNetwork.name = "";
          opts.updateNetwork.timeZone = "";
          opts.updateNetwork.tags = [""];
          opts.updateNetwork.enrollmentString = "";

          instance.updateNetwork(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkAlertsSettings', function() {
        it('should call updateNetworkAlertsSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkAlertsSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkAlertsSettings = new MerakiDashboardApi.UpdateNetworkAlertsSettings();
          opts.updateNetworkAlertsSettings.defaultDestinations = new MerakiDashboardApi.NetworksnetworkIdalertssettingsDefaultDestinations();
          opts.updateNetworkAlertsSettings.defaultDestinations.emails = [""];
          opts.updateNetworkAlertsSettings.defaultDestinations.allAdmins = false;
          opts.updateNetworkAlertsSettings.defaultDestinations.snmp = false;
          opts.updateNetworkAlertsSettings.defaultDestinations.httpServerIds = [""];
          opts.updateNetworkAlertsSettings.alerts = [new MerakiDashboardApi.NetworksnetworkIdalertssettingsAlerts()];
          opts.updateNetworkAlertsSettings.alerts[0].type = "";
          opts.updateNetworkAlertsSettings.alerts[0].enabled = false;
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations = new MerakiDashboardApi.NetworksnetworkIdalertssettingsAlertDestinations();
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations.emails = [""];
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations.allAdmins = false;
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations.snmp = false;
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations.httpServerIds = [""];
          opts.updateNetworkAlertsSettings.alerts[0].filters = ;

          instance.updateNetworkAlertsSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkClientPolicy', function() {
        it('should call updateNetworkClientPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkClientPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";
          var updateNetworkClientPolicy = new MerakiDashboardApi.UpdateNetworkClientPolicy();
          updateNetworkClientPolicy.devicePolicy = "";
          updateNetworkClientPolicy.groupPolicyId = "";

          instance.updateNetworkClientPolicy(networkId, clientId, updateNetworkClientPolicy, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkClientSplashAuthorizationStatus', function() {
        it('should call updateNetworkClientSplashAuthorizationStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkClientSplashAuthorizationStatus call and complete the assertions
          /*
          var networkId = "networkId_example";
          var clientId = "clientId_example";
          var updateNetworkClientSplashAuthorizationStatus = new MerakiDashboardApi.UpdateNetworkClientSplashAuthorizationStatus();
          updateNetworkClientSplashAuthorizationStatus.ssids = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids();
          updateNetworkClientSplashAuthorizationStatus.ssids._0 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids0();
          updateNetworkClientSplashAuthorizationStatus.ssids._0.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._1 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids1();
          updateNetworkClientSplashAuthorizationStatus.ssids._1.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._2 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids2();
          updateNetworkClientSplashAuthorizationStatus.ssids._2.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._3 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids3();
          updateNetworkClientSplashAuthorizationStatus.ssids._3.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._4 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids4();
          updateNetworkClientSplashAuthorizationStatus.ssids._4.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._5 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids5();
          updateNetworkClientSplashAuthorizationStatus.ssids._5.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._6 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids6();
          updateNetworkClientSplashAuthorizationStatus.ssids._6.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._7 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids7();
          updateNetworkClientSplashAuthorizationStatus.ssids._7.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._8 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids8();
          updateNetworkClientSplashAuthorizationStatus.ssids._8.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._9 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids9();
          updateNetworkClientSplashAuthorizationStatus.ssids._9.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._10 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids10();
          updateNetworkClientSplashAuthorizationStatus.ssids._10.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._11 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids11();
          updateNetworkClientSplashAuthorizationStatus.ssids._11.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._12 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids12();
          updateNetworkClientSplashAuthorizationStatus.ssids._12.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._13 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids13();
          updateNetworkClientSplashAuthorizationStatus.ssids._13.isAuthorized = false;
          updateNetworkClientSplashAuthorizationStatus.ssids._14 = new MerakiDashboardApi.NetworksnetworkIdclientsclientIdsplashAuthorizationStatusSsids14();
          updateNetworkClientSplashAuthorizationStatus.ssids._14.isAuthorized = false;

          instance.updateNetworkClientSplashAuthorizationStatus(networkId, clientId, updateNetworkClientSplashAuthorizationStatus, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkFirmwareUpgrades', function() {
        it('should call updateNetworkFirmwareUpgrades successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkFirmwareUpgrades call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkFirmwareUpgrades = new MerakiDashboardApi.UpdateNetworkFirmwareUpgrades();
          opts.updateNetworkFirmwareUpgrades.upgradeWindow = new MerakiDashboardApi.NetworksnetworkIdfirmwareUpgradesUpgradeWindow();
          opts.updateNetworkFirmwareUpgrades.upgradeWindow.dayOfWeek = "sun";
          opts.updateNetworkFirmwareUpgrades.upgradeWindow.hourOfDay = "0:00";

          instance.updateNetworkFirmwareUpgrades(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkFloorPlan', function() {
        it('should call updateNetworkFloorPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkFloorPlan call and complete the assertions
          /*
          var networkId = "networkId_example";
          var floorPlanId = "floorPlanId_example";
          var opts = {};
          opts.updateNetworkFloorPlan = new MerakiDashboardApi.UpdateNetworkFloorPlan();
          opts.updateNetworkFloorPlan.name = "";
          opts.updateNetworkFloorPlan.center = new MerakiDashboardApi.NetworksnetworkIdfloorPlansfloorPlanIdCenter();
          opts.updateNetworkFloorPlan.center.lat = 0.0;
          opts.updateNetworkFloorPlan.center.lng = 0.0;
          opts.updateNetworkFloorPlan.bottomLeftCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansBottomLeftCorner();
          opts.updateNetworkFloorPlan.bottomLeftCorner.lat = 0.0;
          opts.updateNetworkFloorPlan.bottomLeftCorner.lng = 0.0;
          opts.updateNetworkFloorPlan.bottomRightCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansBottomRightCorner();
          opts.updateNetworkFloorPlan.bottomRightCorner.lat = 0.0;
          opts.updateNetworkFloorPlan.bottomRightCorner.lng = 0.0;
          opts.updateNetworkFloorPlan.topLeftCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansTopLeftCorner();
          opts.updateNetworkFloorPlan.topLeftCorner.lat = 0.0;
          opts.updateNetworkFloorPlan.topLeftCorner.lng = 0.0;
          opts.updateNetworkFloorPlan.topRightCorner = new MerakiDashboardApi.NetworksnetworkIdfloorPlansTopRightCorner();
          opts.updateNetworkFloorPlan.topRightCorner.lat = 0.0;
          opts.updateNetworkFloorPlan.topRightCorner.lng = 0.0;
          opts.updateNetworkFloorPlan.imageContents = ""undefined;

          instance.updateNetworkFloorPlan(networkId, floorPlanId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkGroupPolicy', function() {
        it('should call updateNetworkGroupPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkGroupPolicy call and complete the assertions
          /*
          var networkId = "networkId_example";
          var groupPolicyId = "groupPolicyId_example";
          var opts = {};
          opts.updateNetworkGroupPolicy = new MerakiDashboardApi.UpdateNetworkGroupPolicy();
          opts.updateNetworkGroupPolicy.name = "";
          opts.updateNetworkGroupPolicy.scheduling = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesScheduling();
          opts.updateNetworkGroupPolicy.scheduling.enabled = false;
          opts.updateNetworkGroupPolicy.scheduling.monday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingMonday();
          opts.updateNetworkGroupPolicy.scheduling.monday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.monday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.monday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.tuesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingTuesday();
          opts.updateNetworkGroupPolicy.scheduling.tuesday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.tuesday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.tuesday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.wednesday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingWednesday();
          opts.updateNetworkGroupPolicy.scheduling.wednesday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.wednesday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.wednesday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.thursday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingThursday();
          opts.updateNetworkGroupPolicy.scheduling.thursday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.thursday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.thursday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.friday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingFriday();
          opts.updateNetworkGroupPolicy.scheduling.friday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.friday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.friday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.saturday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSaturday();
          opts.updateNetworkGroupPolicy.scheduling.saturday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.saturday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.saturday.to = "";
          opts.updateNetworkGroupPolicy.scheduling.sunday = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesSchedulingSunday();
          opts.updateNetworkGroupPolicy.scheduling.sunday.active = false;
          opts.updateNetworkGroupPolicy.scheduling.sunday.from = "";
          opts.updateNetworkGroupPolicy.scheduling.sunday.to = "";
          opts.updateNetworkGroupPolicy.bandwidth = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBandwidth();
          opts.updateNetworkGroupPolicy.bandwidth.settings = "network default";
          opts.updateNetworkGroupPolicy.bandwidth.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBandwidthBandwidthLimits();
          opts.updateNetworkGroupPolicy.bandwidth.bandwidthLimits.limitUp = 0;
          opts.updateNetworkGroupPolicy.bandwidth.bandwidthLimits.limitDown = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShaping();
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.settings = "network default";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingTrafficShapingRules()];
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions = [new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesDefinitions()];
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions[0].type = "application";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].definitions[0].value = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimits();
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.settings = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits = new MerakiDashboardApi.NetworksnetworkIdappliancetrafficShapingrulesPerClientBandwidthLimitsBandwidthLimits();
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits.limitUp = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].perClientBandwidthLimits.bandwidthLimits.limitDown = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].dscpTagValue = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].pcpTagValue = 0;
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.trafficShapingRules[0].priority = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL3FirewallRules()];
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].comment = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].policy = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].protocol = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].destPort = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l3FirewallRules[0].destCidr = "";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesFirewallAndTrafficShapingL7FirewallRules()];
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].policy = "deny";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].type = "application";
          opts.updateNetworkGroupPolicy.firewallAndTrafficShaping.l7FirewallRules[0].value = "";
          opts.updateNetworkGroupPolicy.contentFiltering = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFiltering();
          opts.updateNetworkGroupPolicy.contentFiltering.allowedUrlPatterns = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringAllowedUrlPatterns();
          opts.updateNetworkGroupPolicy.contentFiltering.allowedUrlPatterns.settings = "network default";
          opts.updateNetworkGroupPolicy.contentFiltering.allowedUrlPatterns.patterns = [""];
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlPatterns = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringBlockedUrlPatterns();
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlPatterns.settings = "network default";
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlPatterns.patterns = [""];
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlCategories = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesContentFilteringBlockedUrlCategories();
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlCategories.settings = "network default";
          opts.updateNetworkGroupPolicy.contentFiltering.blockedUrlCategories.categories = [""];
          opts.updateNetworkGroupPolicy.splashAuthSettings = "network default";
          opts.updateNetworkGroupPolicy.vlanTagging = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesVlanTagging();
          opts.updateNetworkGroupPolicy.vlanTagging.settings = "network default";
          opts.updateNetworkGroupPolicy.vlanTagging.vlanId = "";
          opts.updateNetworkGroupPolicy.bonjourForwarding = new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBonjourForwarding();
          opts.updateNetworkGroupPolicy.bonjourForwarding.settings = "network default";
          opts.updateNetworkGroupPolicy.bonjourForwarding.rules = [new MerakiDashboardApi.NetworksnetworkIdgroupPoliciesBonjourForwardingRules()];
          opts.updateNetworkGroupPolicy.bonjourForwarding.rules[0].description = "";
          opts.updateNetworkGroupPolicy.bonjourForwarding.rules[0].vlanId = "";
          opts.updateNetworkGroupPolicy.bonjourForwarding.rules[0].services = ["All Services"]"All Services";

          instance.updateNetworkGroupPolicy(networkId, groupPolicyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkMerakiAuthUser', function() {
        it('should call updateNetworkMerakiAuthUser successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkMerakiAuthUser call and complete the assertions
          /*
          var networkId = "networkId_example";
          var merakiAuthUserId = "merakiAuthUserId_example";
          var opts = {};
          opts.updateNetworkMerakiAuthUser = new MerakiDashboardApi.UpdateNetworkMerakiAuthUser();
          opts.updateNetworkMerakiAuthUser.name = "";
          opts.updateNetworkMerakiAuthUser.password = "";
          opts.updateNetworkMerakiAuthUser.emailPasswordToUser = false;
          opts.updateNetworkMerakiAuthUser.authorizations = [new MerakiDashboardApi.NetworksnetworkIdmerakiAuthUsersmerakiAuthUserIdAuthorizations()];
          opts.updateNetworkMerakiAuthUser.authorizations[0].ssidNumber = 0;
          opts.updateNetworkMerakiAuthUser.authorizations[0].expiresAt = "";

          instance.updateNetworkMerakiAuthUser(networkId, merakiAuthUserId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkMqttBroker', function() {
        it('should call updateNetworkMqttBroker successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkMqttBroker call and complete the assertions
          /*
          var networkId = "networkId_example";
          var mqttBrokerId = "mqttBrokerId_example";
          var opts = {};
          opts.updateNetworkMqttBroker = new MerakiDashboardApi.UpdateNetworkMqttBroker();
          opts.updateNetworkMqttBroker.name = "";
          opts.updateNetworkMqttBroker.host = "";
          opts.updateNetworkMqttBroker.port = 0;

          instance.updateNetworkMqttBroker(networkId, mqttBrokerId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkNetflow', function() {
        it('should call updateNetworkNetflow successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkNetflow call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkNetflow = new MerakiDashboardApi.UpdateNetworkNetflow();
          opts.updateNetworkNetflow.reportingEnabled = false;
          opts.updateNetworkNetflow.collectorIp = "";
          opts.updateNetworkNetflow.collectorPort = 0;

          instance.updateNetworkNetflow(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSettings', function() {
        it('should call updateNetworkSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSettings = new MerakiDashboardApi.UpdateNetworkSettings();
          opts.updateNetworkSettings.localStatusPageEnabled = false;
          opts.updateNetworkSettings.remoteStatusPageEnabled = false;

          instance.updateNetworkSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSnmp', function() {
        it('should call updateNetworkSnmp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSnmp call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSnmp = new MerakiDashboardApi.UpdateNetworkSnmp();
          opts.updateNetworkSnmp.access = "none";
          opts.updateNetworkSnmp.communityString = "";
          opts.updateNetworkSnmp.users = [new MerakiDashboardApi.NetworksnetworkIdsnmpUsers()];
          opts.updateNetworkSnmp.users[0].username = "";
          opts.updateNetworkSnmp.users[0].passphrase = "";

          instance.updateNetworkSnmp(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSyslogServers', function() {
        it('should call updateNetworkSyslogServers successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSyslogServers call and complete the assertions
          /*
          var networkId = "networkId_example";
          var updateNetworkSyslogServers = new MerakiDashboardApi.UpdateNetworkSyslogServers();
          updateNetworkSyslogServers.servers = [new MerakiDashboardApi.NetworksnetworkIdsyslogServersServers()];
          updateNetworkSyslogServers.servers[0].host = "";
          updateNetworkSyslogServers.servers[0].port = 0;
          updateNetworkSyslogServers.servers[0].roles = [""];

          instance.updateNetworkSyslogServers(networkId, updateNetworkSyslogServers, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkTrafficAnalysis', function() {
        it('should call updateNetworkTrafficAnalysis successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkTrafficAnalysis call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkTrafficAnalysis = new MerakiDashboardApi.UpdateNetworkTrafficAnalysis();
          opts.updateNetworkTrafficAnalysis.mode = "disabled";
          opts.updateNetworkTrafficAnalysis.customPieChartItems = [new MerakiDashboardApi.NetworksnetworkIdtrafficAnalysisCustomPieChartItems()];
          opts.updateNetworkTrafficAnalysis.customPieChartItems[0].name = "";
          opts.updateNetworkTrafficAnalysis.customPieChartItems[0].type = "host";
          opts.updateNetworkTrafficAnalysis.customPieChartItems[0].value = "";

          instance.updateNetworkTrafficAnalysis(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWebhooksHttpServer', function() {
        it('should call updateNetworkWebhooksHttpServer successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWebhooksHttpServer call and complete the assertions
          /*
          var networkId = "networkId_example";
          var httpServerId = "httpServerId_example";
          var opts = {};
          opts.updateNetworkWebhooksHttpServer = new MerakiDashboardApi.UpdateNetworkWebhooksHttpServer();
          opts.updateNetworkWebhooksHttpServer.name = "";
          opts.updateNetworkWebhooksHttpServer.url = "";
          opts.updateNetworkWebhooksHttpServer.sharedSecret = "";

          instance.updateNetworkWebhooksHttpServer(networkId, httpServerId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
