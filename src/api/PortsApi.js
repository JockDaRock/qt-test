/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CycleDeviceSwitchPorts', 'model/UpdateDeviceSwitchPort', 'model/UpdateNetworkAppliancePort', 'model/UpdateOrganizationConfigTemplateSwitchProfilePort'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CycleDeviceSwitchPorts'), require('../model/UpdateDeviceSwitchPort'), require('../model/UpdateNetworkAppliancePort'), require('../model/UpdateOrganizationConfigTemplateSwitchProfilePort'));
  } else {
    // Browser globals (root is window)
    if (!root.MerakiDashboardApi) {
      root.MerakiDashboardApi = {};
    }
    root.MerakiDashboardApi.PortsApi = factory(root.MerakiDashboardApi.ApiClient, root.MerakiDashboardApi.CycleDeviceSwitchPorts, root.MerakiDashboardApi.UpdateDeviceSwitchPort, root.MerakiDashboardApi.UpdateNetworkAppliancePort, root.MerakiDashboardApi.UpdateOrganizationConfigTemplateSwitchProfilePort);
  }
}(this, function(ApiClient, CycleDeviceSwitchPorts, UpdateDeviceSwitchPort, UpdateNetworkAppliancePort, UpdateOrganizationConfigTemplateSwitchProfilePort) {
  'use strict';

  /**
   * Ports service.
   * @module api/PortsApi
   * @version 1.1.0
   */

  /**
   * Constructs a new PortsApi. 
   * @alias module:api/PortsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cycleDeviceSwitchPorts operation.
     * @callback module:api/PortsApi~cycleDeviceSwitchPortsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cycle a set of switch ports
     * Cycle a set of switch ports
     * @param {String} serial 
     * @param {module:model/CycleDeviceSwitchPorts} cycleDeviceSwitchPorts 
     * @param {module:api/PortsApi~cycleDeviceSwitchPortsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.cycleDeviceSwitchPorts = function(serial, cycleDeviceSwitchPorts, callback) {
      var postBody = cycleDeviceSwitchPorts;

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling cycleDeviceSwitchPorts");
      }

      // verify the required parameter 'cycleDeviceSwitchPorts' is set
      if (cycleDeviceSwitchPorts === undefined || cycleDeviceSwitchPorts === null) {
        throw new Error("Missing the required parameter 'cycleDeviceSwitchPorts' when calling cycleDeviceSwitchPorts");
      }


      var pathParams = {
        'serial': serial
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/cycle', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchPort operation.
     * @callback module:api/PortsApi~getDeviceSwitchPortCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a switch port
     * Return a switch port
     * @param {String} serial 
     * @param {String} portId 
     * @param {module:api/PortsApi~getDeviceSwitchPortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getDeviceSwitchPort = function(serial, portId, callback) {
      var postBody = null;

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchPort");
      }

      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling getDeviceSwitchPort");
      }


      var pathParams = {
        'serial': serial,
        'portId': portId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/{portId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchPorts operation.
     * @callback module:api/PortsApi~getDeviceSwitchPortsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the switch ports for a switch
     * List the switch ports for a switch
     * @param {String} serial 
     * @param {module:api/PortsApi~getDeviceSwitchPortsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getDeviceSwitchPorts = function(serial, callback) {
      var postBody = null;

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchPorts");
      }


      var pathParams = {
        'serial': serial
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchPortsStatuses operation.
     * @callback module:api/PortsApi~getDeviceSwitchPortsStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the status for all the ports of a switch
     * Return the status for all the ports of a switch
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {String} opts.t0 The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     * @param {Number} opts.timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     * @param {module:api/PortsApi~getDeviceSwitchPortsStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getDeviceSwitchPortsStatuses = function(serial, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchPortsStatuses");
      }


      var pathParams = {
        'serial': serial
      };
      var queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/statuses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceSwitchPortsStatusesPackets operation.
     * @callback module:api/PortsApi~getDeviceSwitchPortsStatusesPacketsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the packet counters for all the ports of a switch
     * Return the packet counters for all the ports of a switch
     * @param {String} serial 
     * @param {Object} opts Optional parameters
     * @param {String} opts.t0 The beginning of the timespan for the data. The maximum lookback period is 1 day from today.
     * @param {Number} opts.timespan The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 1 day. The default is 1 day.
     * @param {module:api/PortsApi~getDeviceSwitchPortsStatusesPacketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getDeviceSwitchPortsStatusesPackets = function(serial, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling getDeviceSwitchPortsStatusesPackets");
      }


      var pathParams = {
        'serial': serial
      };
      var queryParams = {
        't0': opts['t0'],
        'timespan': opts['timespan'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/statuses/packets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAppliancePort operation.
     * @callback module:api/PortsApi~getNetworkAppliancePortCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return per-port VLAN settings for a single MX port.
     * Return per-port VLAN settings for a single MX port.
     * @param {String} networkId 
     * @param {String} portId 
     * @param {module:api/PortsApi~getNetworkAppliancePortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkAppliancePort = function(networkId, portId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAppliancePort");
      }

      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling getNetworkAppliancePort");
      }


      var pathParams = {
        'networkId': networkId,
        'portId': portId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ports/{portId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkAppliancePorts operation.
     * @callback module:api/PortsApi~getNetworkAppliancePortsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List per-port VLAN settings for all ports of a MX.
     * List per-port VLAN settings for all ports of a MX.
     * @param {String} networkId 
     * @param {module:api/PortsApi~getNetworkAppliancePortsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkAppliancePorts = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkAppliancePorts");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplateSwitchProfilePort operation.
     * @callback module:api/PortsApi~getOrganizationConfigTemplateSwitchProfilePortCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a switch profile port
     * Return a switch profile port
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {String} portId 
     * @param {module:api/PortsApi~getOrganizationConfigTemplateSwitchProfilePortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationConfigTemplateSwitchProfilePort = function(organizationId, configTemplateId, profileId, portId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePort");
      }

      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePort");
      }

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePort");
      }

      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling getOrganizationConfigTemplateSwitchProfilePort");
      }


      var pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId,
        'portId': portId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationConfigTemplateSwitchProfilePorts operation.
     * @callback module:api/PortsApi~getOrganizationConfigTemplateSwitchProfilePortsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all the ports of a switch profile
     * Return all the ports of a switch profile
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {module:api/PortsApi~getOrganizationConfigTemplateSwitchProfilePortsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationConfigTemplateSwitchProfilePorts = function(organizationId, configTemplateId, profileId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationConfigTemplateSwitchProfilePorts");
      }

      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling getOrganizationConfigTemplateSwitchProfilePorts");
      }

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling getOrganizationConfigTemplateSwitchProfilePorts");
      }


      var pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeviceSwitchPort operation.
     * @callback module:api/PortsApi~updateDeviceSwitchPortCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a switch port
     * Update a switch port
     * @param {String} serial 
     * @param {String} portId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateDeviceSwitchPort} opts.updateDeviceSwitchPort 
     * @param {module:api/PortsApi~updateDeviceSwitchPortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateDeviceSwitchPort = function(serial, portId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateDeviceSwitchPort'];

      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling updateDeviceSwitchPort");
      }

      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling updateDeviceSwitchPort");
      }


      var pathParams = {
        'serial': serial,
        'portId': portId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/devices/{serial}/switch/ports/{portId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkAppliancePort operation.
     * @callback module:api/PortsApi~updateNetworkAppliancePortCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the per-port VLAN settings for a single MX port.
     * Update the per-port VLAN settings for a single MX port.
     * @param {String} networkId 
     * @param {String} portId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkAppliancePort} opts.updateNetworkAppliancePort 
     * @param {module:api/PortsApi~updateNetworkAppliancePortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkAppliancePort = function(networkId, portId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkAppliancePort'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkAppliancePort");
      }

      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling updateNetworkAppliancePort");
      }


      var pathParams = {
        'networkId': networkId,
        'portId': portId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/ports/{portId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationConfigTemplateSwitchProfilePort operation.
     * @callback module:api/PortsApi~updateOrganizationConfigTemplateSwitchProfilePortCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a switch profile port
     * Update a switch profile port
     * @param {String} organizationId 
     * @param {String} configTemplateId 
     * @param {String} profileId 
     * @param {String} portId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationConfigTemplateSwitchProfilePort} opts.updateOrganizationConfigTemplateSwitchProfilePort 
     * @param {module:api/PortsApi~updateOrganizationConfigTemplateSwitchProfilePortCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOrganizationConfigTemplateSwitchProfilePort = function(organizationId, configTemplateId, profileId, portId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateOrganizationConfigTemplateSwitchProfilePort'];

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationConfigTemplateSwitchProfilePort");
      }

      // verify the required parameter 'configTemplateId' is set
      if (configTemplateId === undefined || configTemplateId === null) {
        throw new Error("Missing the required parameter 'configTemplateId' when calling updateOrganizationConfigTemplateSwitchProfilePort");
      }

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling updateOrganizationConfigTemplateSwitchProfilePort");
      }

      // verify the required parameter 'portId' is set
      if (portId === undefined || portId === null) {
        throw new Error("Missing the required parameter 'portId' when calling updateOrganizationConfigTemplateSwitchProfilePort");
      }


      var pathParams = {
        'organizationId': organizationId,
        'configTemplateId': configTemplateId,
        'profileId': profileId,
        'portId': portId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
