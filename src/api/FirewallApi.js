/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UpdateNetworkApplianceFirewallCellularFirewallRules', 'model/UpdateNetworkApplianceFirewallFirewalledService', 'model/UpdateNetworkApplianceFirewallInboundFirewallRules', 'model/UpdateNetworkApplianceFirewallL3FirewallRules', 'model/UpdateNetworkApplianceFirewallL7FirewallRules', 'model/UpdateNetworkApplianceFirewallOneToManyNatRules', 'model/UpdateNetworkApplianceFirewallOneToOneNatRules', 'model/UpdateNetworkApplianceFirewallPortForwardingRules', 'model/UpdateNetworkWirelessSsidFirewallL3FirewallRules', 'model/UpdateNetworkWirelessSsidFirewallL7FirewallRules'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/UpdateNetworkApplianceFirewallCellularFirewallRules'), require('../model/UpdateNetworkApplianceFirewallFirewalledService'), require('../model/UpdateNetworkApplianceFirewallInboundFirewallRules'), require('../model/UpdateNetworkApplianceFirewallL3FirewallRules'), require('../model/UpdateNetworkApplianceFirewallL7FirewallRules'), require('../model/UpdateNetworkApplianceFirewallOneToManyNatRules'), require('../model/UpdateNetworkApplianceFirewallOneToOneNatRules'), require('../model/UpdateNetworkApplianceFirewallPortForwardingRules'), require('../model/UpdateNetworkWirelessSsidFirewallL3FirewallRules'), require('../model/UpdateNetworkWirelessSsidFirewallL7FirewallRules'));
  } else {
    // Browser globals (root is window)
    if (!root.MerakiDashboardApi) {
      root.MerakiDashboardApi = {};
    }
    root.MerakiDashboardApi.FirewallApi = factory(root.MerakiDashboardApi.ApiClient, root.MerakiDashboardApi.UpdateNetworkApplianceFirewallCellularFirewallRules, root.MerakiDashboardApi.UpdateNetworkApplianceFirewallFirewalledService, root.MerakiDashboardApi.UpdateNetworkApplianceFirewallInboundFirewallRules, root.MerakiDashboardApi.UpdateNetworkApplianceFirewallL3FirewallRules, root.MerakiDashboardApi.UpdateNetworkApplianceFirewallL7FirewallRules, root.MerakiDashboardApi.UpdateNetworkApplianceFirewallOneToManyNatRules, root.MerakiDashboardApi.UpdateNetworkApplianceFirewallOneToOneNatRules, root.MerakiDashboardApi.UpdateNetworkApplianceFirewallPortForwardingRules, root.MerakiDashboardApi.UpdateNetworkWirelessSsidFirewallL3FirewallRules, root.MerakiDashboardApi.UpdateNetworkWirelessSsidFirewallL7FirewallRules);
  }
}(this, function(ApiClient, UpdateNetworkApplianceFirewallCellularFirewallRules, UpdateNetworkApplianceFirewallFirewalledService, UpdateNetworkApplianceFirewallInboundFirewallRules, UpdateNetworkApplianceFirewallL3FirewallRules, UpdateNetworkApplianceFirewallL7FirewallRules, UpdateNetworkApplianceFirewallOneToManyNatRules, UpdateNetworkApplianceFirewallOneToOneNatRules, UpdateNetworkApplianceFirewallPortForwardingRules, UpdateNetworkWirelessSsidFirewallL3FirewallRules, UpdateNetworkWirelessSsidFirewallL7FirewallRules) {
  'use strict';

  /**
   * Firewall service.
   * @module api/FirewallApi
   * @version 1.1.0
   */

  /**
   * Constructs a new FirewallApi. 
   * @alias module:api/FirewallApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallCellularFirewallRules operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallCellularFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the cellular firewall rules for an MX network
     * Return the cellular firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallCellularFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkApplianceFirewallCellularFirewallRules = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallCellularFirewallRules");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/cellularFirewallRules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallFirewalledService operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallFirewalledServiceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
     * Return the accessibility settings of the given service ('ICMP', 'web', or 'SNMP')
     * @param {String} networkId 
     * @param {String} service 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallFirewalledServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkApplianceFirewallFirewalledService = function(networkId, service, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallFirewalledService");
      }

      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling getNetworkApplianceFirewallFirewalledService");
      }


      var pathParams = {
        'networkId': networkId,
        'service': service
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/firewalledServices/{service}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallFirewalledServices operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallFirewalledServicesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the appliance services and their accessibility rules
     * List the appliance services and their accessibility rules
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallFirewalledServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkApplianceFirewallFirewalledServices = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallFirewalledServices");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/firewalledServices', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallInboundFirewallRules operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallInboundFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the inbound firewall rules for an MX network
     * Return the inbound firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallInboundFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkApplianceFirewallInboundFirewallRules = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallInboundFirewallRules");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/inboundFirewallRules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallL3FirewallRules operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallL3FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L3 firewall rules for an MX network
     * Return the L3 firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallL3FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkApplianceFirewallL3FirewallRules = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL3FirewallRules");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l3FirewallRules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallL7FirewallRules operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallL7FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the MX L7 firewall rules for an MX network
     * List the MX L7 firewall rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallL7FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkApplianceFirewallL7FirewallRules = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL7FirewallRules");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l7FirewallRules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallL7FirewallRulesApplicationCategories operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L7 firewall application categories and their associated applications for an MX network
     * Return the L7 firewall application categories and their associated applications for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallL7FirewallRulesApplicationCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkApplianceFirewallL7FirewallRulesApplicationCategories = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallL7FirewallRulesApplicationCategories");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l7FirewallRules/applicationCategories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallOneToManyNatRules operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallOneToManyNatRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the 1:Many NAT mapping rules for an MX network
     * Return the 1:Many NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallOneToManyNatRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkApplianceFirewallOneToManyNatRules = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallOneToManyNatRules");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToManyNatRules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallOneToOneNatRules operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallOneToOneNatRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the 1:1 NAT mapping rules for an MX network
     * Return the 1:1 NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallOneToOneNatRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkApplianceFirewallOneToOneNatRules = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallOneToOneNatRules");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToOneNatRules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkApplianceFirewallPortForwardingRules operation.
     * @callback module:api/FirewallApi~getNetworkApplianceFirewallPortForwardingRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the port forwarding rules for an MX network
     * Return the port forwarding rules for an MX network
     * @param {String} networkId 
     * @param {module:api/FirewallApi~getNetworkApplianceFirewallPortForwardingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkApplianceFirewallPortForwardingRules = function(networkId, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkApplianceFirewallPortForwardingRules");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/portForwardingRules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidFirewallL3FirewallRules operation.
     * @callback module:api/FirewallApi~getNetworkWirelessSsidFirewallL3FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L3 firewall rules for an SSID on an MR network
     * Return the L3 firewall rules for an SSID on an MR network
     * @param {String} networkId 
     * @param {String} _number 
     * @param {module:api/FirewallApi~getNetworkWirelessSsidFirewallL3FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkWirelessSsidFirewallL3FirewallRules = function(networkId, _number, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidFirewallL3FirewallRules");
      }

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling getNetworkWirelessSsidFirewallL3FirewallRules");
      }


      var pathParams = {
        'networkId': networkId,
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkWirelessSsidFirewallL7FirewallRules operation.
     * @callback module:api/FirewallApi~getNetworkWirelessSsidFirewallL7FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the L7 firewall rules for an SSID on an MR network
     * Return the L7 firewall rules for an SSID on an MR network
     * @param {String} networkId 
     * @param {String} _number 
     * @param {module:api/FirewallApi~getNetworkWirelessSsidFirewallL7FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getNetworkWirelessSsidFirewallL7FirewallRules = function(networkId, _number, callback) {
      var postBody = null;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling getNetworkWirelessSsidFirewallL7FirewallRules");
      }

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling getNetworkWirelessSsidFirewallL7FirewallRules");
      }


      var pathParams = {
        'networkId': networkId,
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallCellularFirewallRules operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallCellularFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the cellular firewall rules of an MX network
     * Update the cellular firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallCellularFirewallRules} opts.updateNetworkApplianceFirewallCellularFirewallRules 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallCellularFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkApplianceFirewallCellularFirewallRules = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkApplianceFirewallCellularFirewallRules'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallCellularFirewallRules");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/cellularFirewallRules', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallFirewalledService operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallFirewalledServiceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
     * Updates the accessibility settings for the given service ('ICMP', 'web', or 'SNMP')
     * @param {String} networkId 
     * @param {String} service 
     * @param {module:model/UpdateNetworkApplianceFirewallFirewalledService} updateNetworkApplianceFirewallFirewalledService 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallFirewalledServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkApplianceFirewallFirewalledService = function(networkId, service, updateNetworkApplianceFirewallFirewalledService, callback) {
      var postBody = updateNetworkApplianceFirewallFirewalledService;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallFirewalledService");
      }

      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling updateNetworkApplianceFirewallFirewalledService");
      }

      // verify the required parameter 'updateNetworkApplianceFirewallFirewalledService' is set
      if (updateNetworkApplianceFirewallFirewalledService === undefined || updateNetworkApplianceFirewallFirewalledService === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallFirewalledService' when calling updateNetworkApplianceFirewallFirewalledService");
      }


      var pathParams = {
        'networkId': networkId,
        'service': service
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/firewalledServices/{service}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallInboundFirewallRules operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallInboundFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the inbound firewall rules of an MX network
     * Update the inbound firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallInboundFirewallRules} opts.updateNetworkApplianceFirewallInboundFirewallRules 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallInboundFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkApplianceFirewallInboundFirewallRules = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkApplianceFirewallInboundFirewallRules'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallInboundFirewallRules");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/inboundFirewallRules', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallL3FirewallRules operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallL3FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the L3 firewall rules of an MX network
     * Update the L3 firewall rules of an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallL3FirewallRules} opts.updateNetworkApplianceFirewallL3FirewallRules 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallL3FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkApplianceFirewallL3FirewallRules = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkApplianceFirewallL3FirewallRules'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallL3FirewallRules");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l3FirewallRules', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallL7FirewallRules operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallL7FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the MX L7 firewall rules for an MX network
     * Update the MX L7 firewall rules for an MX network
     * @param {String} networkId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkApplianceFirewallL7FirewallRules} opts.updateNetworkApplianceFirewallL7FirewallRules 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallL7FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkApplianceFirewallL7FirewallRules = function(networkId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkApplianceFirewallL7FirewallRules'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallL7FirewallRules");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/l7FirewallRules', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallOneToManyNatRules operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallOneToManyNatRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the 1:Many NAT mapping rules for an MX network
     * Set the 1:Many NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceFirewallOneToManyNatRules} updateNetworkApplianceFirewallOneToManyNatRules 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallOneToManyNatRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkApplianceFirewallOneToManyNatRules = function(networkId, updateNetworkApplianceFirewallOneToManyNatRules, callback) {
      var postBody = updateNetworkApplianceFirewallOneToManyNatRules;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallOneToManyNatRules");
      }

      // verify the required parameter 'updateNetworkApplianceFirewallOneToManyNatRules' is set
      if (updateNetworkApplianceFirewallOneToManyNatRules === undefined || updateNetworkApplianceFirewallOneToManyNatRules === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallOneToManyNatRules' when calling updateNetworkApplianceFirewallOneToManyNatRules");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToManyNatRules', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallOneToOneNatRules operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallOneToOneNatRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the 1:1 NAT mapping rules for an MX network
     * Set the 1:1 NAT mapping rules for an MX network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceFirewallOneToOneNatRules} updateNetworkApplianceFirewallOneToOneNatRules 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallOneToOneNatRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkApplianceFirewallOneToOneNatRules = function(networkId, updateNetworkApplianceFirewallOneToOneNatRules, callback) {
      var postBody = updateNetworkApplianceFirewallOneToOneNatRules;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallOneToOneNatRules");
      }

      // verify the required parameter 'updateNetworkApplianceFirewallOneToOneNatRules' is set
      if (updateNetworkApplianceFirewallOneToOneNatRules === undefined || updateNetworkApplianceFirewallOneToOneNatRules === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallOneToOneNatRules' when calling updateNetworkApplianceFirewallOneToOneNatRules");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/oneToOneNatRules', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkApplianceFirewallPortForwardingRules operation.
     * @callback module:api/FirewallApi~updateNetworkApplianceFirewallPortForwardingRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the port forwarding rules for an MX network
     * Update the port forwarding rules for an MX network
     * @param {String} networkId 
     * @param {module:model/UpdateNetworkApplianceFirewallPortForwardingRules} updateNetworkApplianceFirewallPortForwardingRules 
     * @param {module:api/FirewallApi~updateNetworkApplianceFirewallPortForwardingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkApplianceFirewallPortForwardingRules = function(networkId, updateNetworkApplianceFirewallPortForwardingRules, callback) {
      var postBody = updateNetworkApplianceFirewallPortForwardingRules;

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkApplianceFirewallPortForwardingRules");
      }

      // verify the required parameter 'updateNetworkApplianceFirewallPortForwardingRules' is set
      if (updateNetworkApplianceFirewallPortForwardingRules === undefined || updateNetworkApplianceFirewallPortForwardingRules === null) {
        throw new Error("Missing the required parameter 'updateNetworkApplianceFirewallPortForwardingRules' when calling updateNetworkApplianceFirewallPortForwardingRules");
      }


      var pathParams = {
        'networkId': networkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/appliance/firewall/portForwardingRules', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidFirewallL3FirewallRules operation.
     * @callback module:api/FirewallApi~updateNetworkWirelessSsidFirewallL3FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the L3 firewall rules of an SSID on an MR network
     * Update the L3 firewall rules of an SSID on an MR network
     * @param {String} networkId 
     * @param {String} _number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidFirewallL3FirewallRules} opts.updateNetworkWirelessSsidFirewallL3FirewallRules 
     * @param {module:api/FirewallApi~updateNetworkWirelessSsidFirewallL3FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkWirelessSsidFirewallL3FirewallRules = function(networkId, _number, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkWirelessSsidFirewallL3FirewallRules'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidFirewallL3FirewallRules");
      }

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling updateNetworkWirelessSsidFirewallL3FirewallRules");
      }


      var pathParams = {
        'networkId': networkId,
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l3FirewallRules', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkWirelessSsidFirewallL7FirewallRules operation.
     * @callback module:api/FirewallApi~updateNetworkWirelessSsidFirewallL7FirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the L7 firewall rules of an SSID on an MR network
     * Update the L7 firewall rules of an SSID on an MR network
     * @param {String} networkId 
     * @param {String} _number 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateNetworkWirelessSsidFirewallL7FirewallRules} opts.updateNetworkWirelessSsidFirewallL7FirewallRules 
     * @param {module:api/FirewallApi~updateNetworkWirelessSsidFirewallL7FirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateNetworkWirelessSsidFirewallL7FirewallRules = function(networkId, _number, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateNetworkWirelessSsidFirewallL7FirewallRules'];

      // verify the required parameter 'networkId' is set
      if (networkId === undefined || networkId === null) {
        throw new Error("Missing the required parameter 'networkId' when calling updateNetworkWirelessSsidFirewallL7FirewallRules");
      }

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling updateNetworkWirelessSsidFirewallL7FirewallRules");
      }


      var pathParams = {
        'networkId': networkId,
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/networks/{networkId}/wireless/ssids/{number}/firewall/l7FirewallRules', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
