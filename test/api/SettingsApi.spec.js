/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.SettingsApi();
  });

  describe('(package)', function() {
    describe('SettingsApi', function() {
      describe('getDeviceCameraVideoSettings', function() {
        it('should call getDeviceCameraVideoSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceCameraVideoSettings call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceCameraVideoSettings(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceWirelessBluetoothSettings', function() {
        it('should call getDeviceWirelessBluetoothSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceWirelessBluetoothSettings call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceWirelessBluetoothSettings(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDeviceWirelessRadioSettings', function() {
        it('should call getDeviceWirelessRadioSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getDeviceWirelessRadioSettings call and complete the assertions
          /*
          var serial = "serial_example";

          instance.getDeviceWirelessRadioSettings(serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkAlertsSettings', function() {
        it('should call getNetworkAlertsSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkAlertsSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkAlertsSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkApplianceVlansSettings', function() {
        it('should call getNetworkApplianceVlansSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkApplianceVlansSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkApplianceVlansSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSettings', function() {
        it('should call getNetworkSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkSwitchSettings', function() {
        it('should call getNetworkSwitchSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkSwitchSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkSwitchSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessBluetoothSettings', function() {
        it('should call getNetworkWirelessBluetoothSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessBluetoothSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkWirelessBluetoothSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSettings', function() {
        it('should call getNetworkWirelessSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSettings call and complete the assertions
          /*
          var networkId = "networkId_example";

          instance.getNetworkWirelessSettings(networkId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkWirelessSsidSplashSettings', function() {
        it('should call getNetworkWirelessSsidSplashSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkWirelessSsidSplashSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";

          instance.getNetworkWirelessSsidSplashSettings(networkId, _number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceCameraVideoSettings', function() {
        it('should call updateDeviceCameraVideoSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceCameraVideoSettings call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDeviceCameraVideoSettings = new MerakiDashboardApi.UpdateDeviceCameraVideoSettings();
          opts.updateDeviceCameraVideoSettings.externalRtspEnabled = false;

          instance.updateDeviceCameraVideoSettings(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceWirelessBluetoothSettings', function() {
        it('should call updateDeviceWirelessBluetoothSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceWirelessBluetoothSettings call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDeviceWirelessBluetoothSettings = new MerakiDashboardApi.UpdateDeviceWirelessBluetoothSettings();
          opts.updateDeviceWirelessBluetoothSettings.uuid = "";
          opts.updateDeviceWirelessBluetoothSettings.major = 0;
          opts.updateDeviceWirelessBluetoothSettings.minor = 0;

          instance.updateDeviceWirelessBluetoothSettings(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDeviceWirelessRadioSettings', function() {
        it('should call updateDeviceWirelessRadioSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDeviceWirelessRadioSettings call and complete the assertions
          /*
          var serial = "serial_example";
          var opts = {};
          opts.updateDeviceWirelessRadioSettings = new MerakiDashboardApi.UpdateDeviceWirelessRadioSettings();
          opts.updateDeviceWirelessRadioSettings.rfProfileId = 0;
          opts.updateDeviceWirelessRadioSettings.twoFourGhzSettings = new MerakiDashboardApi.DevicesserialwirelessradiosettingsTwoFourGhzSettings();
          opts.updateDeviceWirelessRadioSettings.twoFourGhzSettings.channel = 0;
          opts.updateDeviceWirelessRadioSettings.twoFourGhzSettings.targetPower = 0;
          opts.updateDeviceWirelessRadioSettings.fiveGhzSettings = new MerakiDashboardApi.DevicesserialwirelessradiosettingsFiveGhzSettings();
          opts.updateDeviceWirelessRadioSettings.fiveGhzSettings.channel = 0;
          opts.updateDeviceWirelessRadioSettings.fiveGhzSettings.channelWidth = 0;
          opts.updateDeviceWirelessRadioSettings.fiveGhzSettings.targetPower = 0;

          instance.updateDeviceWirelessRadioSettings(serial, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkAlertsSettings', function() {
        it('should call updateNetworkAlertsSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkAlertsSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkAlertsSettings = new MerakiDashboardApi.UpdateNetworkAlertsSettings();
          opts.updateNetworkAlertsSettings.defaultDestinations = new MerakiDashboardApi.NetworksnetworkIdalertssettingsDefaultDestinations();
          opts.updateNetworkAlertsSettings.defaultDestinations.emails = [""];
          opts.updateNetworkAlertsSettings.defaultDestinations.allAdmins = false;
          opts.updateNetworkAlertsSettings.defaultDestinations.snmp = false;
          opts.updateNetworkAlertsSettings.defaultDestinations.httpServerIds = [""];
          opts.updateNetworkAlertsSettings.alerts = [new MerakiDashboardApi.NetworksnetworkIdalertssettingsAlerts()];
          opts.updateNetworkAlertsSettings.alerts[0].type = "";
          opts.updateNetworkAlertsSettings.alerts[0].enabled = false;
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations = new MerakiDashboardApi.NetworksnetworkIdalertssettingsAlertDestinations();
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations.emails = [""];
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations.allAdmins = false;
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations.snmp = false;
          opts.updateNetworkAlertsSettings.alerts[0].alertDestinations.httpServerIds = [""];
          opts.updateNetworkAlertsSettings.alerts[0].filters = ;

          instance.updateNetworkAlertsSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkApplianceVlansSettings', function() {
        it('should call updateNetworkApplianceVlansSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkApplianceVlansSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkApplianceVlansSettings = new MerakiDashboardApi.UpdateNetworkApplianceVlansSettings();
          opts.updateNetworkApplianceVlansSettings.vlansEnabled = false;

          instance.updateNetworkApplianceVlansSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSettings', function() {
        it('should call updateNetworkSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSettings = new MerakiDashboardApi.UpdateNetworkSettings();
          opts.updateNetworkSettings.localStatusPageEnabled = false;
          opts.updateNetworkSettings.remoteStatusPageEnabled = false;

          instance.updateNetworkSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkSwitchSettings', function() {
        it('should call updateNetworkSwitchSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkSwitchSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkSwitchSettings = new MerakiDashboardApi.UpdateNetworkSwitchSettings();
          opts.updateNetworkSwitchSettings.vlan = 0;
          opts.updateNetworkSwitchSettings.useCombinedPower = false;
          opts.updateNetworkSwitchSettings.powerExceptions = [new MerakiDashboardApi.NetworksnetworkIdswitchsettingsPowerExceptions()];
          opts.updateNetworkSwitchSettings.powerExceptions[0].serial = "";
          opts.updateNetworkSwitchSettings.powerExceptions[0].powerType = "combined";

          instance.updateNetworkSwitchSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessBluetoothSettings', function() {
        it('should call updateNetworkWirelessBluetoothSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessBluetoothSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkWirelessBluetoothSettings = new MerakiDashboardApi.UpdateNetworkWirelessBluetoothSettings();
          opts.updateNetworkWirelessBluetoothSettings.scanningEnabled = false;
          opts.updateNetworkWirelessBluetoothSettings.advertisingEnabled = false;
          opts.updateNetworkWirelessBluetoothSettings.uuid = "";
          opts.updateNetworkWirelessBluetoothSettings.majorMinorAssignmentMode = "Unique";
          opts.updateNetworkWirelessBluetoothSettings.major = 0;
          opts.updateNetworkWirelessBluetoothSettings.minor = 0;

          instance.updateNetworkWirelessBluetoothSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSettings', function() {
        it('should call updateNetworkWirelessSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var opts = {};
          opts.updateNetworkWirelessSettings = new MerakiDashboardApi.UpdateNetworkWirelessSettings();
          opts.updateNetworkWirelessSettings.meshingEnabled = false;
          opts.updateNetworkWirelessSettings.ipv6BridgeEnabled = false;
          opts.updateNetworkWirelessSettings.locationAnalyticsEnabled = false;
          opts.updateNetworkWirelessSettings.upgradeStrategy = "minimizeUpgradeTime";
          opts.updateNetworkWirelessSettings.ledLightsOn = false;

          instance.updateNetworkWirelessSettings(networkId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNetworkWirelessSsidSplashSettings', function() {
        it('should call updateNetworkWirelessSsidSplashSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNetworkWirelessSsidSplashSettings call and complete the assertions
          /*
          var networkId = "networkId_example";
          var _number = "_number_example";
          var opts = {};
          opts.updateNetworkWirelessSsidSplashSettings = new MerakiDashboardApi.UpdateNetworkWirelessSsidSplashSettings();
          opts.updateNetworkWirelessSsidSplashSettings.splashUrl = "";
          opts.updateNetworkWirelessSsidSplashSettings.useSplashUrl = false;

          instance.updateNetworkWirelessSsidSplashSettings(networkId, _number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
