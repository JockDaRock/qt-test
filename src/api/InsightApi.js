/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateOrganizationInsightMonitoredMediaServer', 'model/UpdateOrganizationInsightMonitoredMediaServer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateOrganizationInsightMonitoredMediaServer'), require('../model/UpdateOrganizationInsightMonitoredMediaServer'));
  } else {
    // Browser globals (root is window)
    if (!root.MerakiDashboardApi) {
      root.MerakiDashboardApi = {};
    }
    root.MerakiDashboardApi.InsightApi = factory(root.MerakiDashboardApi.ApiClient, root.MerakiDashboardApi.CreateOrganizationInsightMonitoredMediaServer, root.MerakiDashboardApi.UpdateOrganizationInsightMonitoredMediaServer);
  }
}(this, function(ApiClient, CreateOrganizationInsightMonitoredMediaServer, UpdateOrganizationInsightMonitoredMediaServer) {
  'use strict';

  /**
   * Insight service.
   * @module api/InsightApi
   * @version 1.1.0
   */

  /**
   * Constructs a new InsightApi. 
   * @alias module:api/InsightApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createOrganizationInsightMonitoredMediaServer operation.
     * @callback module:api/InsightApi~createOrganizationInsightMonitoredMediaServerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
     * Add a media server to be monitored for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {module:model/CreateOrganizationInsightMonitoredMediaServer} createOrganizationInsightMonitoredMediaServer 
     * @param {module:api/InsightApi~createOrganizationInsightMonitoredMediaServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createOrganizationInsightMonitoredMediaServer = function(organizationId, createOrganizationInsightMonitoredMediaServer, callback) {
      var postBody = createOrganizationInsightMonitoredMediaServer;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling createOrganizationInsightMonitoredMediaServer");
      }

      // verify the required parameter 'createOrganizationInsightMonitoredMediaServer' is set
      if (createOrganizationInsightMonitoredMediaServer === undefined || createOrganizationInsightMonitoredMediaServer === null) {
        throw new Error("Missing the required parameter 'createOrganizationInsightMonitoredMediaServer' when calling createOrganizationInsightMonitoredMediaServer");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrganizationInsightMonitoredMediaServer operation.
     * @callback module:api/InsightApi~deleteOrganizationInsightMonitoredMediaServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
     * Delete a monitored media server from this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {String} monitoredMediaServerId 
     * @param {module:api/InsightApi~deleteOrganizationInsightMonitoredMediaServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrganizationInsightMonitoredMediaServer = function(organizationId, monitoredMediaServerId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling deleteOrganizationInsightMonitoredMediaServer");
      }

      // verify the required parameter 'monitoredMediaServerId' is set
      if (monitoredMediaServerId === undefined || monitoredMediaServerId === null) {
        throw new Error("Missing the required parameter 'monitoredMediaServerId' when calling deleteOrganizationInsightMonitoredMediaServer");
      }


      var pathParams = {
        'organizationId': organizationId,
        'monitoredMediaServerId': monitoredMediaServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInsightMonitoredMediaServer operation.
     * @callback module:api/InsightApi~getOrganizationInsightMonitoredMediaServerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * Return a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {String} monitoredMediaServerId 
     * @param {module:api/InsightApi~getOrganizationInsightMonitoredMediaServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationInsightMonitoredMediaServer = function(organizationId, monitoredMediaServerId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInsightMonitoredMediaServer");
      }

      // verify the required parameter 'monitoredMediaServerId' is set
      if (monitoredMediaServerId === undefined || monitoredMediaServerId === null) {
        throw new Error("Missing the required parameter 'monitoredMediaServerId' when calling getOrganizationInsightMonitoredMediaServer");
      }


      var pathParams = {
        'organizationId': organizationId,
        'monitoredMediaServerId': monitoredMediaServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganizationInsightMonitoredMediaServers operation.
     * @callback module:api/InsightApi~getOrganizationInsightMonitoredMediaServersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
     * List the monitored media servers for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {module:api/InsightApi~getOrganizationInsightMonitoredMediaServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getOrganizationInsightMonitoredMediaServers = function(organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getOrganizationInsightMonitoredMediaServers");
      }


      var pathParams = {
        'organizationId': organizationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrganizationInsightMonitoredMediaServer operation.
     * @callback module:api/InsightApi~updateOrganizationInsightMonitoredMediaServerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * Update a monitored media server for this organization. Only valid for organizations with Meraki Insight.
     * @param {String} organizationId 
     * @param {String} monitoredMediaServerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateOrganizationInsightMonitoredMediaServer} opts.updateOrganizationInsightMonitoredMediaServer 
     * @param {module:api/InsightApi~updateOrganizationInsightMonitoredMediaServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateOrganizationInsightMonitoredMediaServer = function(organizationId, monitoredMediaServerId, opts, callback) {
      opts = opts || {};
      var postBody = opts['updateOrganizationInsightMonitoredMediaServer'];

      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling updateOrganizationInsightMonitoredMediaServer");
      }

      // verify the required parameter 'monitoredMediaServerId' is set
      if (monitoredMediaServerId === undefined || monitoredMediaServerId === null) {
        throw new Error("Missing the required parameter 'monitoredMediaServerId' when calling updateOrganizationInsightMonitoredMediaServer");
      }


      var pathParams = {
        'organizationId': organizationId,
        'monitoredMediaServerId': monitoredMediaServerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['meraki_api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/organizations/{organizationId}/insight/monitoredMediaServers/{monitoredMediaServerId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
