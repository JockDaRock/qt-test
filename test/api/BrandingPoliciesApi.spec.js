/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.BrandingPoliciesApi();
  });

  describe('(package)', function() {
    describe('BrandingPoliciesApi', function() {
      describe('createOrganizationBrandingPolicy', function() {
        it('should call createOrganizationBrandingPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationBrandingPolicy call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationBrandingPolicy = new MerakiDashboardApi.CreateOrganizationBrandingPolicy();
          createOrganizationBrandingPolicy.name = "";
          createOrganizationBrandingPolicy.enabled = false;
          createOrganizationBrandingPolicy.adminSettings = new MerakiDashboardApi.OrganizationsorganizationIdbrandingPoliciesAdminSettings();
          createOrganizationBrandingPolicy.adminSettings.appliesTo = "All organization admins";
          createOrganizationBrandingPolicy.adminSettings.values = [""];
          createOrganizationBrandingPolicy.helpSettings = new MerakiDashboardApi.OrganizationsorganizationIdbrandingPoliciesHelpSettings();
          createOrganizationBrandingPolicy.helpSettings.helpTab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.getHelpSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.communitySubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.casesSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.dataProtectionRequestsSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.getHelpSubtabKnowledgeBaseSearch = "";
          createOrganizationBrandingPolicy.helpSettings.universalSearchKnowledgeBaseSearch = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.ciscoMerakiProductDocumentation = "";
          createOrganizationBrandingPolicy.helpSettings.supportContactInfo = "";
          createOrganizationBrandingPolicy.helpSettings.newFeaturesSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.firewallInfoSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.apiDocsSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.hardwareReplacementsSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.smForums = "default or inherit";

          instance.createOrganizationBrandingPolicy(organizationId, createOrganizationBrandingPolicy, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationBrandingPolicy', function() {
        it('should call deleteOrganizationBrandingPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationBrandingPolicy call
          /*
          var organizationId = "organizationId_example";
          var brandingPolicyId = "brandingPolicyId_example";

          instance.deleteOrganizationBrandingPolicy(organizationId, brandingPolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationBrandingPolicies', function() {
        it('should call getOrganizationBrandingPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationBrandingPolicies call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationBrandingPolicies(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationBrandingPoliciesPriorities', function() {
        it('should call getOrganizationBrandingPoliciesPriorities successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationBrandingPoliciesPriorities call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationBrandingPoliciesPriorities(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationBrandingPolicy', function() {
        it('should call getOrganizationBrandingPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationBrandingPolicy call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var brandingPolicyId = "brandingPolicyId_example";

          instance.getOrganizationBrandingPolicy(organizationId, brandingPolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationBrandingPoliciesPriorities', function() {
        it('should call updateOrganizationBrandingPoliciesPriorities successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationBrandingPoliciesPriorities call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var updateOrganizationBrandingPoliciesPriorities = new MerakiDashboardApi.UpdateOrganizationBrandingPoliciesPriorities();
          updateOrganizationBrandingPoliciesPriorities.brandingPolicyIds = [""];

          instance.updateOrganizationBrandingPoliciesPriorities(organizationId, updateOrganizationBrandingPoliciesPriorities, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationBrandingPolicy', function() {
        it('should call updateOrganizationBrandingPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationBrandingPolicy call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var brandingPolicyId = "brandingPolicyId_example";
          var opts = {};
          opts.updateOrganizationBrandingPolicy = new MerakiDashboardApi.UpdateOrganizationBrandingPolicy();
          opts.updateOrganizationBrandingPolicy.name = "";
          opts.updateOrganizationBrandingPolicy.enabled = false;
          opts.updateOrganizationBrandingPolicy.adminSettings = new MerakiDashboardApi.OrganizationsorganizationIdbrandingPoliciesAdminSettings();
          opts.updateOrganizationBrandingPolicy.adminSettings.appliesTo = "All organization admins";
          opts.updateOrganizationBrandingPolicy.adminSettings.values = [""];
          opts.updateOrganizationBrandingPolicy.helpSettings = new MerakiDashboardApi.OrganizationsorganizationIdbrandingPoliciesbrandingPolicyIdHelpSettings();
          opts.updateOrganizationBrandingPolicy.helpSettings.helpTab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.getHelpSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.communitySubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.casesSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.dataProtectionRequestsSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.getHelpSubtabKnowledgeBaseSearch = "";
          opts.updateOrganizationBrandingPolicy.helpSettings.universalSearchKnowledgeBaseSearch = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.ciscoMerakiProductDocumentation = "";
          opts.updateOrganizationBrandingPolicy.helpSettings.supportContactInfo = "";
          opts.updateOrganizationBrandingPolicy.helpSettings.newFeaturesSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.firewallInfoSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.apiDocsSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.hardwareReplacementsSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.smForums = "default or inherit";

          instance.updateOrganizationBrandingPolicy(organizationId, brandingPolicyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
