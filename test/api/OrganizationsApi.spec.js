/*
 * Meraki Dashboard API
 * The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 02 September, 2020 > > [What's New](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 
 *
 * OpenAPI spec version: 1.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MerakiDashboardApi);
  }
}(this, function(expect, MerakiDashboardApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MerakiDashboardApi.OrganizationsApi();
  });

  describe('(package)', function() {
    describe('OrganizationsApi', function() {
      describe('assignOrganizationLicensesSeats', function() {
        it('should call assignOrganizationLicensesSeats successfully', function(done) {
          // TODO: uncomment, update parameter values for assignOrganizationLicensesSeats call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var assignOrganizationLicensesSeats = new MerakiDashboardApi.AssignOrganizationLicensesSeats();
          assignOrganizationLicensesSeats.licenseId = "";
          assignOrganizationLicensesSeats.networkId = "";
          assignOrganizationLicensesSeats.seatCount = 0;

          instance.assignOrganizationLicensesSeats(organizationId, assignOrganizationLicensesSeats, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('claimIntoOrganization', function() {
        it('should call claimIntoOrganization successfully', function(done) {
          // TODO: uncomment, update parameter values for claimIntoOrganization call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.claimIntoOrganization = new MerakiDashboardApi.ClaimIntoOrganization();
          opts.claimIntoOrganization.orders = [""];
          opts.claimIntoOrganization.serials = [""];
          opts.claimIntoOrganization.licenses = [new MerakiDashboardApi.OrganizationsorganizationIdclaimLicenses()];
          opts.claimIntoOrganization.licenses[0].key = "";
          opts.claimIntoOrganization.licenses[0].mode = "addDevices";

          instance.claimIntoOrganization(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cloneOrganization', function() {
        it('should call cloneOrganization successfully', function(done) {
          // TODO: uncomment, update parameter values for cloneOrganization call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var cloneOrganization = new MerakiDashboardApi.CloneOrganization();
          cloneOrganization.name = "";

          instance.cloneOrganization(organizationId, cloneOrganization, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('combineOrganizationNetworks', function() {
        it('should call combineOrganizationNetworks successfully', function(done) {
          // TODO: uncomment, update parameter values for combineOrganizationNetworks call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var combineOrganizationNetworks = new MerakiDashboardApi.CombineOrganizationNetworks();
          combineOrganizationNetworks.name = "";
          combineOrganizationNetworks.networkIds = [""];
          combineOrganizationNetworks.enrollmentString = "";

          instance.combineOrganizationNetworks(organizationId, combineOrganizationNetworks, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganization', function() {
        it('should call createOrganization successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganization call and complete the assertions
          /*
          var createOrganization = new MerakiDashboardApi.CreateOrganization();
          createOrganization.name = "";

          instance.createOrganization(createOrganization, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationActionBatch', function() {
        it('should call createOrganizationActionBatch successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationActionBatch call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationActionBatch = new MerakiDashboardApi.CreateOrganizationActionBatch();
          createOrganizationActionBatch.confirmed = false;
          createOrganizationActionBatch.synchronous = false;
          createOrganizationActionBatch.actions = [new MerakiDashboardApi.OrganizationsorganizationIdactionBatchesActions()];
          createOrganizationActionBatch.actions[0].resource = "";
          createOrganizationActionBatch.actions[0].operation = "";
          createOrganizationActionBatch.actions[0].body = ;

          instance.createOrganizationActionBatch(organizationId, createOrganizationActionBatch, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationAdmin', function() {
        it('should call createOrganizationAdmin successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationAdmin call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationAdmin = new MerakiDashboardApi.CreateOrganizationAdmin();
          createOrganizationAdmin.email = "";
          createOrganizationAdmin.name = "";
          createOrganizationAdmin.orgAccess = "full";
          createOrganizationAdmin.tags = [new MerakiDashboardApi.OrganizationsorganizationIdadminsTags()];
          createOrganizationAdmin.tags[0].tag = "";
          createOrganizationAdmin.tags[0].access = "full";
          createOrganizationAdmin.networks = [new MerakiDashboardApi.OrganizationsorganizationIdadminsNetworks()];
          createOrganizationAdmin.networks[0].id = "";
          createOrganizationAdmin.networks[0].access = "full";
          createOrganizationAdmin.authenticationMethod = "Email";

          instance.createOrganizationAdmin(organizationId, createOrganizationAdmin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationBrandingPolicy', function() {
        it('should call createOrganizationBrandingPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationBrandingPolicy call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationBrandingPolicy = new MerakiDashboardApi.CreateOrganizationBrandingPolicy();
          createOrganizationBrandingPolicy.name = "";
          createOrganizationBrandingPolicy.enabled = false;
          createOrganizationBrandingPolicy.adminSettings = new MerakiDashboardApi.OrganizationsorganizationIdbrandingPoliciesAdminSettings();
          createOrganizationBrandingPolicy.adminSettings.appliesTo = "All organization admins";
          createOrganizationBrandingPolicy.adminSettings.values = [""];
          createOrganizationBrandingPolicy.helpSettings = new MerakiDashboardApi.OrganizationsorganizationIdbrandingPoliciesHelpSettings();
          createOrganizationBrandingPolicy.helpSettings.helpTab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.getHelpSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.communitySubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.casesSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.dataProtectionRequestsSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.getHelpSubtabKnowledgeBaseSearch = "";
          createOrganizationBrandingPolicy.helpSettings.universalSearchKnowledgeBaseSearch = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.ciscoMerakiProductDocumentation = "";
          createOrganizationBrandingPolicy.helpSettings.supportContactInfo = "";
          createOrganizationBrandingPolicy.helpSettings.newFeaturesSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.firewallInfoSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.apiDocsSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.hardwareReplacementsSubtab = "default or inherit";
          createOrganizationBrandingPolicy.helpSettings.smForums = "default or inherit";

          instance.createOrganizationBrandingPolicy(organizationId, createOrganizationBrandingPolicy, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationConfigTemplate', function() {
        it('should call createOrganizationConfigTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationConfigTemplate call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationConfigTemplate = new MerakiDashboardApi.CreateOrganizationConfigTemplate();
          createOrganizationConfigTemplate.name = "";
          createOrganizationConfigTemplate.timeZone = "";
          createOrganizationConfigTemplate.copyFromNetworkId = "";

          instance.createOrganizationConfigTemplate(organizationId, createOrganizationConfigTemplate, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationNetwork', function() {
        it('should call createOrganizationNetwork successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationNetwork call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationNetwork = new MerakiDashboardApi.CreateOrganizationNetwork();
          createOrganizationNetwork.name = "";
          createOrganizationNetwork.productTypes = ["wireless"]"wireless";
          createOrganizationNetwork.tags = [""];
          createOrganizationNetwork.timeZone = "";
          createOrganizationNetwork.copyFromNetworkId = "";

          instance.createOrganizationNetwork(organizationId, createOrganizationNetwork, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationSamlIdp', function() {
        it('should call createOrganizationSamlIdp successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationSamlIdp call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationSamlIdp = new MerakiDashboardApi.CreateOrganizationSamlIdp();
          createOrganizationSamlIdp.x509certSha1Fingerprint = "";
          createOrganizationSamlIdp.sloLogoutUrl = "";

          instance.createOrganizationSamlIdp(organizationId, createOrganizationSamlIdp, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrganizationSamlRole', function() {
        it('should call createOrganizationSamlRole successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrganizationSamlRole call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var createOrganizationSamlRole = new MerakiDashboardApi.CreateOrganizationSamlRole();
          createOrganizationSamlRole.role = "";
          createOrganizationSamlRole.orgAccess = "none";
          createOrganizationSamlRole.tags = [new MerakiDashboardApi.OrganizationsorganizationIdsamlRolesTags()];
          createOrganizationSamlRole.tags[0].tag = "";
          createOrganizationSamlRole.tags[0].access = "full";
          createOrganizationSamlRole.networks = [new MerakiDashboardApi.OrganizationsorganizationIdsamlRolesNetworks()];
          createOrganizationSamlRole.networks[0].id = "";
          createOrganizationSamlRole.networks[0].access = "full";

          instance.createOrganizationSamlRole(organizationId, createOrganizationSamlRole, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganization', function() {
        it('should call deleteOrganization successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganization call
          /*
          var organizationId = "organizationId_example";

          instance.deleteOrganization(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationActionBatch', function() {
        it('should call deleteOrganizationActionBatch successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationActionBatch call
          /*
          var organizationId = "organizationId_example";
          var actionBatchId = "actionBatchId_example";

          instance.deleteOrganizationActionBatch(organizationId, actionBatchId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationAdmin', function() {
        it('should call deleteOrganizationAdmin successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationAdmin call
          /*
          var organizationId = "organizationId_example";
          var adminId = "adminId_example";

          instance.deleteOrganizationAdmin(organizationId, adminId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationBrandingPolicy', function() {
        it('should call deleteOrganizationBrandingPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationBrandingPolicy call
          /*
          var organizationId = "organizationId_example";
          var brandingPolicyId = "brandingPolicyId_example";

          instance.deleteOrganizationBrandingPolicy(organizationId, brandingPolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationConfigTemplate', function() {
        it('should call deleteOrganizationConfigTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationConfigTemplate call
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";

          instance.deleteOrganizationConfigTemplate(organizationId, configTemplateId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationSamlIdp', function() {
        it('should call deleteOrganizationSamlIdp successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationSamlIdp call
          /*
          var organizationId = "organizationId_example";
          var idpId = "idpId_example";

          instance.deleteOrganizationSamlIdp(organizationId, idpId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrganizationSamlRole', function() {
        it('should call deleteOrganizationSamlRole successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrganizationSamlRole call
          /*
          var organizationId = "organizationId_example";
          var samlRoleId = "samlRoleId_example";

          instance.deleteOrganizationSamlRole(organizationId, samlRoleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganization', function() {
        it('should call getOrganization successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganization call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganization(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationActionBatch', function() {
        it('should call getOrganizationActionBatch successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationActionBatch call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var actionBatchId = "actionBatchId_example";

          instance.getOrganizationActionBatch(organizationId, actionBatchId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationActionBatches', function() {
        it('should call getOrganizationActionBatches successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationActionBatches call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.status = "status_example";

          instance.getOrganizationActionBatches(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationAdmins', function() {
        it('should call getOrganizationAdmins successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationAdmins call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationAdmins(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApiRequests', function() {
        it('should call getOrganizationApiRequests successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApiRequests call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.adminId = "adminId_example";
          opts.path = "path_example";
          opts.method = "method_example";
          opts.responseCode = 56;
          opts.sourceIp = "sourceIp_example";

          instance.getOrganizationApiRequests(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationApiRequestsOverview', function() {
        it('should call getOrganizationApiRequestsOverview successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationApiRequestsOverview call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;

          instance.getOrganizationApiRequestsOverview(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationBrandingPolicies', function() {
        it('should call getOrganizationBrandingPolicies successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationBrandingPolicies call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationBrandingPolicies(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationBrandingPoliciesPriorities', function() {
        it('should call getOrganizationBrandingPoliciesPriorities successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationBrandingPoliciesPriorities call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationBrandingPoliciesPriorities(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationBrandingPolicy', function() {
        it('should call getOrganizationBrandingPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationBrandingPolicy call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var brandingPolicyId = "brandingPolicyId_example";

          instance.getOrganizationBrandingPolicy(organizationId, brandingPolicyId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplate', function() {
        it('should call getOrganizationConfigTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplate call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";

          instance.getOrganizationConfigTemplate(organizationId, configTemplateId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigTemplates', function() {
        it('should call getOrganizationConfigTemplates successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigTemplates call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationConfigTemplates(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationConfigurationChanges', function() {
        it('should call getOrganizationConfigurationChanges successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationConfigurationChanges call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.networkId = "networkId_example";
          opts.adminId = "adminId_example";

          instance.getOrganizationConfigurationChanges(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationDevices', function() {
        it('should call getOrganizationDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationDevices call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.configurationUpdatedAfter = "configurationUpdatedAfter_example";

          instance.getOrganizationDevices(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationDevicesStatuses', function() {
        it('should call getOrganizationDevicesStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationDevicesStatuses call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getOrganizationDevicesStatuses(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationDevicesUplinksLossAndLatency', function() {
        it('should call getOrganizationDevicesUplinksLossAndLatency successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationDevicesUplinksLossAndLatency call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.uplink = "uplink_example";
          opts.ip = "ip_example";

          instance.getOrganizationDevicesUplinksLossAndLatency(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationInventoryDevice', function() {
        it('should call getOrganizationInventoryDevice successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationInventoryDevice call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var serial = "serial_example";

          instance.getOrganizationInventoryDevice(organizationId, serial, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationInventoryDevices', function() {
        it('should call getOrganizationInventoryDevices successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationInventoryDevices call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.usedState = "usedState_example";
          opts.search = "search_example";

          instance.getOrganizationInventoryDevices(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationLicense', function() {
        it('should call getOrganizationLicense successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationLicense call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var licenseId = "licenseId_example";

          instance.getOrganizationLicense(organizationId, licenseId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationLicenses', function() {
        it('should call getOrganizationLicenses successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationLicenses call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.deviceSerial = "deviceSerial_example";
          opts.networkId = "networkId_example";
          opts.state = "state_example";

          instance.getOrganizationLicenses(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationLicensesOverview', function() {
        it('should call getOrganizationLicensesOverview successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationLicensesOverview call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationLicensesOverview(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationNetworks', function() {
        it('should call getOrganizationNetworks successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationNetworks call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.configTemplateId = "configTemplateId_example";
          opts.tags = ["tags_example"];
          opts.tagsFilterType = "tagsFilterType_example";
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";

          instance.getOrganizationNetworks(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationOpenapiSpec', function() {
        it('should call getOrganizationOpenapiSpec successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationOpenapiSpec call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationOpenapiSpec(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSaml', function() {
        it('should call getOrganizationSaml successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSaml call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationSaml(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSamlIdp', function() {
        it('should call getOrganizationSamlIdp successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSamlIdp call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var idpId = "idpId_example";

          instance.getOrganizationSamlIdp(organizationId, idpId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSamlIdps', function() {
        it('should call getOrganizationSamlIdps successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSamlIdps call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationSamlIdps(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSamlRole', function() {
        it('should call getOrganizationSamlRole successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSamlRole call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var samlRoleId = "samlRoleId_example";

          instance.getOrganizationSamlRole(organizationId, samlRoleId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSamlRoles', function() {
        it('should call getOrganizationSamlRoles successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSamlRoles call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationSamlRoles(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationSnmp', function() {
        it('should call getOrganizationSnmp successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationSnmp call and complete the assertions
          /*
          var organizationId = "organizationId_example";

          instance.getOrganizationSnmp(organizationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizationWebhooksLogs', function() {
        it('should call getOrganizationWebhooksLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrganizationWebhooksLogs call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.t0 = "t0_example";
          opts.t1 = "t1_example";
          opts.timespan = 3.4;
          opts.perPage = 56;
          opts.startingAfter = "startingAfter_example";
          opts.endingBefore = "endingBefore_example";
          opts.url = "url_example";

          instance.getOrganizationWebhooksLogs(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrganizations', function() {
        it('should call getOrganizations successfully', function(done) {
          // TODO: uncomment getOrganizations call and complete the assertions
          /*

          instance.getOrganizations(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('moveOrganizationLicenses', function() {
        it('should call moveOrganizationLicenses successfully', function(done) {
          // TODO: uncomment, update parameter values for moveOrganizationLicenses call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var moveOrganizationLicenses = new MerakiDashboardApi.MoveOrganizationLicenses();
          moveOrganizationLicenses.destOrganizationId = "";
          moveOrganizationLicenses.licenseIds = [""];

          instance.moveOrganizationLicenses(organizationId, moveOrganizationLicenses, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('moveOrganizationLicensesSeats', function() {
        it('should call moveOrganizationLicensesSeats successfully', function(done) {
          // TODO: uncomment, update parameter values for moveOrganizationLicensesSeats call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var moveOrganizationLicensesSeats = new MerakiDashboardApi.MoveOrganizationLicensesSeats();
          moveOrganizationLicensesSeats.destOrganizationId = "";
          moveOrganizationLicensesSeats.licenseId = "";
          moveOrganizationLicensesSeats.seatCount = 0;

          instance.moveOrganizationLicensesSeats(organizationId, moveOrganizationLicensesSeats, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('renewOrganizationLicensesSeats', function() {
        it('should call renewOrganizationLicensesSeats successfully', function(done) {
          // TODO: uncomment, update parameter values for renewOrganizationLicensesSeats call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var renewOrganizationLicensesSeats = new MerakiDashboardApi.RenewOrganizationLicensesSeats();
          renewOrganizationLicensesSeats.licenseIdToRenew = "";
          renewOrganizationLicensesSeats.unusedLicenseId = "";

          instance.renewOrganizationLicensesSeats(organizationId, renewOrganizationLicensesSeats, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganization', function() {
        it('should call updateOrganization successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganization call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.updateOrganization = new MerakiDashboardApi.UpdateOrganization();
          opts.updateOrganization.name = "";

          instance.updateOrganization(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationActionBatch', function() {
        it('should call updateOrganizationActionBatch successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationActionBatch call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var actionBatchId = "actionBatchId_example";
          var opts = {};
          opts.updateOrganizationActionBatch = new MerakiDashboardApi.UpdateOrganizationActionBatch();
          opts.updateOrganizationActionBatch.confirmed = false;
          opts.updateOrganizationActionBatch.synchronous = false;

          instance.updateOrganizationActionBatch(organizationId, actionBatchId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationAdmin', function() {
        it('should call updateOrganizationAdmin successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationAdmin call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var adminId = "adminId_example";
          var opts = {};
          opts.updateOrganizationAdmin = new MerakiDashboardApi.UpdateOrganizationAdmin();
          opts.updateOrganizationAdmin.name = "";
          opts.updateOrganizationAdmin.orgAccess = "full";
          opts.updateOrganizationAdmin.tags = [new MerakiDashboardApi.OrganizationsorganizationIdadminsTags()];
          opts.updateOrganizationAdmin.tags[0].tag = "";
          opts.updateOrganizationAdmin.tags[0].access = "full";
          opts.updateOrganizationAdmin.networks = [new MerakiDashboardApi.OrganizationsorganizationIdadminsNetworks()];
          opts.updateOrganizationAdmin.networks[0].id = "";
          opts.updateOrganizationAdmin.networks[0].access = "full";

          instance.updateOrganizationAdmin(organizationId, adminId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationBrandingPoliciesPriorities', function() {
        it('should call updateOrganizationBrandingPoliciesPriorities successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationBrandingPoliciesPriorities call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var updateOrganizationBrandingPoliciesPriorities = new MerakiDashboardApi.UpdateOrganizationBrandingPoliciesPriorities();
          updateOrganizationBrandingPoliciesPriorities.brandingPolicyIds = [""];

          instance.updateOrganizationBrandingPoliciesPriorities(organizationId, updateOrganizationBrandingPoliciesPriorities, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationBrandingPolicy', function() {
        it('should call updateOrganizationBrandingPolicy successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationBrandingPolicy call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var brandingPolicyId = "brandingPolicyId_example";
          var opts = {};
          opts.updateOrganizationBrandingPolicy = new MerakiDashboardApi.UpdateOrganizationBrandingPolicy();
          opts.updateOrganizationBrandingPolicy.name = "";
          opts.updateOrganizationBrandingPolicy.enabled = false;
          opts.updateOrganizationBrandingPolicy.adminSettings = new MerakiDashboardApi.OrganizationsorganizationIdbrandingPoliciesAdminSettings();
          opts.updateOrganizationBrandingPolicy.adminSettings.appliesTo = "All organization admins";
          opts.updateOrganizationBrandingPolicy.adminSettings.values = [""];
          opts.updateOrganizationBrandingPolicy.helpSettings = new MerakiDashboardApi.OrganizationsorganizationIdbrandingPoliciesbrandingPolicyIdHelpSettings();
          opts.updateOrganizationBrandingPolicy.helpSettings.helpTab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.getHelpSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.communitySubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.casesSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.dataProtectionRequestsSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.getHelpSubtabKnowledgeBaseSearch = "";
          opts.updateOrganizationBrandingPolicy.helpSettings.universalSearchKnowledgeBaseSearch = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.ciscoMerakiProductDocumentation = "";
          opts.updateOrganizationBrandingPolicy.helpSettings.supportContactInfo = "";
          opts.updateOrganizationBrandingPolicy.helpSettings.newFeaturesSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.firewallInfoSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.apiDocsSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.hardwareReplacementsSubtab = "default or inherit";
          opts.updateOrganizationBrandingPolicy.helpSettings.smForums = "default or inherit";

          instance.updateOrganizationBrandingPolicy(organizationId, brandingPolicyId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationConfigTemplate', function() {
        it('should call updateOrganizationConfigTemplate successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationConfigTemplate call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var configTemplateId = "configTemplateId_example";
          var opts = {};
          opts.updateOrganizationConfigTemplate = new MerakiDashboardApi.UpdateOrganizationConfigTemplate();
          opts.updateOrganizationConfigTemplate.name = "";
          opts.updateOrganizationConfigTemplate.timeZone = "";

          instance.updateOrganizationConfigTemplate(organizationId, configTemplateId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationLicense', function() {
        it('should call updateOrganizationLicense successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationLicense call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var licenseId = "licenseId_example";
          var opts = {};
          opts.updateOrganizationLicense = new MerakiDashboardApi.UpdateOrganizationLicense();
          opts.updateOrganizationLicense.deviceSerial = "";

          instance.updateOrganizationLicense(organizationId, licenseId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationSaml', function() {
        it('should call updateOrganizationSaml successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationSaml call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.updateOrganizationSaml = new MerakiDashboardApi.UpdateOrganizationSaml();
          opts.updateOrganizationSaml.enabled = false;

          instance.updateOrganizationSaml(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationSamlIdp', function() {
        it('should call updateOrganizationSamlIdp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationSamlIdp call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var idpId = "idpId_example";
          var opts = {};
          opts.updateOrganizationSamlIdp = new MerakiDashboardApi.UpdateOrganizationSamlIdp();
          opts.updateOrganizationSamlIdp.x509certSha1Fingerprint = "";
          opts.updateOrganizationSamlIdp.sloLogoutUrl = "";

          instance.updateOrganizationSamlIdp(organizationId, idpId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationSamlRole', function() {
        it('should call updateOrganizationSamlRole successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationSamlRole call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var samlRoleId = "samlRoleId_example";
          var opts = {};
          opts.updateOrganizationSamlRole = new MerakiDashboardApi.UpdateOrganizationSamlRole();
          opts.updateOrganizationSamlRole.role = "";
          opts.updateOrganizationSamlRole.orgAccess = "none";
          opts.updateOrganizationSamlRole.tags = [new MerakiDashboardApi.OrganizationsorganizationIdsamlRolesTags()];
          opts.updateOrganizationSamlRole.tags[0].tag = "";
          opts.updateOrganizationSamlRole.tags[0].access = "full";
          opts.updateOrganizationSamlRole.networks = [new MerakiDashboardApi.OrganizationsorganizationIdsamlRolesNetworks()];
          opts.updateOrganizationSamlRole.networks[0].id = "";
          opts.updateOrganizationSamlRole.networks[0].access = "full";

          instance.updateOrganizationSamlRole(organizationId, samlRoleId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrganizationSnmp', function() {
        it('should call updateOrganizationSnmp successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrganizationSnmp call and complete the assertions
          /*
          var organizationId = "organizationId_example";
          var opts = {};
          opts.updateOrganizationSnmp = new MerakiDashboardApi.UpdateOrganizationSnmp();
          opts.updateOrganizationSnmp.v2cEnabled = false;
          opts.updateOrganizationSnmp.v3Enabled = false;
          opts.updateOrganizationSnmp.v3AuthMode = "MD5";
          opts.updateOrganizationSnmp.v3AuthPass = "";
          opts.updateOrganizationSnmp.v3PrivMode = "DES";
          opts.updateOrganizationSnmp.v3PrivPass = "";
          opts.updateOrganizationSnmp.peerIps = [""];

          instance.updateOrganizationSnmp(organizationId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
